var searchIndex = {};
searchIndex["adler32"] = {"doc":"A minimal implementation of Adler32 for Rust.","items":[[3,"RollingAdler32","adler32","A rolling version of the Adler32 hash, which can 'forget' past bytes.",null,null],[5,"adler32","","Consume a Read object and returns the Adler32 hash.",null,{"inputs":[{"name":"r"}],"output":{"generics":["u32"],"name":"result"}}],[11,"new","","Creates an empty Adler32 context (with hash 1).",0,{"inputs":[],"output":{"name":"rollingadler32"}}],[11,"from_value","","Creates an Adler32 context with the given initial value.",0,{"inputs":[{"name":"u32"}],"output":{"name":"rollingadler32"}}],[11,"from_buffer","","Convenience function initializing a context from the hash of a buffer.",0,null],[11,"hash","","Returns the current hash.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"remove","","Removes the given `byte` that was fed to the algorithm `size` bytes ago.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":null}],[11,"update","","Feeds a new `byte` to the algorithm to update the hash.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"update_buffer","","Feeds a vector of bytes to the algorithm to update the hash.",0,null]],"paths":[[3,"RollingAdler32"]]};
searchIndex["alga"] = {"doc":"Traits for algebra.","items":[[0,"general","alga","Fundamental algebraic structures.",null,null],[3,"Multiplicative","alga::general","The multiplication operator, commonly symbolized by `×`.",null,null],[3,"Additive","","The addition operator, commonly symbolized by `+`.",null,null],[3,"Id","","The universal identity element wrt. a given operator, usually noted `Id` with a context-dependent subscript.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new identity element.",0,{"inputs":[],"output":{"name":"id"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"identity","","",0,{"inputs":[],"output":{"name":"id"}}],[11,"default_epsilon","","",0,null],[11,"default_max_relative","","",0,null],[11,"default_max_ulps","","",0,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",0,null],[11,"ulps_eq","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":null}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":null}],[11,"operate","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"id"}}],[11,"inverse","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"one","","",0,{"inputs":[],"output":{"name":"id"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"id"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_superset","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_in_subset","","",0,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"meet","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"join","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"additive"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"multiplicative"}}],[11,"operator_token","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"operator_token","","",2,{"inputs":[],"output":{"name":"self"}}],[8,"Inverse","","Trait used to define the inverse element relative to the given operator.",null,null],[10,"inverse","","Returns the inverse of `self`, relative to the operator `O`.",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","In-place inversin of `self`.",3,{"inputs":[{"name":"self"}],"output":null}],[8,"Operator","","Trait implemented by types representing abstract operators.",null,null],[10,"operator_token","","Returns the structure that identifies the operator.",4,{"inputs":[],"output":{"name":"self"}}],[8,"ClosedAdd","","[Alias] Trait alias for `Add` and `AddAsign` with result of type `Self`.",null,null],[8,"ClosedMul","","[Alias] Trait alias for `Mul` and `MulAsign` with result of type `Self`.",null,null],[8,"ClosedSub","","[Alias] Trait alias for `Sub` and `SubAsign` with result of type `Self`.",null,null],[8,"ClosedNeg","","[Alias] Trait alias for `Neg` with result of type `Self`.",null,null],[8,"ClosedDiv","","[Alias] Trait alias for `Div` and `DivAsign` with result of type `Self`.",null,null],[8,"Identity","","A type that is equipped with identity.",null,null],[10,"identity","","The identity element.",5,{"inputs":[],"output":{"name":"self"}}],[11,"id","","Specific identity.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[8,"SubsetOf","","Nested sets and conversions between them (using an injective mapping). Useful to work with substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever `SubsetOf` is).",null,null],[10,"to_superset","","The inclusion map: converts `self` to the equivalent element of its superset.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from_superset","","The inverse inclusion map: attempts to construct `self` from the equivalent element of its superset.",6,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[10,"from_superset_unchecked","","Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"is_in_subset","","Checks if `element` is actually part of the subset `Self` (and can be converted to it).",6,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[8,"SupersetOf","","Nested sets and conversions between them. Useful to work with substructures. It is preferable to implement the `SupersetOf` trait instead of `SubsetOf` whenever possible (because `SupersetOf` is automatically implemented whenever `SubsetOf` is.",null,null],[11,"to_subset","","The inverse inclusion map: attempts to construct `self` from the equivalent element of its superset.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"is_in_subset","","Checks if `self` is actually part of its subset `T` (and can be converted to it).",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_subset_unchecked","","Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"from_subset","","The inclusion map: converts `self` to the equivalent element of its superset.",7,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"AbstractMagma","","Types that are closed under a given operator.",null,null],[10,"operate","","Performs an operation.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"op","","Performs specific operation.",8,{"inputs":[{"name":"self"},{"name":"o"},{"name":"self"}],"output":{"name":"self"}}],[8,"AbstractQuasigroup","","A magma with the divisibility property.",null,null],[11,"prop_inv_is_latin_square_approx","","Returns `true` if latin squareness holds for the given arguments. Approximate equality is used for verifications.",9,null],[11,"prop_inv_is_latin_square","","Returns `true` if latin squareness holds for the given arguments.",9,null],[8,"AbstractLoop","","A quasigroup with an unique identity element.",null,null],[8,"AbstractSemigroup","","An associative magma.",null,null],[11,"prop_is_associative_approx","","Returns `true` if associativity holds for the given arguments. Approximate equality is used for verifications.",10,null],[11,"prop_is_associative","","Returns `true` if associativity holds for the given arguments.",10,null],[8,"AbstractMonoid","","A semigroup equipped with an identity element.",null,null],[11,"prop_operating_identity_element_is_noop_approx","","Checks whether operating with the identity element is a no-op for the given argument. Approximate equality is used for verifications.",11,null],[11,"prop_operating_identity_element_is_noop","","Checks whether operating with the identity element is a no-op for the given argument.",11,null],[8,"AbstractGroup","","A group is a loop and a monoid at the same time.",null,null],[8,"AbstractGroupAbelian","","An commutative group.",null,null],[11,"prop_is_commutative_approx","","Returns `true` if the operator is commutative for the given argument tuple. Approximate equality is used for verifications.",12,null],[11,"prop_is_commutative","","Returns `true` if the operator is commutative for the given argument tuple.",12,null],[8,"AbstractRing","","A ring is the combination of an abelian group and a multiplicative monoid structure.",null,null],[11,"prop_mul_and_add_are_distributive_approx","","Returns `true` if the multiplication and addition operators are distributive for the given argument tuple. Approximate equality is used for verifications.",13,null],[11,"prop_mul_and_add_are_distributive","","Returns `true` if the multiplication and addition operators are distributive for the given argument tuple.",13,null],[8,"AbstractRingCommutative","","A ring with a commutative multiplication.",null,null],[11,"prop_mul_is_commutative_approx","","Returns `true` if the multiplication operator is commutative for the given argument tuple. Approximate equality is used for verifications.",14,null],[11,"prop_mul_is_commutative","","Returns `true` if the multiplication operator is commutative for the given argument tuple.",14,null],[8,"AbstractField","","A field is a commutative ring, and an abelian group under both operators.",null,null],[8,"AbstractModule","","A module combines two sets: one with an abelian group structure and another with a commutative ring structure.",null,null],[16,"AbstractRing","","The underlying scalar field.",15,null],[10,"multiply_by","","Multiplies an element of the ring with an element of the module.",15,null],[8,"MeetSemilattice","","A set where every two elements have an infimum (i.e. greatest lower bound).",null,null],[10,"meet","","Returns the meet (aka. infimum) of two values.",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"JoinSemilattice","","A set where every two elements have a suppremum (i.e. smallest upper bound).",null,null],[10,"join","","Returns the join (aka. supremum) of two values.",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Lattice","","Partially orderable sets where every two elements have a suppremum and infimum.",null,null],[11,"meet_join","","Returns the infimum and the supremum simultaneously.",18,null],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_sort2","","Sorts two values in increasing order using a partial ordering.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.",18,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"AdditiveMagma","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"AdditiveQuasigroup","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"AdditiveLoop","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"AdditiveSemigroup","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"AdditiveMonoid","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"AdditiveGroup","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"AdditiveGroupAbelian","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"MultiplicativeMagma","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"MultiplicativeQuasigroup","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"MultiplicativeLoop","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"MultiplicativeSemigroup","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"MultiplicativeMonoid","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"MultiplicativeGroup","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"MultiplicativeGroupAbelian","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"Ring","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"RingCommutative","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"Field","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"Module","","A module which overloads the `*` and `+` operators.",null,null],[16,"Ring","","The underlying scalar field.",19,null],[8,"Real","","Trait shared by all reals.",null,null],[10,"floor","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","",20,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","",20,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","",20,null],[10,"exp_m1","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pi","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"two_pi","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_2","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_3","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_4","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_6","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_8","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"frac_1_pi","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_pi","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_sqrt_pi","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"e","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"log2_e","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"log10_e","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"ln_2","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"ln_10","","",20,{"inputs":[],"output":{"name":"self"}}],[0,"linear","alga","Traits dedicated to linear algebra.",null,null],[11,"transform_point","alga::general","",0,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"transform_vector","","",0,null],[11,"inverse_transform_point","","",0,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_transform_vector","","",0,null],[11,"decompose","","",0,null],[11,"append_translation","","",0,null],[11,"prepend_translation","","",0,null],[11,"append_rotation","","",0,null],[11,"prepend_rotation","","",0,null],[11,"append_scaling","","",0,null],[11,"prepend_scaling","","",0,null],[11,"translation","","",0,null],[11,"rotation","","",0,null],[11,"scaling","","",0,null],[11,"powf","","",0,null],[11,"rotation_between","","",0,null],[11,"scaled_rotation_between","","",0,null],[11,"to_vector","","",0,null],[11,"from_vector","","",0,null],[8,"VectorSpace","alga::linear","A vector space has a module structure over a field instead of a ring.",null,null],[16,"Field","","The underlying scalar field.",21,null],[8,"NormedSpace","","A normed vector space.",null,null],[10,"norm_squared","","The squared norm of this vector.",22,null],[10,"norm","","The norm of this vector.",22,null],[10,"normalize","","Returns a normalized version of this vector.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"normalize_mut","","Normalizes this vector in-place and returns its norm.",22,null],[10,"try_normalize","","Returns a normalized version of this vector unless its norm as smaller or equal to `eps`.",22,null],[10,"try_normalize_mut","","Normalizes this vector in-place or does nothing if its norm is smaller or equal to `eps`.",22,null],[8,"InnerSpace","","A vector space aquipped with an inner product.",null,null],[16,"Real","","The result of inner product (same as the field used by this vector space).",23,null],[10,"inner_product","","Computes the inner product of `self` with `other`.",23,null],[11,"angle","","Measures the angle between two vectors.",23,null],[8,"FiniteDimVectorSpace","","A finite-dimensional vector space.",null,null],[10,"dimension","","The vector space dimension.",24,{"inputs":[],"output":{"name":"usize"}}],[11,"canonical_basis","","Applies the given closule to each element of this vector space's canonical basis. Stops if `f` returns `false`.",24,{"inputs":[{"name":"f"}],"output":null}],[10,"canonical_basis_element","","The i-the canonical basis element.",24,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"dot","","The dot product between two vectors.",24,null],[10,"component_unchecked","","Same as `&self[i]` but without bound-checking.",24,null],[10,"component_unchecked_mut","","Same as `&mut self[i]` but without bound-checking.",24,null],[8,"FiniteDimInnerSpace","","A finite-dimensional vector space equipped with an inner product that must coincide with the dot product.",null,null],[10,"orthonormalize","","Orthonormalizes the given family of vectors. The largest free family of vectors is moved at the beginning of the array and its size is returned. Vectors at an indices larger or equal to this length can be modified to an arbitrary value.",25,null],[10,"orthonormal_subspace_basis","","Applies the given closure to each element of the orthonormal basis of the subspace orthogonal to free family of vectors `vs`. If `vs` is not a free family, the result is unspecified.",25,null],[8,"AffineSpace","","A set points associated with a vector space and a transitive and free additive group action (the translation).",null,null],[16,"Translation","","The associated vector space.",26,null],[11,"translate_by","","Same as `*self + *t`. Applies the additive group action of this affine space's associated vector space on `self`.",26,null],[11,"subtract","","Same as `*self - *other`. Returns the unique element `v` of the associated vector space such that `self = right + v`.",26,null],[8,"EuclideanSpace","","The finite-dimensional affine space based on the field of reals.",null,null],[16,"Coordinates","","The underlying finite vector space.",27,null],[16,"Real","","The underlying reals.",27,null],[10,"origin","","The preferred origin of this euclidean space.",27,{"inputs":[],"output":{"name":"self"}}],[11,"scale_by","","Multiplies the distance of this point to `Self::origin()` by `s`.",27,null],[11,"coordinates","","The coordinates of this point, i.e., the translation from the origin.",27,null],[11,"from_coordinates","","Builds a point from its coordinates relative to the origin.",27,null],[11,"distance_squared","","The distance between two points.",27,null],[11,"distance","","The distance between two points.",27,null],[8,"Transformation","","A general transformation acting on an euclidean space. It may not be inversible.",null,null],[10,"transform_point","","Applies this group's action on a point from the euclidean space.",28,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[10,"transform_vector","","Applies this group's action on a vector from the euclidean space.",28,null],[8,"AffineTransformation","","The group of affine transformations. They are decomposable into a rotation, a non-uniform scaling, a second rotation, and a translation (applied in that order).",null,null],[16,"Rotation","","Type of the first rotation to be applied.",29,null],[16,"NonUniformScaling","","Type of the non-uniform scaling to be applied.",29,null],[16,"Translation","","The type of the pure translation part of this affine transformation.",29,null],[10,"decompose","","Decomposes this affine transformation into a rotation followed by a non-uniform scaling, followed by a rotation, followed by a translation.",29,null],[10,"append_translation","","Appends a translation to this similarity.",29,null],[10,"prepend_translation","","Prepends a translation to this similarity.",29,null],[10,"append_rotation","","Appends a rotation to this similarity.",29,null],[10,"prepend_rotation","","Prepends a rotation to this similarity.",29,null],[10,"append_scaling","","Appends a scaling factor to this similarity.",29,null],[10,"prepend_scaling","","Prepends a scaling factor to this similarity.",29,null],[11,"append_rotation_wrt_point","","Appends to this similarity a rotation centered at the point `p`, i.e., this point is left invariant.",29,null],[8,"Scaling","","Subgroups of the (signed) uniform scaling group.",null,null],[11,"to_real","","Converts this scaling factor to a real. Same as `self.to_superset()`.",30,null],[11,"from_real","","Attempts to convert a real to an element of this scaling subgroup. Same as `Self::from_superset()`. Returns `None` if no such scaling is possible for this subgroup.",30,null],[11,"powf","","Raises the scaling to a power. The result must be equivalent to `self.to_superset().powf(n)`. Returns `None` if the result is not representable by `Self`.",30,null],[11,"scale_between","","The scaling required to make `a` have the same norm as `b`, i.e., `|b| = |a| * norm_ratio(a, b)`.",30,null],[8,"Similarity","","Subgroups of the similarity group `S(n)`, i.e., rotations, translations, and (signed) uniform scaling.",null,null],[16,"Scaling","","The type of the pure (uniform) scaling part of this similarity transformation.",31,null],[10,"translation","","The pure translational component of this similarity transformation.",31,null],[10,"rotation","","The pure rotational component of this similarity transformation.",31,null],[10,"scaling","","The pure scaling component of this similarity transformation.",31,null],[11,"translate_point","","Applies this transformation's pure translational part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"rotate_point","","Applies this transformation's pure rotational part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"scale_point","","Applies this transformation's pure scaling part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"rotate_vector","","Applies this transformation's pure rotational part to a vector.",31,null],[11,"scale_vector","","Applies this transformation's pure scaling part to a vector.",31,null],[11,"inverse_translate_point","","Applies this transformation inverse's pure translational part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_rotate_point","","Applies this transformation inverse's pure rotational part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_scale_point","","Applies this transformation inverse's pure scaling part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_rotate_vector","","Applies this transformation inverse's pure rotational part to a vector.",31,null],[11,"inverse_scale_vector","","Applies this transformation inverse's pure scaling part to a vector.",31,null],[8,"Isometry","","Subgroups of the isometry group `E(n)`, i.e., rotations, reflexions, and translations.",null,null],[8,"DirectIsometry","","Subgroups of the orientation-preserving isometry group `SE(n)`, i.e., rotations and translations.",null,null],[8,"Translation","","Subgroups of the n-dimensional translation group `T(n)`.",null,null],[10,"to_vector","","Converts this translation to a vector.",32,null],[10,"from_vector","","Attempts to convert a vector to this translation. Returns `None` if the translation represented by `v` is not part of the translation subgroup represented by `Self`.",32,null],[11,"powf","","Raises the translation to a power. The result must be equivalent to `self.to_superset() * n`.  Returns `None` if the result is not representable by `Self`.",32,null],[11,"translation_between","","The translation needed to make `a` coincide with `b`, i.e., `b = a * translation_to(a, b)`.",32,{"inputs":[{"name":"e"},{"name":"e"}],"output":{"name":"option"}}],[8,"OrthogonalTransformation","","Subgroups of the n-dimensional rotations and scaling `O(n)`.",null,null],[8,"Rotation","","Subgroups of the n-dimensional rotation group `SO(n)`.",null,null],[10,"powf","","Raises this rotation to a power. If this is a simple rotation, the result must be equivalent to multiplying the rotation angle by `n`.",33,null],[10,"rotation_between","","Computes a simple rotation that makes the angle between `a` and `b` equal to zero, i.e., `b.angle(a * delta_rotation(a, b)) = 0`. If `a` and `b` are collinear, the computed rotation may not be unique. Returns `None` if no such simple rotation exists in the subgroup represented by `Self`.",33,null],[10,"scaled_rotation_between","","Computes the rotation between `a` and `b` and raises it to the power `n`.",33,null],[8,"ProjectiveTransformation","","The most general form of inversible transformations on an euclidean space. ",null,null],[10,"inverse_transform_point","","Applies this group's inverse action on a point from the euclidean space.",34,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[10,"inverse_transform_vector","","Applies this group's inverse action on a vector from the euclidean space.",34,null],[8,"Matrix","","The space of all matrices.",null,null],[16,"Field","","The underlying field.",35,null],[16,"Row","","The type of rows of this matrix.",35,null],[16,"Column","","The type of columns of this matrix.",35,null],[16,"Transpose","","The type of the transposed matrix.",35,null],[10,"nrows","","The number of rows of this matrix.",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"ncolumns","","The number of columns of this matrix.",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"row","","The i-th row of this matrix.",35,null],[10,"column","","The i-th column of this matrix.",35,null],[10,"get_unchecked","","Gets the component at row `i` and column `j` of this matrix without bound checking.",35,null],[11,"get","","Gets the component at row `i` and column `j` of this matrix.",35,null],[10,"transpose","","Transposes this matrix.",35,null],[8,"MatrixMut","","The space of all matrices that are stable under modifications of its components, rows and columns.",null,null],[11,"set_row","","Sets the i-th row of this matrix.",36,null],[10,"set_row_mut","","In-place sets the i-th row of this matrix.",36,null],[11,"set_column","","Sets the i-th col of this matrix.",36,null],[10,"set_column_mut","","In-place sets the i-th col of this matrix.",36,null],[10,"set_unchecked","","Sets the component at row `i` and column `j` of this matrix without bound checking.",36,null],[11,"set","","Sets the component at row `i` and column `j` of this matrix.",36,null],[8,"SquareMatrix","","The monoid of all square matrices, including non-inversible ones.",null,null],[16,"Vector","","The type of rows, column, and diagonal of this matrix.",37,null],[10,"diagonal","","The diagonal of this matrix.",37,null],[10,"determinant","","The determinant of this matrix.",37,null],[10,"try_inverse","","Attempts to inverse `self`.",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"dimension","","The number of rows or column of this matrix.",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"transpose_mut","","In-place transposition.",37,{"inputs":[{"name":"self"}],"output":null}],[8,"SquareMatrixMut","","The monoid of all mutable square matrices that are stable under modification of its diagonal.",null,null],[10,"from_diagonal","","Constructs a new diagonal matrix.",38,null],[11,"set_diagonal","","Sets the matrix diagonal.",38,null],[10,"set_diagonal_mut","","In-place sets the matrix diagonal.",38,null],[8,"InversibleSquareMatrix","","The group of inversible matrix. Commonly known as the General Linear group `GL(n)` by algebraists.",null,null],[14,"impl_marker","alga","Implements empty traits aka marker traits for types provided. # Examples",null,null],[14,"impl_quasigroup","","Implements the quasigroup trait for types provided. # Examples",null,null],[14,"impl_semigroup","","Implements the semigroup trait for types provded. # Examples",null,null],[14,"impl_loop","","Implements the loop trait for types provided. # Examples",null,null],[14,"impl_monoid","","Implements the monoid trait for types provided. # Examples",null,null],[14,"impl_group","","Implements the group trait for types provided. # Examples",null,null],[14,"impl_abelian","","Implements the abelian group trait for types provided. # Examples",null,null],[14,"impl_ring","","Implements the ring trait for types provided. # Examples",null,null],[14,"impl_ring_commutative","","Implements the commutative ring trait for types provided. # Examples",null,null],[14,"impl_field","","Implements the field trait for types provided. # Examples",null,null],[11,"op","alga::general","Performs specific operation.",8,{"inputs":[{"name":"self"},{"name":"o"},{"name":"self"}],"output":{"name":"self"}}],[11,"prop_inv_is_latin_square_approx","","Returns `true` if latin squareness holds for the given arguments. Approximate equality is used for verifications.",9,null],[11,"prop_inv_is_latin_square","","Returns `true` if latin squareness holds for the given arguments.",9,null],[11,"prop_is_associative_approx","","Returns `true` if associativity holds for the given arguments. Approximate equality is used for verifications.",10,null],[11,"prop_is_associative","","Returns `true` if associativity holds for the given arguments.",10,null],[11,"prop_operating_identity_element_is_noop_approx","","Checks whether operating with the identity element is a no-op for the given argument. Approximate equality is used for verifications.",11,null],[11,"prop_operating_identity_element_is_noop","","Checks whether operating with the identity element is a no-op for the given argument.",11,null],[11,"prop_is_commutative_approx","","Returns `true` if the operator is commutative for the given argument tuple. Approximate equality is used for verifications.",12,null],[11,"prop_is_commutative","","Returns `true` if the operator is commutative for the given argument tuple.",12,null],[11,"prop_mul_and_add_are_distributive_approx","","Returns `true` if the multiplication and addition operators are distributive for the given argument tuple. Approximate equality is used for verifications.",13,null],[11,"prop_mul_and_add_are_distributive","","Returns `true` if the multiplication and addition operators are distributive for the given argument tuple.",13,null],[11,"prop_mul_is_commutative_approx","","Returns `true` if the multiplication operator is commutative for the given argument tuple. Approximate equality is used for verifications.",14,null],[11,"prop_mul_is_commutative","","Returns `true` if the multiplication operator is commutative for the given argument tuple.",14,null],[11,"id","","Specific identity.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"inverse_mut","","In-place inversin of `self`.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"meet_join","","Returns the infimum and the supremum simultaneously.",18,null],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_sort2","","Sorts two values in increasing order using a partial ordering.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.",18,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_superset","","The inverse inclusion map: attempts to construct `self` from the equivalent element of its superset.",6,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"to_subset","","The inverse inclusion map: attempts to construct `self` from the equivalent element of its superset.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"angle","alga::linear","Measures the angle between two vectors.",23,null],[11,"canonical_basis","","Applies the given closule to each element of this vector space's canonical basis. Stops if `f` returns `false`.",24,{"inputs":[{"name":"f"}],"output":null}],[11,"translate_by","","Same as `*self + *t`. Applies the additive group action of this affine space's associated vector space on `self`.",26,null],[11,"subtract","","Same as `*self - *other`. Returns the unique element `v` of the associated vector space such that `self = right + v`.",26,null],[11,"scale_by","","Multiplies the distance of this point to `Self::origin()` by `s`.",27,null],[11,"coordinates","","The coordinates of this point, i.e., the translation from the origin.",27,null],[11,"from_coordinates","","Builds a point from its coordinates relative to the origin.",27,null],[11,"distance_squared","","The distance between two points.",27,null],[11,"distance","","The distance between two points.",27,null],[11,"append_rotation_wrt_point","","Appends to this similarity a rotation centered at the point `p`, i.e., this point is left invariant.",29,null],[11,"translate_point","","Applies this transformation's pure translational part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"rotate_point","","Applies this transformation's pure rotational part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"scale_point","","Applies this transformation's pure scaling part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"rotate_vector","","Applies this transformation's pure rotational part to a vector.",31,null],[11,"scale_vector","","Applies this transformation's pure scaling part to a vector.",31,null],[11,"inverse_translate_point","","Applies this transformation inverse's pure translational part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_rotate_point","","Applies this transformation inverse's pure rotational part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_scale_point","","Applies this transformation inverse's pure scaling part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_rotate_vector","","Applies this transformation inverse's pure rotational part to a vector.",31,null],[11,"inverse_scale_vector","","Applies this transformation inverse's pure scaling part to a vector.",31,null],[11,"to_real","","Converts this scaling factor to a real. Same as `self.to_superset()`.",30,null],[11,"from_real","","Attempts to convert a real to an element of this scaling subgroup. Same as `Self::from_superset()`. Returns `None` if no such scaling is possible for this subgroup.",30,null],[11,"powf","","Raises the scaling to a power. The result must be equivalent to `self.to_superset().powf(n)`. Returns `None` if the result is not representable by `Self`.",30,null],[11,"scale_between","","The scaling required to make `a` have the same norm as `b`, i.e., `|b| = |a| * norm_ratio(a, b)`.",30,null],[11,"powf","","Raises the translation to a power. The result must be equivalent to `self.to_superset() * n`.  Returns `None` if the result is not representable by `Self`.",32,null],[11,"translation_between","","The translation needed to make `a` coincide with `b`, i.e., `b = a * translation_to(a, b)`.",32,{"inputs":[{"name":"e"},{"name":"e"}],"output":{"name":"option"}}],[11,"get","","Gets the component at row `i` and column `j` of this matrix.",35,null],[11,"set_row","","Sets the i-th row of this matrix.",36,null],[11,"set_column","","Sets the i-th col of this matrix.",36,null],[11,"set","","Sets the component at row `i` and column `j` of this matrix.",36,null],[11,"dimension","","The number of rows or column of this matrix.",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"transpose_mut","","In-place transposition.",37,{"inputs":[{"name":"self"}],"output":null}],[11,"set_diagonal","","Sets the matrix diagonal.",38,null]],"paths":[[3,"Id"],[3,"Additive"],[3,"Multiplicative"],[8,"Inverse"],[8,"Operator"],[8,"Identity"],[8,"SubsetOf"],[8,"SupersetOf"],[8,"AbstractMagma"],[8,"AbstractQuasigroup"],[8,"AbstractSemigroup"],[8,"AbstractMonoid"],[8,"AbstractGroupAbelian"],[8,"AbstractRing"],[8,"AbstractRingCommutative"],[8,"AbstractModule"],[8,"MeetSemilattice"],[8,"JoinSemilattice"],[8,"Lattice"],[8,"Module"],[8,"Real"],[8,"VectorSpace"],[8,"NormedSpace"],[8,"InnerSpace"],[8,"FiniteDimVectorSpace"],[8,"FiniteDimInnerSpace"],[8,"AffineSpace"],[8,"EuclideanSpace"],[8,"Transformation"],[8,"AffineTransformation"],[8,"Scaling"],[8,"Similarity"],[8,"Translation"],[8,"Rotation"],[8,"ProjectiveTransformation"],[8,"Matrix"],[8,"MatrixMut"],[8,"SquareMatrix"],[8,"SquareMatrixMut"]]};
searchIndex["approx"] = {"doc":"A crate that provides facilities for testing the approximate equality of floating-point based types, using either relative difference, or units in the last place (ULPs) comparisons.","items":[[3,"Relative","approx","The requisite parameters for testing for approximate equality.",null,null],[12,"lhs","","The left-hand side of the approximate equality comparison.",0,null],[12,"rhs","","The right-hand side of the approximate equality comparison.",0,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",0,null],[12,"max_relative","","The relative tolerance for testing values that are far-apart.",0,null],[3,"Ulps","","The requisite parameters for testing for approximate equality.",null,null],[12,"lhs","","The left-hand side of the approximate equality comparison.",1,null],[12,"rhs","","The right-hand side of the approximate equality comparison.",1,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",1,null],[12,"max_ulps","","The ULPs to tolerate when testing values that are far-apart.",1,null],[8,"ApproxEq","","Equality comparisons based on floating point tolerances.",null,null],[16,"Epsilon","","Used for specifying relative comparisons.",2,null],[10,"default_epsilon","","The default tolerance to use when testing values that are close together.",2,null],[10,"default_max_relative","","The default relative tolerance for testing values that are far-apart.",2,null],[10,"default_max_ulps","","The default ULPs to tolerate when testing values that are far-apart.",2,{"inputs":[],"output":{"name":"u32"}}],[10,"relative_eq","","A test for equality that uses a relative comparison if the values are far apart.",2,null],[11,"relative_ne","","The inverse of `ApproxEq::relative_eq`.",2,null],[10,"ulps_eq","","A test for equality that uses units in the last place (ULP) if the values are far apart.",2,null],[11,"ulps_ne","","The inverse of `ApproxEq::ulps_eq`.",2,null],[11,"new","","The beginning of a chained equality expression, using a relative based comparison.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"relative"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",0,null],[11,"max_relative","","Replace the maximum relative value with the one specified.",0,null],[11,"eq","","Peform the equality comparison",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","Peform the inequality comparison",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","The beginning of a chained equality expression, using an ULPs based comparison.",1,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ulps"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",1,null],[11,"max_ulps","","Replace the max ulps value with the one specified.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"ulps"}}],[11,"eq","","Peform the equality comparison",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","Peform the inequality comparison",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"relative_eq","","Predicate for testing the approximate equality of two values.",null,null],[14,"relative_ne","","Predicate for testing the approximate inequality of two values.",null,null],[14,"assert_relative_eq","","",null,null],[14,"assert_relative_ne","","",null,null],[14,"ulps_eq","","Predicate for testing the approximate equality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"ulps_ne","","Predicate for testing the approximate inequality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"assert_ulps_eq","","",null,null],[14,"assert_ulps_ne","","",null,null]],"paths":[[3,"Relative"],[3,"Ulps"],[8,"ApproxEq"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[17,"FLAG_A","","",null,null],[17,"FLAG_B","","",null,null],[17,"FLAG_C","","",null,null],[17,"FLAG_ABC","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"generics":["flags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for `BigEndian`.",null,null],[6,"LE","","A type alias for `LittleEndian`.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["coco"] = {"doc":"Concurrent collections.","items":[[0,"deque","coco","A lock-free work-stealing deque.",null,null],[3,"Worker","coco::deque","Worker side of a work-stealing deque.",null,null],[3,"Stealer","","Stealer side of a work-stealing deque.",null,null],[5,"new","","Returns a new work-stealing deque.",null,null],[11,"len","","Returns the number of elements in the deque.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","Pushes an element onto the bottom of the deque.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Pops an element from the bottom of the deque.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals an element from the top of the deque.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"steal","","Steals an element from the top of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"epoch","coco","Epoch-based garbage collection.",null,null],[3,"Atomic","coco::epoch","A tagged atomic nullable pointer.",null,null],[3,"Ptr","","A tagged nullable pointer.",null,null],[3,"Garbage","","A garbage queue.",null,null],[3,"Pin","","A witness that the current thread is pinned.",null,null],[5,"defer_free","","Stashes away an object that will later be freed.",null,null],[5,"flush","","Flushes the buffered thread-local garbage.",null,{"inputs":[{"name":"pin"}],"output":null}],[5,"is_pinned","","Returns `true` if the current thread is pinned.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"pin","","Pins the current thread.",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","Returns a new, null atomic pointer tagged with `tag`.",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new","","Allocates `data` on the heap and returns a new atomic pointer that points to it and is tagged with `tag`.",2,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_ptr","","Returns a new atomic pointer initialized with `ptr`.",2,{"inputs":[{"name":"ptr"}],"output":{"name":"self"}}],[11,"from_box","","Returns a new atomic pointer initialized with `b` and `tag`.",2,{"inputs":[{"name":"box"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw","","Returns a new atomic pointer initialized with `raw` and `tag`.",2,null],[11,"load","","Loads the tagged atomic pointer.",2,{"inputs":[{"name":"self"},{"name":"pin"}],"output":{"name":"ptr"}}],[11,"load_raw","","Loads the tagged atomic pointer as a raw pointer and a tag.",2,null],[11,"store","","Stores `new` tagged with `tag` into the atomic.",2,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":null}],[11,"store_box","","Stores `new` tagged with `tag` into the atomic and returns it.",2,{"inputs":[{"name":"self"},{"name":"box"},{"name":"usize"},{"name":"pin"}],"output":{"name":"ptr"}}],[11,"store_raw","","Stores `new` tagged with `tag` into the atomic.",2,null],[11,"swap","","Stores `new` into the atomic, returning the old tagged pointer.",2,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"ptr"}}],[11,"swap_box","","Stores `new` tagged with `tag` into the atomic, returning the old tagged pointer.",2,{"inputs":[{"name":"self"},{"name":"box"},{"name":"usize"},{"name":"pin"}],"output":{"name":"ptr"}}],[11,"swap_raw","","Stores `new` tagged with `tag` into the atomic, returning the old tagged pointer.",2,null],[11,"cas","","If the tagged atomic pointer is equal to `current`, stores `new`.",2,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"ptr"}],"output":{"generics":["ptr"],"name":"result"}}],[11,"cas_sc","","If the tagged atomic pointer is equal to `current`, stores `new`.",2,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"ptr"}],"output":{"generics":["ptr"],"name":"result"}}],[11,"cas_weak","","If the tagged atomic pointer is equal to `current`, stores `new`.",2,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"ptr"}],"output":{"generics":["ptr"],"name":"result"}}],[11,"cas_weak_sc","","If the tagged atomic pointer is equal to `current`, stores `new`.",2,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"ptr"}],"output":{"generics":["ptr"],"name":"result"}}],[11,"cas_box","","If the tagged atomic pointer is equal to `current`, stores `new` tagged with `tag`.",2,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"box"},{"name":"usize"}],"output":{"generics":["ptr"],"name":"result"}}],[11,"cas_box_sc","","If the tagged atomic pointer is equal to `current`, stores `new` tagged with `tag`.",2,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"box"},{"name":"usize"}],"output":{"generics":["ptr"],"name":"result"}}],[11,"cas_box_weak","","If the tagged atomic pointer is equal to `current`, stores `new` tagged with `tag`.",2,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"box"},{"name":"usize"}],"output":{"generics":["ptr"],"name":"result"}}],[11,"cas_box_weak_sc","","If the tagged atomic pointer is equal to `current`, stores `new` tagged with `tag`.",2,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"box"},{"name":"usize"}],"output":{"generics":["ptr"],"name":"result"}}],[11,"cas_raw","","If the tagged atomic pointer is equal to `current`, stores `new`.",2,null],[11,"cas_raw_weak","","If the tagged atomic pointer is equal to `current`, stores `new`.",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"null","","Returns a null pointer with a tag.",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw","","Constructs a tagged pointer from a raw pointer and tag.",3,null],[11,"is_null","","Returns `true` if the pointer is null.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts the pointer to a reference.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_raw","","Converts the pointer to a raw pointer.",3,null],[11,"unwrap","","Returns a reference to the pointing object.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"tag","","Returns the tag.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_tag","","Constructs a new tagged pointer with a different tag.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Returns a new, empty garbage queue.",4,{"inputs":[],"output":{"name":"self"}}],[11,"defer_free","","Adds an object that will later be freed.",4,null],[11,"defer_drop","","Adds an object that will later be dropped and freed.",4,null],[11,"defer_destroy","","Adds an object that will later be destroyed using `destroy`.",4,null],[11,"flush","","Flushes the buffered garbage.",4,{"inputs":[{"name":"self"},{"name":"pin"}],"output":null}],[11,"collect","","Collects some garbage from the queue and destroys it.",4,{"inputs":[{"name":"self"},{"name":"pin"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stack","coco","A lock-free stack.",null,null],[3,"Stack","coco::stack","A lock-free stack.",null,null],[11,"new","","Returns a new, empty stack.",6,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","Returns `true` if the stack is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Pushes a new value onto the stack.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Attemps to pop an value from the stack.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Worker"],[3,"Stealer"],[3,"Atomic"],[3,"Ptr"],[3,"Garbage"],[3,"Pin"],[3,"Stack"]]};
searchIndex["color_quant"] = {"doc":"Color quantization library This library provides a color quantizer based on the NEUQUANT quantization algorithm by Anthony Dekker. ### Usage `let data = vec![0; 40]; let nq = color_quant::NeuQuant::new(10, 256, &data); let indixes: Vec<u8> = data.chunks(4).map(|pix| nq.index_of(pix) as u8).collect(); let color_map = nq.color_map_rgba();`","items":[[3,"NeuQuant","color_quant","Neural network based color quantizer.",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data.",0,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data.",0,null],[11,"map_pixel","","Maps the rgba-pixel in-place to the best-matching color in the color map.",0,null],[11,"index_of","","Finds the best-matching index in the color map.",0,null],[11,"color_map_rgba","","Returns the RGBA color map calculated from the sample. ",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"color_map_rgb","","Returns the RGBA color map calculated from the sample. ",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}]],"paths":[[3,"NeuQuant"]]};
searchIndex["deflate"] = {"doc":"An implementation an encoder using DEFLATE compression algorightm in pure rust.","items":[[3,"CompressionOptions","deflate","A struct describing the options for a compressor or compression function.",null,null],[12,"max_hash_checks","","The maximum number of checks to make in the hash table for matches.",0,null],[12,"lazy_if_less_than","","Only lazy match if we have a length less than this value.",0,null],[12,"matching_type","","Whether to use lazy or greedy matching.",0,null],[12,"special","","Force fixed/stored blocks (Not implemented yet). * Default value: `SpecialOptions::Normal`",0,null],[4,"SpecialOptions","","Enum allowing some special options (not implemented yet)!",null,null],[13,"Normal","","Compress normally.",1,null],[13,"_ForceFixed","","Force fixed huffman tables. (Unimplemented!).",1,null],[13,"_ForceStored","","Force stored (uncompressed) blocks only. (Unimplemented!).",1,null],[4,"Compression","","An enum describing the level of compression to be used by the encoder",null,null],[13,"Fast","","Fast minimal compression (`CompressionOptions::fast()`).",2,null],[13,"Default","","Default level (`CompressionOptions::default()`).",2,null],[13,"Best","","Higher compression level (`CompressionOptions::high()`).",2,null],[4,"MatchingType","","An enum describing whether we use lazy or greedy matching.",null,null],[13,"Greedy","","Use greedy matching: the matching algorithm simply uses a match right away if found.",3,null],[13,"Lazy","","Use lazy matching: after finding a match, the next input byte is checked, to see if there is a better match starting at that byte.",3,null],[5,"deflate_bytes_conf","","Compress the given slice of bytes with DEFLATE compression.",null,null],[5,"deflate_bytes","","Compress the given slice of bytes with DEFLATE compression using the default compression level.",null,null],[5,"deflate_bytes_zlib_conf","","Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer.",null,null],[5,"deflate_bytes_zlib","","Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer, using the default compression level.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"compression"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"compression"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"specialoptions"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"specialoptions"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"specialoptions"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"compressionoptions"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"compressionoptions"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"compressionoptions"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"high","","Returns compression settings rouhgly corresponding to the `HIGH(9)` setting in miniz.",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"fast","","Returns  a fast set of compression settings",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"huffman_only","","Returns a set of compression settings that makes the compressor only compress using huffman coding. (Ignoring any length/distance matching)",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"rle","","Returns a set of compression settings that makes the compressor compress only using run-length encoding (i.e only looking for matches one byte back).",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"default","","Returns the options describing the default compression level.",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"from","","",0,{"inputs":[{"name":"compression"}],"output":{"name":"compressionoptions"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"matchingtype"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"matchingtype"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"matchingtype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"matchingtype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"write","","Encoders implementing a `Write` interface.",null,null],[3,"DeflateEncoder","deflate::write","A DEFLATE encoder/compressor.",null,null],[3,"ZlibEncoder","","A Zlib encoder/compressor.",null,null],[11,"new","","Creates a new encoder using the provided compression options.",4,{"inputs":[{"name":"w"},{"name":"o"}],"output":{"name":"deflateencoder"}}],[11,"finish","","Encode all pending data to the contained writer, consume this `DeflateEncoder`, and return the contained writer if writing succeeds.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reset","","Resets the encoder (except the compression options), replacing the current writer with a new one, returning the old one.",4,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write","","",4,null],[11,"flush","","Flush the encoder.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","When the encoder is dropped, output the rest of the data.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new `ZlibEncoder` using the provided compression options.",5,{"inputs":[{"name":"w"},{"name":"o"}],"output":{"name":"zlibencoder"}}],[11,"finish","","Encode all pending data to the contained writer, consume this `ZlibEncoder`, and return the contained writer if writing succeeds.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reset","","Resets the encoder (except the compression options), replacing the current writer with a new one, returning the old one.",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"checksum","","Return the adler32 checksum of the currently consumed data.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write","","",5,null],[11,"flush","","Flush the encoder.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","When the encoder is dropped, output the rest of the data.",5,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"CompressionOptions"],[4,"SpecialOptions"],[4,"Compression"],[4,"MatchingType"],[3,"DeflateEncoder"],[3,"ZlibEncoder"]]};
searchIndex["derivative"] = {"doc":"","items":[[5,"derivative","derivative","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["draw_state"] = {"doc":"Graphics state blocks for gfx-rs","items":[[0,"preset","draw_state","State presets",null,null],[0,"blend","draw_state::preset","Blending preset modes.",null,null],[17,"REPLACE","draw_state::preset::blend","When combining two fragments, choose the source value",null,null],[17,"ADD","","When combining two fragments, add their values together, saturating at 1.0",null,null],[17,"MULTIPLY","","When combining two fragments, multiply their values together.",null,null],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the value of the destination multiplied by the inverse of the source alpha channel. Has the usual transparency effect: mixes the two colors using a fraction of each one specified by the alpha of the source.",null,null],[17,"INVERT","","When combining two fragments, subtract the destination color from a constant color using the source color as weight. Has an invert effect with the constant color as base and source color controlling displacement from the base color. A white source color and a white value results in plain invert. The output alpha is same as destination alpha.",null,null],[0,"depth","draw_state::preset","Depth presets for depth tests.",null,null],[17,"PASS_TEST","draw_state::preset::depth","When rendering a fragment, draw regardless of depth buffer state. Rendering will not update the depth buffer.",null,null],[17,"PASS_WRITE","","When rendering a fragment, draw regardless of depth buffer state. Rendering will update the depth buffer.",null,null],[17,"LESS_EQUAL_TEST","","\"<=\" comparison with read-only depth",null,null],[17,"LESS_EQUAL_WRITE","","When rendering a fragment, only draw when the fragment's output depth is less than or equal to the current depth buffer value. Rendering will update the depth buffer with the new depth value.",null,null],[0,"state","draw_state","Fixed-function hardware state.",null,null],[3,"Offset","draw_state::state","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster method to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",1,null],[12,"cull_face","","Which face should be culled.",1,null],[12,"method","","How to rasterize this primitive.",1,null],[12,"offset","","Any polygon offset to apply.",1,null],[12,"samples","","Multi-sampling mode.",1,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",2,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they are read before doing the stencil test.",2,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",2,null],[12,"op_fail","","What operation to do if the stencil test fails.",2,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",2,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",2,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",3,null],[12,"back","","",3,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",4,null],[12,"write","","Specify whether to write to the depth buffer or not.",4,null],[3,"BlendChannel","","",null,null],[12,"equation","","",5,null],[12,"source","","",5,null],[12,"destination","","",5,null],[3,"Blend","","",null,null],[12,"color","","",6,null],[12,"alpha","","",6,null],[3,"ColorMask","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",7,null],[12,"blend","","Optional blending.",7,null],[3,"RefValues","","The complete set of the rasterizer reference values. Switching these doesn't roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",8,null],[12,"blend","","Constant blend color.",8,null],[4,"FrontFace","","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",9,null],[13,"CounterClockwise","","Counter-clockwise winding order.",9,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",10,null],[13,"Front","","",10,null],[13,"Back","","",10,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",11,null],[13,"Line","","Rasterize as a line with the given width.",11,null],[13,"Fill","","Rasterize as a face.",11,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",12,null],[13,"Less","","`x < y`",12,null],[13,"LessEqual","","`x <= y`",12,null],[13,"Equal","","`x == y`",12,null],[13,"GreaterEqual","","`x >= y`",12,null],[13,"Greater","","`x > y`",12,null],[13,"NotEqual","","`x != y`",12,null],[13,"Always","","`true`",12,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",13,null],[13,"Zero","","Set the value in the stencil buffer to zero.",13,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",13,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",13,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",13,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",13,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",13,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",13,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination. Source and destination are multiplied by blending parameters before addition.",14,null],[13,"Sub","","Subtracts destination from source. Source and destination are multiplied by blending parameters before subtraction.",14,null],[13,"RevSub","","Subtracts source from destination. Source and destination are multiplied by blending parameters before subtraction.",14,null],[13,"Min","","Component-wise minimum value of source and destination. Blending parameters are ignored.",14,null],[13,"Max","","Component-wise maximum value of source and destination. Blending parameters are ignored.",14,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",15,null],[13,"SourceAlpha","","",15,null],[13,"DestColor","","",15,null],[13,"DestAlpha","","",15,null],[13,"ConstColor","","",15,null],[13,"ConstAlpha","","",15,null],[4,"Factor","","",null,null],[13,"Zero","","",16,null],[13,"One","","",16,null],[13,"SourceAlphaSaturated","","",16,null],[13,"ZeroPlus","","",16,null],[13,"OneMinus","","",16,null],[6,"LineWidth","","Width of a line. Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where the unit is the minimal difference in the depth value dictated by the precision of the depth buffer.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"frontface"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"name":"ordering"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"offset"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"cullface"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"name":"ordering"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"rastermethod"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",11,null],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"multisample"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"name":"ordering"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rasterizer"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"new_fill","","Create a new filling rasterizer.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_cull_back","","Add back face culling.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"with_offset","","Add polygon offset.",1,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"offsetunits"}],"output":{"name":"self"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"comparison"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"name":"ordering"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"stencilop"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"name":"ordering"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"stencilside"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"stencil"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"stencil"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"new","","Create a new stencil state with a given function.",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"depth"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"equation"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"name":"ordering"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"blendvalue"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"name":"ordering"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"factor"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"ordering"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"blendchannel"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"ordering"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"blend"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"blend"}}],[11,"hash","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"new","","Create a new blend state with a given equation.",6,{"inputs":[{"name":"equation"},{"name":"factor"},{"name":"factor"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"colormask"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"ordering"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"RED","","",18,null],[18,"GREEN","","",18,null],[18,"BLUE","","",18,null],[18,"ALPHA","","",18,null],[11,"empty","","Returns an empty set of flags.",18,{"inputs":[],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",18,{"inputs":[],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",18,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",18,{"inputs":[{"name":"u8"}],"output":{"generics":["colormask"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",18,{"inputs":[{"name":"u8"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",18,{"inputs":[{"name":"self"},{"name":"colormask"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitor_assign","","Adds the set of flags.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitxor_assign","","Toggles the set of flags.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"sub_assign","","Disables all flags enabled in the set.",18,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",18,{"inputs":[{"name":"self"}],"output":{"name":"colormask"}}],[11,"extend","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",18,{"inputs":[{"name":"t"}],"output":{"name":"colormask"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"refvalues"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[0,"target","draw_state","Render target specification.",null,null],[3,"Rect","draw_state::target","A screen space rectangle",null,null],[12,"x","","",19,null],[12,"y","","",19,null],[12,"w","","",19,null],[12,"h","","",19,null],[3,"Mirror","","Mirroring flags, used for blitting",null,null],[6,"Layer","","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Depth","","A single depth value from a depth buffer.",null,null],[6,"Stencil","","A single value from a stencil stencstencil buffer.",null,null],[6,"ColorValue","","A color with floating-point components.",null,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"mirror"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"cmp","","",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"ordering"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"X","","",20,null],[18,"Y","","",20,null],[11,"empty","","Returns an empty set of flags.",20,{"inputs":[],"output":{"name":"mirror"}}],[11,"all","","Returns the set containing all flags.",20,{"inputs":[],"output":{"name":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",20,{"inputs":[{"name":"u8"}],"output":{"generics":["mirror"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",20,{"inputs":[{"name":"u8"}],"output":{"name":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",20,{"inputs":[{"name":"self"},{"name":"mirror"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitor_assign","","Adds the set of flags.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitxor_assign","","Toggles the set of flags.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"sub_assign","","Disables all flags enabled in the set.",20,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",20,{"inputs":[{"name":"self"}],"output":{"name":"mirror"}}],[11,"extend","","",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",20,{"inputs":[{"name":"t"}],"output":{"name":"mirror"}}]],"paths":[[3,"Offset"],[3,"Rasterizer"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[4,"FrontFace"],[4,"CullFace"],[4,"RasterMethod"],[4,"Comparison"],[4,"StencilOp"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"MultiSample"],[3,"ColorMask"],[3,"Rect"],[3,"Mirror"]]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"read","","",0,null],[11,"read_to_end","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"fill_buf","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["enum_primitive"] = {"doc":"This crate exports a macro `enum_from_primitive!` that wraps an `enum` declaration and automatically adds an implementation of `num::FromPrimitive` (reexported here), to allow conversion from primitive integers to the enum.  It therefore provides an alternative to the built-in `#[derive(FromPrimitive)]`, which requires the unstable `std::num::FromPrimitive` and is disabled in Rust 1.0.","items":[[4,"Option","enum_primitive","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",0,null],[13,"Some","","Some value `T`",0,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[14,"enum_from_primitive_impl_ty","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive","","Wrap this macro around an `enum` declaration to get an automatically generated implementation of `num::FromPrimitive`.",null,null],[11,"is_some","","Returns `true` if the option is a [`Some`] value.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a [`None`] value.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns a [`default`][] (if not).",0,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a [`default`][] (if not).",0,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",0,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","Returns [`None`].",0,{"inputs":[],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"into_result","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["noneerror"],"name":"result"}}],[11,"from_ok","","",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from_error","","",0,{"inputs":[{"name":"noneerror"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the [`Iterator`]: if it is [`None`], no further elements are taken, and the [`None`] is returned. Should no [`None`] occur, a container with the values of each `Option` is returned.",0,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"hash","","",0,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}]],"paths":[[4,"Option"],[8,"FromPrimitive"]]};
searchIndex["flight"] = {"doc":"","items":[[3,"Error","flight","Combines all errors that can occur in the flight API",null,null],[12,"context","","",0,null],[12,"error","","",0,null],[3,"Light","","Parameters for a point light source",null,null],[12,"pos","","",1,null],[12,"color","","",1,null],[3,"Sun","","Parameters for a sun light source",null,null],[12,"view","","",2,null],[12,"min_corner","","",2,null],[12,"max_corner","","",2,null],[3,"Texture","","GPU-allocated texture object. Since this is just a reference to assets stored on the GPU,  its memory footprint is negligible and it can be cloned freely.",null,null],[12,"sampler","","",3,null],[12,"buffer","","",3,null],[4,"ErrorKind","","Error type enum",null,null],[13,"Gfx","","",4,null],[13,"GfxUpdate","","",4,null],[13,"Pipeline","","",4,null],[13,"Shader","","",4,null],[13,"ShaderProgram","","",4,null],[13,"Image","","",4,null],[13,"Io","","",4,null],[13,"InvalidPrimitive","","",4,null],[13,"CubemapSizeMismatch","","",4,null],[0,"draw","","Mesh drawing",null,null],[3,"EyeParams","flight::draw","Parameters that control the rendering of an eye",null,null],[12,"eye","","",5,null],[12,"view","","",5,null],[12,"proj","","",5,null],[12,"clip_offset","","",5,null],[12,"clip","","",5,null],[3,"DrawParams","","Parameters to the draw system",null,null],[12,"encoder","","The gfx command encoder",6,null],[12,"color","","The color draw target",6,null],[12,"depth","","The depth draw target",6,null],[12,"left","","Left eye parameters",6,null],[12,"right","","Right eye parameters",6,null],[3,"SolidStyle","","Draws objects in solid colors (without lighting) using the per-vertex color attribute",null,null],[3,"SolidInputs","","The configuration for solid color rendering",null,null],[3,"UnishadeStyle","","Draws objects with very simple lighting: one color on the top and a different color on the bottom",null,null],[3,"UnishadeInputs","","The configuration for unishade rendering",null,null],[3,"PbrStyle","","Draws meshes using a physically based rendering pipeline",null,null],[3,"PbrMaterial","","The collection of mesh textures used by physically based rendering",null,null],[12,"normal","","Normal map",7,null],[12,"albedo","","Albedo map (base color)",7,null],[12,"metalness","","Metalness map (sets material to metal or dielectric)",7,null],[12,"roughness","","Roughness map (Changes shininess/reflection sharpness)",7,null],[3,"PbrInputs","","The configuration for physically based rendering",null,null],[3,"UberStyle","","Draws meshes using a physically based rendering pipeline",null,null],[3,"UberMaterial","","The collection of mesh textures used by physically based rendering",null,null],[12,"normal","","normal map",8,null],[12,"albedo","","albedo map (base color)",8,null],[12,"knobs","","metalness (1=metal, 0=dielectric), roughness, flatness (0=PBR, 1=flat color) map",8,null],[3,"UberInputs","","The configuration for physically based rendering",null,null],[3,"UberEnv","","The scene environment",null,null],[12,"irradiance","","",9,null],[12,"radiance","","",9,null],[12,"sun_included","","",9,null],[12,"sun_color","","",9,null],[12,"sun_rotation","","",9,null],[12,"radiance_levels","","",9,null],[3,"Painter","","The painter is responsible for drawing meshes. Painters  are instantiated with an associated style which specifies the data required for drawing (vertex type, material params, configuration) and implements the drawing pipeline. Note that a painter can only be used with primitive types that have been passed to `setup`.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"eyeparams"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"eyeparams"}}],[11,"transform","","",10,{"inputs":[{"name":"self"},{"name":"transformblock"}],"output":null}],[11,"shader_set","","",10,{"inputs":[{"name":"self"}],"output":{"name":"shaderset"}}],[11,"new","","",11,{"inputs":[{"name":"f"},{"name":"solidinputs"},{"name":"primitive"},{"name":"rasterizer"}],"output":{"generics":["error"],"name":"result"}}],[11,"init","","",11,{"inputs":[{"name":"f"}],"output":{"generics":["solidinputs","error"],"name":"result"}}],[11,"draw_raw","","",11,null],[11,"colors","","Sets the light and dark colors",12,null],[11,"transform","","",12,{"inputs":[{"name":"self"},{"name":"transformblock"}],"output":null}],[11,"shader_set","","",12,{"inputs":[{"name":"self"}],"output":{"name":"shaderset"}}],[11,"new","","",13,{"inputs":[{"name":"f"},{"name":"unishadeinputs"},{"name":"primitive"},{"name":"rasterizer"}],"output":{"generics":["error"],"name":"result"}}],[11,"init","","",13,{"inputs":[{"name":"f"}],"output":{"generics":["unishadeinputs","error"],"name":"result"}}],[11,"draw_raw","","",13,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"pbrmaterial"}}],[11,"lights","","Sets the point lights present in the scene. Only the first `LIGHT_COUNT` lights will be used.",14,null],[11,"ambient","","Sets the ambient light level in the scene",14,null],[11,"transform","","",14,{"inputs":[{"name":"self"},{"name":"transformblock"}],"output":null}],[11,"shader_set","","",14,{"inputs":[{"name":"self"}],"output":{"name":"shaderset"}}],[11,"new","","",15,{"inputs":[{"name":"f"},{"name":"pbrinputs"},{"name":"primitive"},{"name":"rasterizer"}],"output":{"generics":["error"],"name":"result"}}],[11,"init","","",15,{"inputs":[{"name":"f"}],"output":{"generics":["pbrinputs","error"],"name":"result"}}],[11,"draw_raw","","",15,{"inputs":[{"name":"self"},{"name":"pbrinputs"},{"name":"encoder"},{"name":"targetref"},{"name":"depthref"},{"name":"rect"},{"name":"slice"},{"name":"buffer"},{"name":"pbrmaterial"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ubermaterial"}}],[11,"set_env","","",16,{"inputs":[{"name":"self"},{"name":"uberenv"}],"output":null}],[11,"mut_env","","",16,{"inputs":[{"name":"self"}],"output":{"name":"uberenv"}}],[11,"set_exposure","","",16,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"set_gamma","","",16,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"transform","","",16,{"inputs":[{"name":"self"},{"name":"transformblock"}],"output":null}],[11,"shader_set","","",16,{"inputs":[{"name":"self"}],"output":{"name":"shaderset"}}],[11,"new","","",17,{"inputs":[{"name":"f"},{"name":"uberinputs"},{"name":"primitive"},{"name":"rasterizer"}],"output":{"generics":["error"],"name":"result"}}],[11,"init","","",17,{"inputs":[{"name":"f"}],"output":{"generics":["uberinputs","error"],"name":"result"}}],[11,"draw_raw","","",17,{"inputs":[{"name":"self"},{"name":"uberinputs"},{"name":"encoder"},{"name":"targetref"},{"name":"depthref"},{"name":"rect"},{"name":"slice"},{"name":"buffer"},{"name":"ubermaterial"}],"output":{"generics":["error"],"name":"result"}}],[11,"clear_env","","",18,{"inputs":[{"name":"self"},{"name":"drawparams"}],"output":null}],[17,"LIGHT_COUNT","","The maximum number of point lights that can be simulated",null,null],[8,"Style","","Implements a particular drawing process and visual style.",null,null],[16,"Vertex","","The mesh vertex type required for drawing",19,null],[16,"Inputs","","The configuration available for this style",19,null],[16,"Material","","The material type required on meshes",19,null],[10,"new","","",19,null],[10,"init","","",19,{"inputs":[{"name":"f"}],"output":{"generics":["error"],"name":"result"}}],[10,"draw_raw","","",19,null],[8,"StyleInputs","","Required configuration options for a `Style`",null,null],[10,"transform","","Transformation matrices and eye parameters",20,{"inputs":[{"name":"self"},{"name":"transformblock"}],"output":null}],[10,"shader_set","","The set of shaders used by the styler",20,{"inputs":[{"name":"self"}],"output":{"name":"shaderset"}}],[11,"new","","Create a new painter in the given style and using the given factory. ",18,{"inputs":[{"name":"f"}],"output":{"generics":["painter","error"],"name":"result"}}],[11,"setup","","Add the ability to draw the given primitive. This must be done before a mesh using the primitive is drawn.",18,{"inputs":[{"name":"self"},{"name":"f"},{"name":"primitive"}],"output":{"generics":["error"],"name":"result"}}],[11,"try_draw","","Attempt to draw a mesh with the given parameters and model matrix, returning `Err` if something goes wrong.",18,{"inputs":[{"name":"self"},{"name":"drawparams"},{"generics":["f32"],"name":"transform3"},{"name":"mesh"}],"output":{"generics":["error"],"name":"result"}}],[11,"draw","","Draw a mesh with the given parameters and model matrix, logging any errors.",18,{"inputs":[{"name":"self"},{"name":"drawparams"},{"generics":["f32"],"name":"transform3"},{"name":"mesh"}],"output":null}],[11,"cfg","","Configure the draw style. For example, `cfg(|c| c.ambient([1., 0., 0., 1.]))`  might set the ambient light color to red. The exact customization available depends on the style being used.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[0,"load","flight","Asset loading",null,null],[4,"CubeSide","flight::load","",null,null],[13,"PosX","","",21,null],[13,"NegX","","",21,null],[13,"PosY","","",21,null],[13,"NegY","","",21,null],[13,"PosZ","","",21,null],[13,"NegZ","","",21,null],[5,"load_wavefront","","Load wavefront OBJ data into an internal mesh object ",null,{"inputs":[{"name":"obj"}],"output":{"generics":["meshsource","error"],"name":"result"}}],[5,"open_wavefront","","Load a wavefront obj file into an internal mesh object",null,{"inputs":[{"name":"p"}],"output":{"generics":["meshsource","error"],"name":"result"}}],[5,"load_integrated_brdf","","",null,{"inputs":[{"name":"f"}],"output":{"generics":["texture","error"],"name":"result"}}],[5,"load_rgba8","","",null,{"inputs":[{"name":"f"},{"name":"rgbaimage"},{"name":"sampler"}],"output":{"generics":["texture","error"],"name":"result"}}],[5,"open_rgba8","","",null,{"inputs":[{"name":"f"},{"name":"p"},{"name":"sampler"}],"output":{"generics":["texture","error"],"name":"result"}}],[5,"open_uber_mesh","","",null,{"inputs":[{"name":"f"},{"name":"p1"},{"name":"p2"},{"name":"p3"},{"name":"p4"}],"output":{"generics":["mesh","error"],"name":"result"}}],[5,"load_hdr_cubemap","","",null,{"inputs":[{"name":"f"},{"name":"u8"},{"name":"s"}],"output":{"generics":["texture","error"],"name":"result"}}],[17,"CUBE_SIDE_ORDER","","",null,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"cubeside"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"cubeside"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"mesh","flight","Mesh specification and upload",null,null],[4,"Primitive","flight::mesh","Describes what geometric primitives are created from vertex data.",null,null],[13,"PointList","","Each vertex represents a single point.",22,null],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d, e]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",22,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a \"path\" of lines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line line, and `b` and `c` form a line.",22,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`, `a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",22,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c, d]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",22,null],[13,"LineListAdjacency","","Each quadtruplet of vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d]`, `b` and `c` form a line, and `a` and `d` are the adjacent vertices.",22,null],[13,"LineStripAdjacency","","Every four consecutive vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d, e]`, `[a, b, c, d]` form a line segment with adjacency, and `[b, c, d, e]` form a line segment with adjacency.",22,null],[13,"TriangleListAdjacency","","Each sextuplet of vertices represent a single traingle with adjacency information. For example, with `[a, b, c, d, e, f]`, `a`, `c`, and `e` form a traingle, and `b`, `d`, and `f` are the adjacent vertices, where `b` is adjacent to the edge formed by `a` and `c`, `d` is adjacent to the edge `c` and `e`, and `f` is adjacent to the edge `e` and `a`.",22,null],[13,"TriangleStripAdjacency","","Every even-numbered vertex (every other starting from the first) represents an additional vertex for the triangle strip, while odd-numbered vertices (every other starting from the second) represent adjacent vertices. For example, with `[a, b, c, d, e, f, g, h]`, `[a, c, e, g]` form a triangle strip, and `[b, d, f, h]` are the adjacent vertices, where `b`, `d`, and `f` are adjacent to the first triangle in the strip, and `d`, `f`, and `h` are adjacent to the second.",22,null],[13,"PatchList","","Patch list, used with shaders capable of producing primitives on their own (tessellation)",22,null],[3,"Vert","","A vertex that includes pos only.",null,null],[12,"pos","","",23,null],[3,"VertN","","A vertex that includes pos and norm.",null,null],[12,"pos","","",24,null],[12,"norm","","",24,null],[3,"VertC","","A vertex that includes pos and color.",null,null],[12,"pos","","",25,null],[12,"color","","",25,null],[3,"VertNC","","A vertex that includes pos, norm, and color.",null,null],[12,"pos","","",26,null],[12,"norm","","",26,null],[12,"color","","",26,null],[3,"VertNT","","A vertex that includes pos, norm, and tex.",null,null],[12,"pos","","",27,null],[12,"norm","","",27,null],[12,"tex","","",27,null],[3,"VertNTT","","A vertex that includes pos, norm, tan, bitan, and tex.",null,null],[12,"pos","","",28,null],[12,"norm","","",28,null],[12,"tan","","",28,null],[12,"bitan","","",28,null],[12,"tex","","",28,null],[3,"MeshSource","","A mesh storage object and builder that sent as drawable geometry to the GPU. Once uploaded, this mesh can only be rendered using a `Painter` whose  associated style supports the given vertex and material type (`<V, M>`). In addition, the painter must be setup for this mesh's primitive type.",null,null],[12,"verts","","Vertices",29,null],[12,"inds","","Indexing scheme",29,null],[12,"prim","","Primitive type",29,null],[12,"mat","","Material/texture data",29,null],[3,"Mesh","","A reference to a GPU mesh object that can be drawn by a `Painter` supporting the associated resource, vertex, material, and primitive combination. The memory cost of this object is negligible, since  (unlike `MeshSource`) it is a cloneable  reference to GPU allocated resources.",null,null],[12,"slice","","Reference to slice object (index buffer or range)",30,null],[12,"buf","","Reference to VBO",30,null],[12,"prim","","Primitive type",30,null],[12,"mat","","Material/texture data",30,null],[4,"Indexing","","A scheme for selecting vertices to combine into primitives.",null,null],[13,"Inds","","A list of vertex indices to make primitives out of",31,null],[13,"Range","","A range of vertices in sequence to make primitives out of",31,null],[13,"All","","Use all vertices in sequence to make primitives",31,null],[8,"Vertex","","A type that can be used as a vertex.",null,null],[10,"pos","","Get the vertex's position",32,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[10,"mut_pos","","Change the vertex's position",32,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[8,"WithNorm","","A vertex that can have a norm attribute added.",null,null],[16,"With","","",33,null],[10,"with_norm","","Add a normal vector to this vertex's attributes",33,null],[8,"HasNorm","","A vertex with a norm component.",null,null],[10,"norm","","Get the vertex's normal vector",34,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[10,"mut_norm","","Change the vertex's normal vector",34,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[8,"WithColor","","A vertex that can have a color attribute added.",null,null],[16,"With","","",35,null],[10,"with_color","","Add a color to this vertex's attributes",35,null],[8,"HasColor","","A vertex with a color component.",null,null],[10,"color","","Get the vertex's color",36,null],[10,"mut_color","","Change the vertex's color",36,null],[8,"WithTex","","A vertex that can have a tex attribute added.",null,null],[16,"With","","",37,null],[10,"with_tex","","Add a texture or UV coordinate to this vertex's attributes",37,null],[8,"HasTex","","A vertex with a tex component.",null,null],[10,"tex","","Get the vertex's texture or UV coordinates",38,{"inputs":[{"name":"self"}],"output":{"name":"point2"}}],[10,"mut_tex","","Change the vertex's texture or UV coordinates",38,{"inputs":[{"name":"self"}],"output":{"name":"point2"}}],[8,"WithTan","","A vertex that can have tan and bitan attributes added.",null,null],[16,"With","","",39,null],[10,"with_tan","","Add tangent and bitangent vectors to this vertex's attributes",39,null],[8,"HasTan","","A vertex with a tan component.",null,null],[10,"tan","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[10,"mut_tan","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[10,"bitan","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[10,"mut_bitan","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vert"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"vert"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"vert"}],"output":{"name":"bool"}}],[11,"query","","",23,{"inputs":[{"name":"str"}],"output":{"generics":["element"],"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vertn"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"vertn"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"vertn"}],"output":{"name":"bool"}}],[11,"query","","",24,{"inputs":[{"name":"str"}],"output":{"generics":["element"],"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"vertc"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"vertc"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"vertc"}],"output":{"name":"bool"}}],[11,"query","","",25,{"inputs":[{"name":"str"}],"output":{"generics":["element"],"name":"option"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"vertnc"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"vertnc"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"vertnc"}],"output":{"name":"bool"}}],[11,"query","","",26,{"inputs":[{"name":"str"}],"output":{"generics":["element"],"name":"option"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vertnt"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"vertnt"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"vertnt"}],"output":{"name":"bool"}}],[11,"query","","",27,{"inputs":[{"name":"str"}],"output":{"generics":["element"],"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vertntt"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"vertntt"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"vertntt"}],"output":{"name":"bool"}}],[11,"query","","",28,{"inputs":[{"name":"str"}],"output":{"generics":["element"],"name":"option"}}],[11,"pos","","",23,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"mut_pos","","",23,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"with_norm","","",23,{"inputs":[{"name":"self"},{"generics":["f32"],"name":"vector3"}],"output":{"name":"vertn"}}],[11,"with_color","","",23,null],[11,"pos","","",24,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"mut_pos","","",24,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"norm","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"mut_norm","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"with_color","","",24,null],[11,"with_tex","","",24,{"inputs":[{"name":"self"},{"generics":["f32"],"name":"point2"}],"output":{"name":"vertnt"}}],[11,"pos","","",27,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"mut_pos","","",27,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"tex","","",27,{"inputs":[{"name":"self"}],"output":{"name":"point2"}}],[11,"mut_tex","","",27,{"inputs":[{"name":"self"}],"output":{"name":"point2"}}],[11,"norm","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"mut_norm","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"with_tan","","",27,{"inputs":[{"name":"self"},{"generics":["f32"],"name":"vector3"},{"generics":["f32"],"name":"vector3"}],"output":{"name":"vertntt"}}],[11,"pos","","",28,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"mut_pos","","",28,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"norm","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"mut_norm","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"tex","","",28,{"inputs":[{"name":"self"}],"output":{"name":"point2"}}],[11,"mut_tex","","",28,{"inputs":[{"name":"self"}],"output":{"name":"point2"}}],[11,"tan","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"mut_tan","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"bitan","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"mut_bitan","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"pos","","",25,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"mut_pos","","",25,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"color","","",25,null],[11,"mut_color","","",25,null],[11,"with_norm","","",25,{"inputs":[{"name":"self"},{"generics":["f32"],"name":"vector3"}],"output":{"name":"vertnc"}}],[11,"pos","","",26,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"mut_pos","","",26,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"norm","","",26,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"mut_norm","","",26,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"color","","",26,null],[11,"mut_color","","",26,null],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"indexing"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"meshsource"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"mesh"}}],[11,"with_material","","Set the material of this mesh (usually just textures)",30,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"mesh"}}],[11,"upload","","Upload this mesh to the GPU.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mesh"}}],[11,"with_material","","Set the material of this mesh (usually just textures)",29,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"meshsource"}}],[11,"with_normal","","Adds the given normal vector to each vertex's attributes",29,{"inputs":[{"name":"self"},{"generics":["f32"],"name":"vector3"}],"output":{"name":"meshsource"}}],[11,"with_color","","Adds the given color to each vertex's attributes",29,null],[11,"with_tex","","Adds the given texture or UV coordinates to each vertex's attributes",29,{"inputs":[{"name":"self"},{"generics":["f32"],"name":"point2"}],"output":{"name":"meshsource"}}],[11,"compute_tan","","Computes tangents and bitangents for a textured mesh so that normal mapping can be used. The calculated vectors will be 0 if the primitive type is not `TriangleList` or `TriangleStrip`.",29,{"inputs":[{"name":"self"}],"output":{"name":"meshsource"}}],[0,"vr","flight","VR hardware interface",null,null],[3,"VrContext","flight::vr","Provides access to VR hardware.",null,null],[12,"near","","Set the eyes' near clipping plane",41,null],[12,"far","","Set the eyes' far clipping plane",41,null],[3,"VrMoment","","Instantaneous information about the VR system retrieved from `VrContext::sync()`. This can be used directly or to update some persistent state.",null,null],[12,"stage","","The stage transform (moves the origin to the center of the room)",42,null],[12,"inverse_stage","","The inverse stage transform (moves the center of the room to the origin)",42,null],[12,"exit","","Has the VR system requested the application to exit",42,null],[12,"paused","","Has the VR system requested the application to pause movement (should still sync and submit frames)",42,null],[12,"new_controllers","","References to controllers that have connected since the last sync",42,null],[12,"timestamp","","Relative time of this moment (seconds)",42,null],[3,"HmdMoment","","Instantaneous information about the HMD. This can be used directly or to update some persistent state.",null,null],[12,"name","","The textual name of the HMD",43,null],[12,"size","","The resolution of the HMD",43,null],[12,"pose","","The location and orientation of the HMD",43,null],[12,"left","","The drawing parameters for the left eye",43,null],[12,"right","","The drawing parameters for the right eye",43,null],[3,"ControllerMoment","","Instantaneous information about a controller. This can be used directly or to update some persistent state.",null,null],[12,"name","","The textual name of the controller",44,null],[12,"pose","","The location and orientation of the controller",44,null],[12,"axes","","The state of the floating point inputs on the controller",44,null],[12,"buttons","","The state of the button inputs on the controller",44,null],[3,"MappedController","","A structure for tracking the state of a mapped controller.",null,null],[12,"is","","The controller that updates this state object",45,null],[12,"last_timestamp","","Time of last update",45,null],[12,"dt","","Time since last update in seconds",45,null],[12,"connected","","The controller connection status.",45,null],[12,"pose","","The pose of the controller",45,null],[12,"lin_vel","","The linear velocity of the controller",45,null],[12,"ang_vel","","The rotational axis of the controller multiplied by the rotation velocity (rad/s)",45,null],[12,"pose_delta","","The transformation of the controller between the second most and most recent updates",45,null],[12,"trigger","","How far is the trigger pulled",45,null],[12,"trigger_delta","","The change in the trigger between the second most and most recent updates",45,null],[12,"pad","","The last touched location on the circular pad",45,null],[12,"pad_delta","","The change in touch location on the circular pad between the second most and most recent updates",45,null],[12,"pad_touched","","Is the circular pad touched",45,null],[12,"menu","","Is the menu button pressed",45,null],[12,"grip","","Are the grip buttons pressed",45,null],[12,"max_step","","Maximum time step for velocity calculations",45,null],[4,"ControllerRef","","Used to persistently identity a controller, either by internal id or by role. Note that roles can refer to different physical devices at different times, while the internal id will remain locked to a particular device.",null,null],[13,"Primary","","",46,null],[13,"Secondary","","",46,null],[13,"Tertiary","","",46,null],[13,"Indexed","","",46,null],[5,"primary","","Create a reference to the primary controller.",null,{"inputs":[],"output":{"name":"controllerref"}}],[5,"secondary","","Create a reference to the secondary controller.",null,{"inputs":[],"output":{"name":"controllerref"}}],[5,"tertiary","","Create a reference to the tertiary controller.",null,{"inputs":[],"output":{"name":"controllerref"}}],[6,"ControllerIter","","Iterator over momentary controller information.",null,null],[6,"ButtonMoment","","Instantaneous information about a button.",null,null],[8,"Trackable","","A device that provides instantaneous position and orientation information.",null,null],[10,"pose","","Get the location and orientation of the device.",47,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"isometry3"}}],[11,"x_dir","","Get the direction of the device's x axis.",47,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"vector3"}}],[11,"y_dir","","Get the direction of the device's y axis.",47,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"vector3"}}],[11,"z_dir","","Get the direction of the device's z axis.",47,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"vector3"}}],[11,"origin","","The the location of the device's origin.",47,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"point3"}}],[11,"pointing","","Get the direction the device is pointing.",47,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"vector3"}}],[11,"init","","",41,{"inputs":[{"name":"vrservicemanager"}],"output":{"generics":["vrcontext"],"name":"option"}}],[11,"new","","Connect to default hardware devices.",41,{"inputs":[],"output":{"generics":["vrcontext"],"name":"option"}}],[11,"mock","","Connect to a mock HMD.",41,{"inputs":[],"output":{"generics":["vrcontext"],"name":"option"}}],[11,"set_texture","","Set the OpenGL texture id to display on the HMD.",41,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"start","","Start drawing to the HMD.",41,{"inputs":[{"name":"self"}],"output":null}],[11,"stop","","Stop drawing to the HMD.",41,{"inputs":[{"name":"self"}],"output":null}],[11,"retrieve_size","","Retrieve the HMD device from the hardware API.",41,null],[11,"sync","","Synchronize with the hardware, returning transient details about the VR system at the specific moment in time. This data can be used directly or to update state variables.",41,{"inputs":[{"name":"self"}],"output":{"name":"vrmoment"}}],[11,"controller","","Get a controller by reference if such a controller is connected.",42,{"inputs":[{"name":"self"},{"name":"controllerref"}],"output":{"generics":["controllermoment"],"name":"option"}}],[11,"controllers","","Iterate over all connected controllers.",42,{"inputs":[{"name":"self"}],"output":{"name":"controlleriter"}}],[11,"hmd","","Get instantaneous information about the HMD if it is connected.",42,{"inputs":[{"name":"self"}],"output":{"generics":["hmdmoment"],"name":"option"}}],[11,"submit","","Submit the rendered scene. This ends the applicability of this information, since it only applies to the state of the VR system at the last sync.",42,{"inputs":[{"name":"self"},{"name":"vrcontext"}],"output":null}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"controllerref"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fixed","","Make thus reference specific to a device (internal id) rather than dynamically updating (role).",46,{"inputs":[{"name":"self"},{"name":"vrmoment"}],"output":{"name":"controllerref"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"hmdmoment"}}],[11,"pose","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"isometry3"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"controllermoment"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reference","","Create a reference to this particular hardware device (not to its role).",44,{"inputs":[{"name":"self"}],"output":{"name":"controllerref"}}],[11,"pose","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"isometry3"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"mappedcontroller"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a simple default state that will be updated with data from the given controller.",45,{"inputs":[{"name":"controllerref"}],"output":{"name":"mappedcontroller"}}],[11,"update","","Update the controller state using the provided instantaneous information.",45,{"inputs":[{"name":"self"},{"name":"vrmoment"}],"output":{"name":"result"}}],[11,"pad_theta","","Get the radial location of the last circular pad touch.",45,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"pose","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"isometry3"}}],[11,"fmt","flight","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"gfxcombinederror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"generics":["usize"],"name":"updateerror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"generics":["string"],"name":"pipelinestateerror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"createshadererror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"programerror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"imageerror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"invalid_primitive","","",0,{"inputs":[{"name":"primitive"}],"output":{"name":"error"}}],[11,"cube_size","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,null],[11,"context","","Add some text explaining the context in which the error occurred",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"error"}}],[6,"ColorFormat","","The pixel format of color drawing targets",null,null],[6,"DepthFormat","","The pixel format of depth drawing targets",null,null],[6,"ShadowDepthFormat","","The pixel format of shadow depth buffers",null,null],[6,"TargetRef","","Reference to a GPU color target",null,null],[6,"DepthRef","","Reference to a GPU depth target",null,null],[6,"ShaderResult","","The result of compiling and linking shader programs",null,null],[6,"PbrMesh","","A mesh that can be physically (realistically) rendered",null,null],[6,"UberMesh","","",null,null],[8,"NativeRepr","","Zero-cost conversion between a complex wrapper and its native form. For example, between `&mut Vector2<f32>` and `&mut [f32; 2]`.",null,null],[11,"upgrade","","Upgrade some native data into a high level wrapper",48,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"upgrade_ref","","Borrow some native data as a high level wrapper",48,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"upgrade_mut","","Mutably borrow some native data as a high level wrapper",48,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"downgrade","","Downgrade this high level wrapper into some native data",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downgrade_ref","","Borrow this high level wrapper as some native data",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downgrade_mut","","Mutably borrow this high level wrapper as some native data",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"light"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"light"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"sun"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"sun"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"texture"}}],[11,"into_tuple","","Convert this texture reference to an internally recognized tuple form",3,null],[11,"uniform_value","","Build a single-pixel (single value) texture. The overhead on this might still be fairly high, even though the memory usage is minimal.",3,null],[11,"clone","flight::mesh","",22,{"inputs":[{"name":"self"}],"output":{"name":"primitive"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"upgrade","flight","Upgrade some native data into a high level wrapper",48,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"upgrade_ref","","Borrow some native data as a high level wrapper",48,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"upgrade_mut","","Mutably borrow some native data as a high level wrapper",48,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"downgrade","","Downgrade this high level wrapper into some native data",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downgrade_ref","","Borrow this high level wrapper as some native data",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downgrade_mut","","Mutably borrow this high level wrapper as some native data",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"Error"],[3,"Light"],[3,"Sun"],[3,"Texture"],[4,"ErrorKind"],[3,"EyeParams"],[3,"DrawParams"],[3,"PbrMaterial"],[3,"UberMaterial"],[3,"UberEnv"],[3,"SolidInputs"],[3,"SolidStyle"],[3,"UnishadeInputs"],[3,"UnishadeStyle"],[3,"PbrInputs"],[3,"PbrStyle"],[3,"UberInputs"],[3,"UberStyle"],[3,"Painter"],[8,"Style"],[8,"StyleInputs"],[4,"CubeSide"],[4,"Primitive"],[3,"Vert"],[3,"VertN"],[3,"VertC"],[3,"VertNC"],[3,"VertNT"],[3,"VertNTT"],[3,"MeshSource"],[3,"Mesh"],[4,"Indexing"],[8,"Vertex"],[8,"WithNorm"],[8,"HasNorm"],[8,"WithColor"],[8,"HasColor"],[8,"WithTex"],[8,"HasTex"],[8,"WithTan"],[8,"HasTan"],[3,"VrContext"],[3,"VrMoment"],[3,"HmdMoment"],[3,"ControllerMoment"],[3,"MappedController"],[4,"ControllerRef"],[8,"Trackable"],[8,"NativeRepr"]]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["generic_array"] = {"doc":"This crate implements a structure that can be used as a generic array type.use Core Rust array types `[T; N]` can't be used generically with respect to `N`, so for example this:","items":[[5,"transmute","generic_array","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[3,"GenericArrayImplEven","","Internal type used to generate a struct of appropriate size",null,null],[3,"GenericArrayImplOdd","","Internal type used to generate a struct of appropriate size",null,null],[3,"GenericArray","","Struct representing a generic array - `GenericArray<T, N>` works like [T; N]",null,null],[0,"arr","","",null,null],[6,"Inc","generic_array::arr","Helper type for `arr!` macro",null,null],[8,"AddLength","","Helper trait for `arr!` macro",null,null],[16,"Output","","",0,null],[0,"iter","generic_array","",null,null],[3,"GenericArrayIter","generic_array::iter","An iterator that moves out of a `GenericArray`",null,null],[11,"into_iter","generic_array","",1,null],[11,"drop","generic_array::iter","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"count","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","generic_array","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"genericarray"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"genericarray"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"genericarray"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",1,null],[11,"borrow_mut","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[8,"ArrayLength","","Trait making `GenericArray` work, marking types to be used as length of an array",null,null],[16,"ArrayType","","Associated type representing the array type for the number",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"genericarrayimpleven"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"genericarrayimplodd"}}],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"map_slice","","map a function over a  slice to a `GenericArray`. The length of the slice must be equal to the length of the array",1,null],[11,"map","","map a function over a `GenericArray`.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"genericarray"}}],[11,"as_slice","","Extracts a slice containing the entire array",1,null],[11,"as_mut_slice","","Extracts a mutable slice containing the entire array",1,null],[11,"from_slice","","Converts slice to a generic array reference with inferred length;",1,null],[11,"from_mut_slice","","Converts mutable slice to a mutable generic array reference",1,null],[11,"clone_from_slice","","Function constructing an array from a slice by clonning its content",1,null],[14,"arr_impl","","Proper implementation of `arr!`",null,null],[14,"arr","","Macro allowing for easy generation of Generic Arrays. Example: `let test = arr![u32; 1, 2, 3];`",null,null]],"paths":[[8,"AddLength"],[3,"GenericArray"],[3,"GenericArrayIter"],[8,"ArrayLength"],[3,"GenericArrayImplEven"],[3,"GenericArrayImplOdd"]]};
searchIndex["gfx"] = {"doc":"gfx","items":[[0,"preset","gfx","State presets",null,null],[0,"blend","gfx::preset","Blending preset modes.",null,null],[17,"REPLACE","gfx::preset::blend","When combining two fragments, choose the source value",null,null],[17,"ADD","","When combining two fragments, add their values together, saturating at 1.0",null,null],[17,"MULTIPLY","","When combining two fragments, multiply their values together.",null,null],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the value of the destination multiplied by the inverse of the source alpha channel. Has the usual transparency effect: mixes the two colors using a fraction of each one specified by the alpha of the source.",null,null],[17,"INVERT","","When combining two fragments, subtract the destination color from a constant color using the source color as weight. Has an invert effect with the constant color as base and source color controlling displacement from the base color. A white source color and a white value results in plain invert. The output alpha is same as destination alpha.",null,null],[0,"depth","gfx::preset","Depth presets for depth tests.",null,null],[17,"PASS_TEST","gfx::preset::depth","When rendering a fragment, draw regardless of depth buffer state. Rendering will not update the depth buffer.",null,null],[17,"PASS_WRITE","","When rendering a fragment, draw regardless of depth buffer state. Rendering will update the depth buffer.",null,null],[17,"LESS_EQUAL_TEST","","\"<=\" comparison with read-only depth",null,null],[17,"LESS_EQUAL_WRITE","","When rendering a fragment, only draw when the fragment's output depth is less than or equal to the current depth buffer value. Rendering will update the depth buffer with the new depth value.",null,null],[0,"state","gfx","Fixed-function hardware state.",null,null],[4,"FrontFace","gfx::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",0,null],[13,"CounterClockwise","","Counter-clockwise winding order.",0,null],[6,"LineWidth","","Width of a line. Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where the unit is the minimal difference in the depth value dictated by the precision of the depth buffer.",null,null],[3,"Offset","","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",2,null],[13,"Front","","",2,null],[13,"Back","","",2,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",3,null],[13,"Line","","Rasterize as a line with the given width.",3,null],[13,"Fill","","Rasterize as a face.",3,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster method to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",4,null],[12,"cull_face","","Which face should be culled.",4,null],[12,"method","","How to rasterize this primitive.",4,null],[12,"offset","","Any polygon offset to apply.",4,null],[12,"samples","","Multi-sampling mode.",4,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",5,null],[13,"Less","","`x < y`",5,null],[13,"LessEqual","","`x <= y`",5,null],[13,"Equal","","`x == y`",5,null],[13,"GreaterEqual","","`x >= y`",5,null],[13,"Greater","","`x > y`",5,null],[13,"NotEqual","","`x != y`",5,null],[13,"Always","","`true`",5,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",6,null],[13,"Zero","","Set the value in the stencil buffer to zero.",6,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",6,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",6,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",6,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",6,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",6,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",6,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",7,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they are read before doing the stencil test.",7,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",7,null],[12,"op_fail","","What operation to do if the stencil test fails.",7,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",7,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",7,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",8,null],[12,"back","","",8,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",9,null],[12,"write","","Specify whether to write to the depth buffer or not.",9,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination. Source and destination are multiplied by blending parameters before addition.",10,null],[13,"Sub","","Subtracts destination from source. Source and destination are multiplied by blending parameters before subtraction.",10,null],[13,"RevSub","","Subtracts source from destination. Source and destination are multiplied by blending parameters before subtraction.",10,null],[13,"Min","","Component-wise minimum value of source and destination. Blending parameters are ignored.",10,null],[13,"Max","","Component-wise maximum value of source and destination. Blending parameters are ignored.",10,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",11,null],[13,"SourceAlpha","","",11,null],[13,"DestColor","","",11,null],[13,"DestAlpha","","",11,null],[13,"ConstColor","","",11,null],[13,"ConstAlpha","","",11,null],[4,"Factor","","",null,null],[13,"Zero","","",12,null],[13,"One","","",12,null],[13,"SourceAlphaSaturated","","",12,null],[13,"ZeroPlus","","",12,null],[13,"OneMinus","","",12,null],[3,"BlendChannel","","",null,null],[12,"equation","","",13,null],[12,"source","","",13,null],[12,"destination","","",13,null],[3,"Blend","","",null,null],[12,"color","","",14,null],[12,"alpha","","",14,null],[3,"ColorMask","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",15,null],[12,"blend","","Optional blending.",15,null],[3,"RefValues","","The complete set of the rasterizer reference values. Switching these doesn't roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",16,null],[12,"blend","","Constant blend color.",16,null],[8,"Device","gfx","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",null,null],[16,"Resources","","Associated `Resources` type.",17,null],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer` type.",17,null],[10,"get_capabilities","","Returns the capabilities of this `Device`.",17,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",17,null],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",17,null],[10,"fenced_submit","","Submits a `CommandBuffer` to the GPU for execution. returns a fence that is signaled after the GPU has executed all commands",17,null],[10,"wait_fence","","Stalls the current thread until the fence is satisfied",17,null],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",17,null],[4,"Primitive","","Describes what geometric primitives are created from vertex data.",null,null],[13,"PointList","","Each vertex represents a single point.",18,null],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d, e]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",18,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a \"path\" of lines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line line, and `b` and `c` form a line.",18,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`, `a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",18,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c, d]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",18,null],[13,"LineListAdjacency","","Each quadtruplet of vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d]`, `b` and `c` form a line, and `a` and `d` are the adjacent vertices.",18,null],[13,"LineStripAdjacency","","Every four consecutive vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d, e]`, `[a, b, c, d]` form a line segment with adjacency, and `[b, c, d, e]` form a line segment with adjacency.",18,null],[13,"TriangleListAdjacency","","Each sextuplet of vertices represent a single traingle with adjacency information. For example, with `[a, b, c, d, e, f]`, `a`, `c`, and `e` form a traingle, and `b`, `d`, and `f` are the adjacent vertices, where `b` is adjacent to the edge formed by `a` and `c`, `d` is adjacent to the edge `c` and `e`, and `f` is adjacent to the edge `e` and `a`.",18,null],[13,"TriangleStripAdjacency","","Every even-numbered vertex (every other starting from the first) represents an additional vertex for the triangle strip, while odd-numbered vertices (every other starting from the second) represent adjacent vertices. For example, with `[a, b, c, d, e, f, g, h]`, `[a, c, e, g]` form a triangle strip, and `[b, d, f, h]` are the adjacent vertices, where `b`, `d`, and `f` are adjacent to the first triangle in the strip, and `d`, `f`, and `h` are adjacent to the second.",18,null],[13,"PatchList","","Patch list, used with shaders capable of producing primitives on their own (tessellation)",18,null],[8,"Resources","","Different types of a specific API.",null,null],[16,"Buffer","","",19,null],[16,"Shader","","",19,null],[16,"Program","","",19,null],[16,"PipelineStateObject","","",19,null],[16,"Texture","","",19,null],[16,"ShaderResourceView","","",19,null],[16,"UnorderedAccessView","","",19,null],[16,"RenderTargetView","","",19,null],[16,"DepthStencilView","","",19,null],[16,"Sampler","","",19,null],[16,"Fence","","",19,null],[16,"Mapping","","",19,null],[4,"SubmissionError","","",null,null],[13,"AccessOverlap","","",20,null],[6,"SubmissionResult","","",null,null],[6,"VertexCount","","Draw vertex count.",null,null],[6,"InstanceCount","","Draw number of instances",null,null],[4,"ShaderSet","","A complete set of shaders to link a program.",null,null],[13,"Simple","","Simple program: Vs-Ps",21,null],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",21,null],[13,"Tessellated","","Tessellated TODO: Tessellated, TessellatedGeometry, TransformFeedback",21,null],[3,"VertexShader","","",null,null],[3,"HullShader","","",null,null],[3,"DomainShader","","",null,null],[3,"GeometryShader","","",null,null],[3,"PixelShader","","",null,null],[0,"buffer","","Memory buffers",null,null],[3,"Raw","gfx::buffer","Untyped buffer",null,null],[4,"Role","","Role of the memory buffer.",null,null],[13,"Vertex","","Generic vertex buffer",22,null],[13,"Index","","Index buffer",22,null],[13,"Constant","","Constant buffer",22,null],[13,"Staging","","Staging buffer",22,null],[3,"Info","","An information block that is immutable and associated to each buffer.",null,null],[12,"role","","Role",23,null],[12,"usage","","Usage hint",23,null],[12,"bind","","Bind flags",23,null],[12,"size","","Size in bytes",23,null],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers that you use via shader resource / unordered access views.",23,null],[4,"CreationError","","Error creating a buffer.",null,null],[13,"UnsupportedBind","","Some of the bind flags are not supported.",24,null],[13,"Other","","Unknown other error.",24,null],[13,"UnsupportedUsage","","Usage mode is not supported",24,null],[0,"format","gfx","Universal format specification. Applicable to textures, views, and vertex buffers.",null,null],[4,"ChannelType","gfx::format","Type of a surface channel. This is how we interpret the storage allocated with `SurfaceType`.",null,null],[13,"Int","","",25,null],[13,"Uint","","",25,null],[13,"Inorm","","",25,null],[13,"Unorm","","",25,null],[13,"Float","","",25,null],[13,"Srgb","","",25,null],[4,"Int","","",null,null],[4,"Uint","","",null,null],[4,"Inorm","","",null,null],[4,"Unorm","","",null,null],[4,"Float","","",null,null],[4,"Srgb","","",null,null],[4,"SurfaceType","","Type of the allocated texture surface. It is supposed to only carry information about the number of bits per each channel. The actual types are up to the views to decide and interpret. The actual components are up to the swizzle to define.",null,null],[13,"R4_G4","","",26,null],[13,"R4_G4_B4_A4","","",26,null],[13,"R5_G5_B5_A1","","",26,null],[13,"R5_G6_B5","","",26,null],[13,"R8","","",26,null],[13,"R8_G8","","",26,null],[13,"R8_G8_B8_A8","","",26,null],[13,"R10_G10_B10_A2","","",26,null],[13,"R11_G11_B10","","",26,null],[13,"R16","","",26,null],[13,"R16_G16","","",26,null],[13,"R16_G16_B16","","",26,null],[13,"R16_G16_B16_A16","","",26,null],[13,"R32","","",26,null],[13,"R32_G32","","",26,null],[13,"R32_G32_B32","","",26,null],[13,"R32_G32_B32_A32","","",26,null],[13,"B8_G8_R8_A8","","",26,null],[13,"D16","","",26,null],[13,"D24","","",26,null],[13,"D24_S8","","",26,null],[13,"D32","","",26,null],[4,"R4_G4","","",null,null],[4,"R4_G4_B4_A4","","",null,null],[4,"R5_G5_B5_A1","","",null,null],[4,"R5_G6_B5","","",null,null],[4,"R8","","",null,null],[4,"R8_G8","","",null,null],[4,"R8_G8_B8_A8","","",null,null],[4,"R10_G10_B10_A2","","",null,null],[4,"R11_G11_B10","","",null,null],[4,"R16","","",null,null],[4,"R16_G16","","",null,null],[4,"R16_G16_B16","","",null,null],[4,"R16_G16_B16_A16","","",null,null],[4,"R32","","",null,null],[4,"R32_G32","","",null,null],[4,"R32_G32_B32","","",null,null],[4,"R32_G32_B32_A32","","",null,null],[4,"B8_G8_R8_A8","","",null,null],[4,"D16","","",null,null],[4,"D24","","",null,null],[4,"D24_S8","","",null,null],[4,"D32","","",null,null],[4,"ChannelSource","","Source channel in a swizzle configuration. Some may redirect onto different physical channels, some may be hardcoded to 0 or 1.",null,null],[13,"Zero","","",27,null],[13,"One","","",27,null],[13,"X","","",27,null],[13,"Y","","",27,null],[13,"Z","","",27,null],[13,"W","","",27,null],[3,"Swizzle","","Channel swizzle configuration for the resource views. Note: It's not currently mirrored at compile-time, thus providing less safety and convenience.",null,null],[12,"0","","",28,null],[12,"1","","",28,null],[12,"2","","",28,null],[12,"3","","",28,null],[3,"Format","","Complete run-time surface format.",null,null],[12,"0","","",29,null],[12,"1","","",29,null],[8,"SurfaceTyped","","Compile-time surface type trait.",null,null],[16,"DataType","","The corresponding data type to be passed from CPU.",30,null],[10,"get_surface_type","","Return the run-time value of the type.",30,{"inputs":[],"output":{"name":"surfacetype"}}],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",null,null],[8,"TextureSurface","","An ability of a surface type to be used for textures.",null,null],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",null,null],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",null,null],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",null,null],[8,"ChannelTyped","","Compile-time channel type trait.",null,null],[16,"ShaderType","","Shader-visible type that corresponds to this channel. For example, normalized integers are visible as floats.",31,null],[10,"get_channel_type","","Return the run-time value of the type.",31,{"inputs":[],"output":{"name":"channeltype"}}],[8,"TextureChannel","","An ability of a channel type to be used for textures.",null,null],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",null,null],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",null,null],[8,"Formatted","","Compile-time full format trait.",null,null],[16,"Surface","","Associated surface type.",32,null],[16,"Channel","","Associated channel type.",32,null],[16,"View","","Shader view type of this format.",32,null],[11,"get_format","","Return the run-time value of the type.",32,{"inputs":[],"output":{"name":"format"}}],[8,"BufferFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthFormat","","Ability to be used for depth targets.",null,null],[8,"StencilFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",null,null],[8,"TextureFormat","","Ability to be used for textures.",null,null],[8,"RenderFormat","","Ability to be used for render targets.",null,null],[8,"BlendFormat","","Ability to be used for blended render targets.",null,null],[3,"U8Norm","","",null,null],[12,"0","","",33,null],[3,"I8Norm","","",null,null],[12,"0","","",34,null],[3,"U16Norm","","",null,null],[12,"0","","",35,null],[3,"I16Norm","","",null,null],[12,"0","","",36,null],[3,"F16","","",null,null],[12,"0","","",37,null],[6,"Vec1","","Abstracted 1-element container for macro internal use",null,null],[6,"Vec2","","Abstracted 2-element container for macro internal use",null,null],[6,"Vec3","","Abstracted 3-element container for macro internal use",null,null],[6,"Vec4","","Abstracted 4-element container for macro internal use",null,null],[6,"Rgba8","","Standard 8bits RGBA format.",null,null],[6,"Srgba8","","Standard 8bit gamma transforming RGB format.",null,null],[6,"Rgb10a2F","","Standard HDR floating-point format with 10 bits for RGB components and 2 bits for the alpha.",null,null],[6,"Rgba16F","","Standard 16-bit floating-point RGBA format.",null,null],[6,"Rgba32F","","Standard 32-bit floating-point RGBA format.",null,null],[6,"Bgra8","","Standard 8bits BGRA format.",null,null],[6,"Depth","","Standard 24-bit depth format.",null,null],[6,"DepthStencil","","Standard 24-bit depth format with 8-bit stencil.",null,null],[6,"Depth32F","","Standard 32-bit floating-point depth format.",null,null],[0,"handle","gfx","Resource handles",null,null],[3,"RawBuffer","gfx::handle","Untyped buffer handle",null,null],[3,"Buffer","","Type-safe buffer handle",null,null],[3,"Shader","","Shader Handle",null,null],[3,"Program","","Program Handle",null,null],[3,"RawPipelineState","","Raw Pipeline State Handle",null,null],[3,"RawTexture","","Raw texture handle",null,null],[3,"Texture","","Typed texture object",null,null],[3,"RawShaderResourceView","","Raw Shader Resource View Handle",null,null],[3,"ShaderResourceView","","Type-safe Shader Resource View Handle",null,null],[3,"RawUnorderedAccessView","","Raw Unordered Access View Handle",null,null],[3,"UnorderedAccessView","","Type-safe Unordered Access View Handle",null,null],[3,"RawRenderTargetView","","Raw RTV",null,null],[3,"RawDepthStencilView","","Raw DSV",null,null],[3,"RenderTargetView","","Typed RTV",null,null],[3,"DepthStencilView","","Typed DSV",null,null],[3,"Sampler","","Sampler Handle",null,null],[3,"Fence","","Fence Handle",null,null],[3,"Manager","","Stores reference-counted resources used in a command buffer. Seals actual resource names behind the interface, automatically referencing them both by the Factory on resource creation and the Renderer during CommandBuffer population.",null,null],[0,"mapping","gfx","Memory mapping",null,null],[4,"Error","gfx::mapping","Error accessing a mapping.",null,null],[13,"InvalidAccess","","The requested mapping access did not match the expected usage.",38,null],[13,"AccessOverlap","","The requested mapping access overlaps with another.",38,null],[3,"Reader","","Mapping reader",null,null],[3,"Writer","","Mapping writer. Currently is not possible to make write-only slice so while it is technically possible to read from Writer, it will lead to an undefined behavior. Please do not read from it.",null,null],[0,"memory","gfx","Types to describe the properties of memory allocated for gfx resources.",null,null],[4,"Usage","gfx::memory","How this memory will be used regarding GPU-CPU data flow.",null,null],[13,"Data","","Full speed GPU access. Optimal for render targets and resourced memory.",39,null],[13,"Dynamic","","CPU to GPU data flow with update commands. Used for dynamic buffer data, typically constant buffers.",39,null],[13,"Upload","","CPU to GPU data flow with mapping. Used for staging for upload to GPU.",39,null],[13,"Download","","GPU to CPU data flow with mapping. Used for staging for download from GPU.",39,null],[3,"Access","","Flags providing information about the type of memory access to a resource.",null,null],[3,"Bind","","Flags providing information about the usage of a resource.",null,null],[8,"Pod","","A trait for plain-old-data types.",null,null],[5,"cast_slice","","Cast a slice from one POD type to another.",null,null],[0,"texture","gfx","Texture creation and modification.",null,null],[17,"MAX_LEVEL","gfx::texture","Maximum accessible mipmap level of a texture.",null,null],[3,"Raw","","Untyped texture",null,null],[4,"CreationError","","Pure texture object creation error.",null,null],[13,"Format","","Failed to map a given format to the device.",40,null],[13,"Kind","","The kind doesn't support a particular operation.",40,null],[13,"Samples","","Failed to map a given multisampled kind to the device.",40,null],[13,"Size","","Unsupported size in one of the dimensions.",40,null],[13,"Data","","The given data has a different size than the target texture slice.",40,null],[13,"Usage","","The mentioned usage mode is not supported",40,null],[13,"Mipmap","","The requested mipmap creation parameter is unsupported.",40,null],[13,"Level","","The requested mipmap level count does not match the provided data.",40,null],[4,"LayerError","","An error associated with selected texture layer.",null,null],[13,"NotExpected","","The source texture kind doesn't support array slices.",41,null],[13,"OutOfBounds","","Selected layer is outside of the provided range.",41,null],[6,"Size","","Dimension size",null,null],[6,"Bits","","Number of bits per component",null,null],[6,"NumSamples","","Number of MSAA samples",null,null],[6,"NumFragments","","Number of EQAA fragments",null,null],[6,"Dimensions","","Dimensions: width, height, depth, and samples.",null,null],[4,"AaMode","","Describes the configuration of samples inside each texel.",null,null],[13,"Single","","No additional sample information",42,null],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",42,null],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",42,null],[4,"FilterMethod","","How to filter the texture when sampling. They correspond to increasing levels of quality, but also cost. They \"layer\" on top of each other: it is not possible to have bilinear filtering without mipmapping, for example.",null,null],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",43,null],[13,"Mipmap","","Add simple mipmapping.",43,null],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase quality.",43,null],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",43,null],[13,"Anisotropic","","Anisotropic filtering with a given \"max\", must be between 1 and 16, inclusive.",43,null],[4,"CubeFace","","The face of a cube texture to do an operation on.",null,null],[13,"PosX","","",44,null],[13,"NegX","","",44,null],[13,"PosY","","",44,null],[13,"NegY","","",44,null],[13,"PosZ","","",44,null],[13,"NegZ","","",44,null],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",null,null],[4,"Kind","","Specifies the kind of a texture storage to be allocated.",null,null],[13,"D1","","A single row of texels.",45,null],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels in a different row are not sampled.",45,null],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",45,null],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in a different depth level are not sampled.",45,null],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",45,null],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",45,null],[13,"CubeArray","","An array of Cube textures.",45,null],[4,"Mipmap","","The marker for the texture initializer to generate extra space for the mipmap generation.",null,null],[13,"Provided","","The mipmap data is provided as a part of bitmap data.",46,null],[13,"Allocated","","The mipmap data is not provided, but the memory for it should be allocated for the later generation/",46,null],[3,"ImageInfoCommon","","Describes a subvolume of a texture, which image data can be uploaded into.",null,null],[12,"xoffset","","",47,null],[12,"yoffset","","",47,null],[12,"zoffset","","",47,null],[12,"width","","",47,null],[12,"height","","",47,null],[12,"depth","","",47,null],[12,"format","","Format of each texel.",47,null],[12,"mipmap","","Which mipmap to select.",47,null],[6,"RawImageInfo","","New raw image info based on the universal format spec.",null,null],[6,"NewImageInfo","","New image info based on the universal format spec. The format is suppsed to come from compile-time information as opposed to run-time enum values.",null,null],[3,"TextureCopyRegion","","A texture region defined for copy operations",null,null],[12,"texture","","Raw texture",48,null],[12,"kind","","Texture kind",48,null],[12,"cube_face","","Optional cube face",48,null],[12,"info","","Dimensions, offsets, and format",48,null],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",null,null],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is the default.",49,null],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",49,null],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",49,null],[13,"Border","","Use border color.",49,null],[3,"Lod","","A wrapper for the LOD level of a texture.",null,null],[3,"PackedColor","","A wrapper for the 8bpp RGBA color, encoded as u32.",null,null],[12,"0","","",50,null],[3,"SamplerInfo","","Specifies how to sample from a texture.",null,null],[12,"filter","","Filter method to use.",51,null],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL speak).",51,null],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For example, if it would select mipmap level 2 and lod_bias is 1, it will use mipmap level 3.",51,null],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",51,null],[12,"comparison","","Comparison mode, used primary for a shadow map.",51,null],[12,"border","","Border color is used when one of the wrap modes is set to border.",51,null],[3,"Info","","Texture storage descriptor.",null,null],[12,"kind","","",52,null],[12,"levels","","",52,null],[12,"format","","",52,null],[12,"bind","","",52,null],[12,"usage","","",52,null],[3,"ResourceDesc","","Texture resource view descriptor.",null,null],[12,"channel","","",53,null],[12,"layer","","",53,null],[12,"min","","",53,null],[12,"max","","",53,null],[12,"swizzle","","",53,null],[3,"RenderDesc","","Texture render view descriptor.",null,null],[12,"channel","","",54,null],[12,"level","","",54,null],[12,"layer","","",54,null],[3,"DepthStencilFlags","","Depth-stencil read-only flags",null,null],[3,"DepthStencilDesc","","Texture depth-stencil view descriptor.",null,null],[12,"level","","",55,null],[12,"layer","","",55,null],[12,"flags","","",55,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Layer","","A depth value, specifying which plane to select out of a 3D texture.",null,null],[8,"Factory","gfx","Overview",null,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being used.",56,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[10,"create_buffer_raw","","",56,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"generics":["rawbuffer","creationerror"],"name":"result"}}],[10,"create_buffer_immutable_raw","","",56,null],[11,"create_buffer_immutable","","",56,null],[11,"create_buffer","","",56,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"role"},{"name":"usage"},{"name":"bind"}],"output":{"generics":["buffer","creationerror"],"name":"result"}}],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the `FactoryExt` trait and `pso` module, both in the `gfx` crate.",56,{"inputs":[{"name":"self"},{"name":"program"},{"name":"descriptor"}],"output":{"generics":["rawpipelinestate","creationerror"],"name":"result"}}],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",56,{"inputs":[{"name":"self"},{"name":"shaderset"}],"output":{"generics":["program","createprogramerror"],"name":"result"}}],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader `Program`.",56,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",56,null],[11,"create_shader_hull","","Compiles a `HullShader` from source.",56,null],[11,"create_shader_domain","","Compiles a `VertexShader` from source.",56,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",56,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment shader.",56,null],[10,"create_sampler","","",56,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"read_mapping","","Acquire a mapping Reader",56,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"generics":["reader","error"],"name":"result"}}],[10,"write_mapping","","Acquire a mapping Writer",56,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"generics":["writer","error"],"name":"result"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint, required to assist backends that have no concept of typeless formats (OpenGL). The initial data, if given, has to be provided for all mip levels and slices: Slice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",56,{"inputs":[{"name":"self"},{"name":"info"},{"generics":["channeltype"],"name":"option"},{"name":"option"}],"output":{"generics":["rawtexture","creationerror"],"name":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",56,{"inputs":[{"name":"self"},{"name":"rawbuffer"},{"name":"format"}],"output":{"generics":["rawshaderresourceview","resourceviewerror"],"name":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",56,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"generics":["rawunorderedaccessview","resourceviewerror"],"name":"result"}}],[10,"view_texture_as_shader_resource_raw","","",56,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"resourcedesc"}],"output":{"generics":["rawshaderresourceview","resourceviewerror"],"name":"result"}}],[10,"view_texture_as_unordered_access_raw","","",56,{"inputs":[{"name":"self"},{"name":"rawtexture"}],"output":{"generics":["rawunorderedaccessview","resourceviewerror"],"name":"result"}}],[10,"view_texture_as_render_target_raw","","",56,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"renderdesc"}],"output":{"generics":["rawrendertargetview","targetviewerror"],"name":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",56,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"depthstencildesc"}],"output":{"generics":["rawdepthstencilview","targetviewerror"],"name":"result"}}],[11,"create_texture","","",56,{"inputs":[{"name":"self"},{"name":"kind"},{"name":"u8"},{"name":"bind"},{"name":"usage"},{"generics":["channeltype"],"name":"option"}],"output":{"generics":["texture","creationerror"],"name":"result"}}],[11,"view_buffer_as_shader_resource","","",56,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"generics":["shaderresourceview","resourceviewerror"],"name":"result"}}],[11,"view_buffer_as_unordered_access","","",56,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"generics":["unorderedaccessview","resourceviewerror"],"name":"result"}}],[11,"view_texture_as_shader_resource","","",56,null],[11,"view_texture_as_unordered_access","","",56,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"generics":["unorderedaccessview","resourceviewerror"],"name":"result"}}],[11,"view_texture_as_render_target","","",56,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"u8"},{"generics":["u16"],"name":"option"}],"output":{"generics":["rendertargetview","targetviewerror"],"name":"result"}}],[11,"view_texture_as_depth_stencil","","",56,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"u8"},{"generics":["u16"],"name":"option"},{"name":"depthstencilflags"}],"output":{"generics":["depthstencilview","targetviewerror"],"name":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",56,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"generics":["depthstencilview","targetviewerror"],"name":"result"}}],[11,"create_texture_immutable_u8","","",56,null],[11,"create_texture_immutable","","",56,null],[11,"create_render_target","","",56,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"generics":["combinederror"],"name":"result"}}],[11,"create_depth_stencil","","",56,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"generics":["combinederror"],"name":"result"}}],[11,"create_depth_stencil_view_only","","",56,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"generics":["depthstencilview","combinederror"],"name":"result"}}],[4,"ResourceViewError","","Error creating either a ShaderResourceView, or UnorderedAccessView.",null,null],[13,"NoBindFlag","","The corresponding bind flag is not present in the texture.",57,null],[13,"Channel","","Selected channel type is not supported for this texture.",57,null],[13,"Layer","","Selected layer can not be viewed for this texture.",57,null],[13,"Unsupported","","The backend was refused for some reason.",57,null],[4,"TargetViewError","","Error creating either a RenderTargetView, or DepthStencilView.",null,null],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag is not present in the texture.",58,null],[13,"Level","","Selected mip level doesn't exist.",58,null],[13,"Layer","","Selected array layer doesn't exist.",58,null],[13,"Channel","","Selected channel type is not supported for this texture.",58,null],[13,"Unsupported","","The backend was refused for some reason.",58,null],[13,"NotDetached","","The RTV cannot be changed due to the references to it existing.",58,null],[4,"CombinedError","","An error from creating textures with views at the same time.",null,null],[13,"Texture","","Failed to create the raw texture.",59,null],[13,"Resource","","Failed to create SRV or UAV.",59,null],[13,"Target","","Failed to create RTV or DSV.",59,null],[8,"CommandBuffer","","An interface of the abstract command buffer. It collects commands in an efficient API-specific manner, to be ready for execution on the device.",null,null],[10,"reset","","Reset the command buffer contents, retain the allocated storage",60,null],[10,"bind_pipeline_state","","Bind a pipeline state object",60,null],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",60,null],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",60,null],[10,"bind_global_constant","","Bind a global constant",60,null],[10,"bind_resource_views","","Bind a complete set of shader resource views",60,null],[10,"bind_unordered_views","","Bind a complete set of unordered access views",60,null],[10,"bind_samplers","","Bind a complete set of samplers",60,null],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple colors views and an optional depth/stencil view.",60,null],[10,"bind_index","","Bind an index buffer",60,null],[10,"set_scissor","","Set scissor rectangle",60,null],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",60,null],[10,"copy_buffer","","Copy part of a buffer to another",60,null],[10,"copy_buffer_to_texture","","Copy part of a buffer to a texture",60,null],[10,"copy_texture_to_buffer","","Copy part of a texture to a buffer",60,null],[10,"copy_texture_to_texture","","Copy part of one texture into another",60,null],[10,"update_buffer","","Update a vertex/index/uniform buffer",60,null],[10,"update_texture","","Update a texture",60,null],[10,"generate_mipmap","","",60,null],[10,"clear_color","","Clear color target",60,null],[10,"clear_depth_stencil","","",60,null],[10,"call_draw","","Draw a primitive",60,null],[10,"call_draw_indexed","","Draw a primitive with index buffer",60,null],[6,"InstanceParams","","Optional instance parameters: (instance count, buffer offset)",null,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",61,null],[12,"globals","","Global constants in the program",61,null],[12,"constant_buffers","","Constant buffers in the program",61,null],[12,"textures","","Textures in the program",61,null],[12,"unordereds","","Unordered access resources in the program",61,null],[12,"samplers","","Samplers in the program",61,null],[12,"outputs","","Output targets in the program",61,null],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",61,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are unable to actually get the output variable info",61,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",62,null],[13,"F32","","",62,null],[13,"I32Vector2","","",62,null],[13,"I32Vector3","","",62,null],[13,"I32Vector4","","",62,null],[13,"F32Vector2","","",62,null],[13,"F32Vector3","","",62,null],[13,"F32Vector4","","",62,null],[13,"F32Matrix2","","",62,null],[13,"F32Matrix3","","",62,null],[13,"F32Matrix4","","",62,null],[3,"Encoder","","Graphics Command Encoder",null,null],[3,"Slice","","A `Slice` dictates in which and in what order vertices get processed. It is required for processing a PSO.",null,null],[12,"start","","The start index of the index-buffer. Processing will start at this location in the index-buffer.",63,null],[12,"end","","The end index in the index-buffer. Processing will stop at this location (exclusive) in the index buffer.",63,null],[12,"base_vertex","","This is the index of the first vertex in the `VertexBuffer`. This value will be added to every index in the index-buffer, effectively moving the start of the `VertexBuffer` to this base-vertex.",63,null],[12,"instances","","Instancing configuration.",63,null],[12,"buffer","","Represents the type of index-buffer used.",63,null],[4,"CopyError","","An error occuring in memory copies.",null,null],[13,"OutOfSrcBounds","","",64,null],[12,"size","gfx::CopyError","",64,null],[12,"copy_end","","",64,null],[13,"OutOfDstBounds","gfx","",64,null],[12,"size","gfx::CopyError","",64,null],[12,"copy_end","","",64,null],[13,"Overlap","gfx","",64,null],[12,"src_offset","gfx::CopyError","",64,null],[12,"dst_offset","","",64,null],[12,"size","","",64,null],[13,"NoSrcBindFlag","gfx","",64,null],[13,"NoDstBindFlag","","",64,null],[4,"UpdateError","","An error occuring in buffer/texture updates.",null,null],[13,"OutOfBounds","","",65,null],[12,"target","gfx::UpdateError","",65,null],[12,"source","","",65,null],[13,"UnitCountMismatch","gfx","",65,null],[12,"target","gfx::UpdateError","",65,null],[12,"slice","","",65,null],[13,"InvalidUsage","gfx","",65,null],[4,"PipelineStateError","","Error creating a PipelineState",null,null],[13,"Program","","Shader program failed to link.",66,null],[13,"DescriptorInit","","Unable to create PSO descriptor due to mismatched formats.",66,null],[13,"DeviceCreate","","Device failed to create the handle give the descriptor.",66,null],[4,"IndexBuffer","","Type of index-buffer used in a Slice.",null,null],[13,"Auto","","Represents a hypothetical index-buffer from 0 to infinity. In other words, all vertices get processed in order.",67,null],[13,"Index16","","An index-buffer with unsigned 16 bit indices.",67,null],[13,"Index32","","An index-buffer with unsigned 32 bit indices.",67,null],[0,"traits","","public re-exported traits",null,null],[8,"Device","gfx::traits","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",null,null],[16,"Resources","","Associated `Resources` type.",17,null],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer` type.",17,null],[10,"get_capabilities","","Returns the capabilities of this `Device`.",17,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",17,null],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",17,null],[10,"fenced_submit","","Submits a `CommandBuffer` to the GPU for execution. returns a fence that is signaled after the GPU has executed all commands",17,null],[10,"wait_fence","","Stalls the current thread until the fence is satisfied",17,null],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",17,null],[8,"Factory","","Overview",null,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being used.",56,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[10,"create_buffer_raw","","",56,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"generics":["rawbuffer","creationerror"],"name":"result"}}],[10,"create_buffer_immutable_raw","","",56,null],[11,"create_buffer_immutable","","",56,null],[11,"create_buffer","","",56,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"role"},{"name":"usage"},{"name":"bind"}],"output":{"generics":["buffer","creationerror"],"name":"result"}}],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the `FactoryExt` trait and `pso` module, both in the `gfx` crate.",56,{"inputs":[{"name":"self"},{"name":"program"},{"name":"descriptor"}],"output":{"generics":["rawpipelinestate","creationerror"],"name":"result"}}],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",56,{"inputs":[{"name":"self"},{"name":"shaderset"}],"output":{"generics":["program","createprogramerror"],"name":"result"}}],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader `Program`.",56,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",56,null],[11,"create_shader_hull","","Compiles a `HullShader` from source.",56,null],[11,"create_shader_domain","","Compiles a `VertexShader` from source.",56,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",56,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment shader.",56,null],[10,"create_sampler","","",56,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"read_mapping","","Acquire a mapping Reader",56,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"generics":["reader","error"],"name":"result"}}],[10,"write_mapping","","Acquire a mapping Writer",56,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"generics":["writer","error"],"name":"result"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint, required to assist backends that have no concept of typeless formats (OpenGL). The initial data, if given, has to be provided for all mip levels and slices: Slice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",56,{"inputs":[{"name":"self"},{"name":"info"},{"generics":["channeltype"],"name":"option"},{"name":"option"}],"output":{"generics":["rawtexture","creationerror"],"name":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",56,{"inputs":[{"name":"self"},{"name":"rawbuffer"},{"name":"format"}],"output":{"generics":["rawshaderresourceview","resourceviewerror"],"name":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",56,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"generics":["rawunorderedaccessview","resourceviewerror"],"name":"result"}}],[10,"view_texture_as_shader_resource_raw","","",56,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"resourcedesc"}],"output":{"generics":["rawshaderresourceview","resourceviewerror"],"name":"result"}}],[10,"view_texture_as_unordered_access_raw","","",56,{"inputs":[{"name":"self"},{"name":"rawtexture"}],"output":{"generics":["rawunorderedaccessview","resourceviewerror"],"name":"result"}}],[10,"view_texture_as_render_target_raw","","",56,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"renderdesc"}],"output":{"generics":["rawrendertargetview","targetviewerror"],"name":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",56,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"depthstencildesc"}],"output":{"generics":["rawdepthstencilview","targetviewerror"],"name":"result"}}],[11,"create_texture","","",56,{"inputs":[{"name":"self"},{"name":"kind"},{"name":"u8"},{"name":"bind"},{"name":"usage"},{"generics":["channeltype"],"name":"option"}],"output":{"generics":["texture","creationerror"],"name":"result"}}],[11,"view_buffer_as_shader_resource","","",56,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"generics":["shaderresourceview","resourceviewerror"],"name":"result"}}],[11,"view_buffer_as_unordered_access","","",56,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"generics":["unorderedaccessview","resourceviewerror"],"name":"result"}}],[11,"view_texture_as_shader_resource","","",56,null],[11,"view_texture_as_unordered_access","","",56,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"generics":["unorderedaccessview","resourceviewerror"],"name":"result"}}],[11,"view_texture_as_render_target","","",56,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"u8"},{"generics":["u16"],"name":"option"}],"output":{"generics":["rendertargetview","targetviewerror"],"name":"result"}}],[11,"view_texture_as_depth_stencil","","",56,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"u8"},{"generics":["u16"],"name":"option"},{"name":"depthstencilflags"}],"output":{"generics":["depthstencilview","targetviewerror"],"name":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",56,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"generics":["depthstencilview","targetviewerror"],"name":"result"}}],[11,"create_texture_immutable_u8","","",56,null],[11,"create_texture_immutable","","",56,null],[11,"create_render_target","","",56,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"generics":["combinederror"],"name":"result"}}],[11,"create_depth_stencil","","",56,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"generics":["combinederror"],"name":"result"}}],[11,"create_depth_stencil_view_only","","",56,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"generics":["depthstencilview","combinederror"],"name":"result"}}],[8,"Pod","","A trait for plain-old-data types.",null,null],[8,"FactoryExt","","This trait is responsible for creating and managing graphics resources, much like the `Factory` trait in the `gfx` crate. Every `Factory` automatically implements `FactoryExt`.",null,null],[11,"create_vertex_buffer","","Creates an immutable vertex buffer from the supplied vertices. A `Slice` will have to manually be constructed.",68,null],[11,"create_index_buffer","","Creates an immutable index buffer from the supplied vertices.",68,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"indexbuffer"}}],[11,"create_vertex_buffer_with_slice","","Creates an immutable vertex buffer from the supplied vertices, together with a `Slice` from the supplied indices.",68,null],[11,"create_constant_buffer","","Creates a constant buffer for `num` identical elements of type `T`.",68,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"create_upload_buffer","","Creates an upload buffer for `num` elements of type `T`.",68,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["buffer","creationerror"],"name":"result"}}],[11,"create_download_buffer","","Creates a download buffer for `num` elements of type `T`.",68,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["buffer","creationerror"],"name":"result"}}],[11,"create_shader_set","","Creates a `ShaderSet` from the supplied vertex and pixel shader source code.",68,null],[11,"create_shader_set_geometry","","Creates a `ShaderSet` from the supplied vertex, geometry, and pixel shader source code. Mainly used for testing.",68,null],[11,"create_shader_set_tessellation","","Creates a `ShaderSet` from the supplied vertex, hull, domain, and pixel shader source code. Mainly used for testing.",68,null],[11,"link_program","","Creates a basic shader `Program` from the supplied vertex and pixel shader source code.",68,null],[11,"create_pipeline_state","","Similar to `create_pipeline_from_program(..)`, but takes a `ShaderSet` as opposed to a shader `Program`.",68,{"inputs":[{"name":"self"},{"name":"shaderset"},{"name":"primitive"},{"name":"rasterizer"},{"name":"i"}],"output":{"generics":["pipelinestate","pipelinestateerror"],"name":"result"}}],[11,"create_pipeline_from_program","","Creates a strongly typed `PipelineState` from its `Init` structure, a shader `Program`, a primitive type and a `Rasterizer`.",68,{"inputs":[{"name":"self"},{"name":"program"},{"name":"primitive"},{"name":"rasterizer"},{"name":"i"}],"output":{"generics":["pipelinestate","pipelinestateerror"],"name":"result"}}],[11,"create_pipeline_simple","","Creates a strongly typed `PipelineState` from its `Init` structure. Automatically creates a shader `Program` from a vertex and pixel shader source, as well as a `Rasterizer` capable of rendering triangle faces without culling.",68,null],[11,"create_sampler_linear","","Create a linear sampler with clamping to border.",68,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"clone","gfx","",64,{"inputs":[{"name":"self"}],"output":{"name":"copyerror"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"copyerror"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"copyerror"}],"output":{"name":"bool"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"updateerror"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"updateerror"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"updateerror"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",65,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",69,{"inputs":[{"name":"c"}],"output":{"name":"encoder"}}],[11,"flush","","Submits the commands in this `Encoder`'s internal `CommandBuffer` to the GPU, so they can be executed.",69,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"flush_no_reset","","Like `flush` but keeps the encoded commands.",69,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"submissionresult"}}],[11,"fenced_flush_no_reset","","Like `flush_no_reset` but places a fence.",69,{"inputs":[{"name":"self"},{"name":"d"},{"generics":["fence"],"name":"option"}],"output":{"generics":["fence"],"name":"submissionresult"}}],[11,"reset","","Resets the encoded commands.",69,{"inputs":[{"name":"self"}],"output":null}],[11,"copy_buffer","","Copy part of a buffer to another",69,{"inputs":[{"name":"self"},{"name":"buffer"},{"name":"buffer"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"copybufferresult"}}],[11,"copy_buffer_to_texture_raw","","Copy part of a buffer to a texture",69,{"inputs":[{"name":"self"},{"name":"rawbuffer"},{"name":"usize"},{"name":"rawtexture"},{"generics":["cubeface"],"name":"option"},{"name":"rawimageinfo"}],"output":{"name":"copybuffertextureresult"}}],[11,"copy_texture_to_buffer_raw","","Copy part of a texture to a buffer",69,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"generics":["cubeface"],"name":"option"},{"name":"rawimageinfo"},{"name":"rawbuffer"},{"name":"usize"}],"output":{"name":"copytexturebufferresult"}}],[11,"copy_texture_to_texture_raw","","Copy part of a texture to another texture",69,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"generics":["cubeface"],"name":"option"},{"name":"rawimageinfo"},{"name":"rawtexture"},{"generics":["cubeface"],"name":"option"},{"name":"rawimageinfo"}],"output":{"generics":["copyerror"],"name":"result"}}],[11,"update_buffer","","Update a buffer with a slice of data.",69,null],[11,"update_constant_buffer","","Update a buffer with a single structure.",69,{"inputs":[{"name":"self"},{"name":"buffer"},{"name":"t"}],"output":null}],[11,"update_texture","","Update the contents of a texture.",69,null],[11,"clear","","Clears the supplied `RenderTargetView` to the supplied `ClearColor`.",69,null],[11,"clear_depth","","Clear a depth view with a specified value.",69,{"inputs":[{"name":"self"},{"name":"depthstencilview"},{"name":"depth"}],"output":null}],[11,"clear_stencil","","Clear a stencil view with a specified value.",69,{"inputs":[{"name":"self"},{"name":"depthstencilview"},{"name":"stencil"}],"output":null}],[11,"draw","","Draws a `slice::Slice` using a pipeline state object, and its matching `Data` structure.",69,{"inputs":[{"name":"self"},{"name":"slice"},{"name":"pipelinestate"},{"name":"d"}],"output":null}],[11,"generate_mipmap","","Generate a mipmap chain for the given resource view.",69,{"inputs":[{"name":"self"},{"name":"shaderresourceview"}],"output":null}],[11,"generate_mipmap_raw","","Untyped version of mipmap generation.",69,{"inputs":[{"name":"self"},{"name":"rawshaderresourceview"}],"output":null}],[11,"create_vertex_buffer","gfx::traits","Creates an immutable vertex buffer from the supplied vertices. A `Slice` will have to manually be constructed.",68,null],[11,"create_index_buffer","","Creates an immutable index buffer from the supplied vertices.",68,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"indexbuffer"}}],[11,"create_vertex_buffer_with_slice","","Creates an immutable vertex buffer from the supplied vertices, together with a `Slice` from the supplied indices.",68,null],[11,"create_constant_buffer","","Creates a constant buffer for `num` identical elements of type `T`.",68,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"create_upload_buffer","","Creates an upload buffer for `num` elements of type `T`.",68,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["buffer","creationerror"],"name":"result"}}],[11,"create_download_buffer","","Creates a download buffer for `num` elements of type `T`.",68,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["buffer","creationerror"],"name":"result"}}],[11,"create_shader_set","","Creates a `ShaderSet` from the supplied vertex and pixel shader source code.",68,null],[11,"create_shader_set_geometry","","Creates a `ShaderSet` from the supplied vertex, geometry, and pixel shader source code. Mainly used for testing.",68,null],[11,"create_shader_set_tessellation","","Creates a `ShaderSet` from the supplied vertex, hull, domain, and pixel shader source code. Mainly used for testing.",68,null],[11,"link_program","","Creates a basic shader `Program` from the supplied vertex and pixel shader source code.",68,null],[11,"create_pipeline_state","","Similar to `create_pipeline_from_program(..)`, but takes a `ShaderSet` as opposed to a shader `Program`.",68,{"inputs":[{"name":"self"},{"name":"shaderset"},{"name":"primitive"},{"name":"rasterizer"},{"name":"i"}],"output":{"generics":["pipelinestate","pipelinestateerror"],"name":"result"}}],[11,"create_pipeline_from_program","","Creates a strongly typed `PipelineState` from its `Init` structure, a shader `Program`, a primitive type and a `Rasterizer`.",68,{"inputs":[{"name":"self"},{"name":"program"},{"name":"primitive"},{"name":"rasterizer"},{"name":"i"}],"output":{"generics":["pipelinestate","pipelinestateerror"],"name":"result"}}],[11,"create_pipeline_simple","","Creates a strongly typed `PipelineState` from its `Init` structure. Automatically creates a shader `Program` from a vertex and pixel shader source, as well as a `Rasterizer` capable of rendering triangle faces without culling.",68,null],[11,"create_sampler_linear","","Create a linear sampler with clamping to border.",68,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"clone","gfx","",66,{"inputs":[{"name":"self"}],"output":{"name":"pipelinestateerror"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"pipelinestateerror"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"pipelinestateerror"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",66,{"inputs":[{"generics":["str"],"name":"pipelinestateerror"}],"output":{"generics":["string"],"name":"pipelinestateerror"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",66,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",66,{"inputs":[{"name":"programerror"}],"output":{"name":"self"}}],[11,"from","","",66,{"inputs":[{"name":"initerror"}],"output":{"name":"self"}}],[11,"from","","",66,{"inputs":[{"name":"creationerror"}],"output":{"name":"self"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"slice"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"new_match_vertex_buffer","","Creates a new `Slice` to match the supplied vertex buffer, from start to end, in order.",63,{"inputs":[{"name":"buffer"}],"output":{"name":"self"}}],[11,"get_prim_count","","Calculates the number of primitives of the specified type in this `Slice`.",63,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"u32"}}],[11,"split_at","","Divides one slice into two at an index.",63,null],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"indexbuffer"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"indexbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"indexbuffer"}],"output":{"name":"bool"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"self"}}],[11,"into_index_buffer","","",67,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"into_index_buffer","gfx::handle","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"into_index_buffer","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[0,"pso","gfx","A typed high-level graphics pipeline interface.",null,null],[3,"Descriptor","gfx::pso","All the information surrounding a shader program that is required for PSO creation, including the formats of vertex buffers and pixel targets;",null,null],[12,"primitive","","Type of the primitive",71,null],[12,"rasterizer","","Rasterizer setup",71,null],[12,"scissor","","Enable scissor test",71,null],[12,"vertex_buffers","","Vertex buffers",71,null],[12,"attributes","","Vertex attributes",71,null],[12,"constant_buffers","","Constant buffers",71,null],[12,"resource_views","","Shader resource views",71,null],[12,"unordered_views","","Unordered access views",71,null],[12,"samplers","","Samplers",71,null],[12,"color_targets","","Render target views (RTV)",71,null],[12,"depth_stencil","","Depth stencil view (DSV)",71,null],[3,"AccessInfo","","Informations about what is accessed by a bunch of commands.",null,null],[3,"RawDataSet","","A complete set of raw data that needs to be specified at run-time whenever we draw something with a PSO. This is what \"data\" struct gets transformed into when we call `encoder.draw(...)` with it. It doesn't have any typing information, since PSO knows what format and layout to expect from each resource.",null,null],[12,"vertex_buffers","","",72,null],[12,"constant_buffers","","",72,null],[12,"global_constants","","",72,null],[12,"resource_views","","",72,null],[12,"unordered_views","","",72,null],[12,"samplers","","",72,null],[12,"pixel_targets","","",72,null],[12,"ref_values","","",72,null],[12,"scissor","","",72,null],[3,"PipelineState","","A strongly typed Pipleline State Object. See the module documentation for more information.",null,null],[4,"ElementError","","Error matching an element inside the constant buffer.",null,null],[13,"NotFound","","Element not found.",73,null],[13,"Offset","","Element offset mismatch.",73,null],[12,"name","gfx::pso::ElementError","Element name.",73,null],[12,"shader_offset","","Element byte offset in the shader-side constant buffer.",73,null],[12,"code_offset","","Element byte offset in the code-side constant buffer.",73,null],[13,"Format","gfx::pso","Element format mismatch.",73,null],[12,"name","gfx::pso::ElementError","Element name.",73,null],[12,"shader_format","","Element format in the shader-side constant buffer.",73,null],[12,"code_format","","Element format in the code-side constant buffer.",73,null],[4,"InitError","gfx::pso","Failure to initilize the link between the shader and the data.",null,null],[13,"VertexImport","","Vertex attribute mismatch.",74,null],[13,"ConstantBuffer","","Constant buffer mismatch.",74,null],[13,"GlobalConstant","","Global constant mismatch.",74,null],[13,"ResourceView","","Shader resource view mismatch.",74,null],[13,"UnorderedView","","Unordered access view mismatch.",74,null],[13,"Sampler","","Sampler mismatch.",74,null],[13,"PixelExport","","Pixel target mismatch.",74,null],[0,"buffer","","Buffer components for a PSO.",null,null],[6,"BufferIndex","gfx::pso::buffer","Index of a vertex buffer.",null,null],[3,"Element","","A struct element descriptor.",null,null],[12,"format","","Element format",75,null],[12,"offset","","Offset from the beginning of the container, in bytes",75,null],[6,"ElemOffset","","Offset of an attribute from the start of the buffer, in bytes",null,null],[6,"ElemStride","","Offset between attribute values, in bytes",null,null],[6,"InstanceRate","","The number of instances between each subsequent attribute value",null,null],[3,"VertexBufferCommon","","Service struct to simplify the implementations of `VertexBuffer` and `InstanceBuffer`.",null,null],[3,"RawVertexBuffer","","Raw vertex/instance buffer component. Can be used when the formats of vertex attributes are not known at compile time.",null,null],[3,"ConstantBuffer","","Constant buffer component.",null,null],[3,"RawConstantBuffer","","Raw constant buffer component.",null,null],[3,"Global","","Global (uniform) constant component. Describes a free-standing value passed into the shader, which is not enclosed into any constant buffer.",null,null],[3,"RawGlobal","","Raw global (uniform) constant component. Describes a free-standing value passed into the shader, which is not enclosed in any constant buffer.",null,null],[4,"NonInstanced","","Helper phantom type for per-vertex attributes.",null,null],[4,"Instanced","","Helper phantom type for per-instance attributes.",null,null],[6,"VertexBuffer","","Vertex buffer component. Advanced per vertex.",null,null],[6,"InstanceBuffer","","Instance buffer component. Same as the vertex buffer but advances per instance.",null,null],[8,"Structure","","A trait to be implemented by any struct having the layout described in the graphics API, like a vertex buffer.",null,null],[10,"query","","Get the layout of an element by name.",76,{"inputs":[{"name":"str"}],"output":{"generics":["element"],"name":"option"}}],[8,"ToInstanceRate","","Helper trait for `VertexBufferCommon` to support variable instance rate.",null,null],[16,"Init","","The associated init type for PSO component.",77,null],[10,"get_rate","","Get an actual instance rate value from the init.",77,null],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",78,{"inputs":[{"name":"self"},{"name":"__hti"}],"output":null}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"get_rate","","",79,null],[11,"get_rate","","",80,null],[11,"get_rate","","",81,null],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"rawvertexbuffer"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"rawvertexbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"rawvertexbuffer"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",83,{"inputs":[{"name":"self"},{"name":"__ht"}],"output":null}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"rawconstantbuffer"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",84,null],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"rawconstantbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"rawconstantbuffer"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",85,{"inputs":[{"name":"self"},{"name":"__ht"}],"output":null}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"rawglobal"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",86,null],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"rawglobal"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"rawglobal"}],"output":{"name":"bool"}}],[11,"new","","",78,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_vertex_buffer","","",78,null],[11,"link_input","","",78,null],[11,"bind_to","","",78,null],[11,"new","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_vertex_buffer","","",82,null],[11,"link_input","","",82,null],[11,"bind_to","","",82,null],[11,"new","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_constant_buffer","","",83,null],[11,"bind_to","","",83,null],[11,"new","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_constant_buffer","","",84,null],[11,"bind_to","","",84,null],[11,"new","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_global_constant","","",85,null],[11,"bind_to","","",85,null],[11,"new","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_global_constant","","",86,null],[11,"bind_to","","",86,null],[0,"resource","gfx::pso","Resource components for a PSO.",null,null],[3,"ShaderResource","gfx::pso::resource","Shader resource component (SRV). Typically is a view into some texture, but can also be a buffer.",null,null],[3,"RawShaderResource","","Raw (untyped) shader resource (SRV).",null,null],[3,"UnorderedAccess","","Unordered access component (UAV). A writable resource (texture/buffer) with no defined access order across simultaneously executing shaders. Supported on DX10 and higher.",null,null],[3,"Sampler","","Sampler component.",null,null],[3,"TextureSampler","","A convenience type for a texture paired with a sampler. It only makes sense for DX9 class hardware, where every texture by default is bundled with a sampler, hence they are represented by the same name. In DX10 and higher samplers are totally separated from the textures.",null,null],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",87,{"inputs":[{"name":"self"},{"name":"__ht"}],"output":null}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"rawshaderresource"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",88,null],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"rawshaderresource"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"rawshaderresource"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",89,{"inputs":[{"name":"self"},{"name":"__ht"}],"output":null}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",91,{"inputs":[{"name":"self"},{"name":"__ht"}],"output":null}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",87,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_resource_view","","",87,null],[11,"bind_to","","",87,null],[11,"new","","",88,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_resource_view","","",88,null],[11,"bind_to","","",88,null],[11,"new","","",89,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_unordered_view","","",89,null],[11,"bind_to","","",89,null],[11,"new","","",90,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_sampler","","",90,null],[11,"bind_to","","",90,null],[11,"new","","",91,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_resource_view","","",91,null],[11,"link_sampler","","",91,null],[11,"bind_to","","",91,null],[0,"target","gfx::pso","Render target components for a PSO.",null,null],[3,"RenderTarget","gfx::pso::target","Render target component. Typically points to a color-formatted texture.",null,null],[3,"BlendTarget","","Render target component with active blending mode.",null,null],[3,"RawRenderTarget","","Raw (untyped) render target component with optional blending.",null,null],[3,"DepthTarget","","Depth target component.",null,null],[3,"StencilTarget","","Stencil target component.",null,null],[3,"DepthStencilTarget","","Depth + stencil target component.",null,null],[3,"Scissor","","Scissor component. Sets up the scissor test for rendering.",null,null],[3,"BlendRef","","Blend reference component. Sets up the reference color for blending.",null,null],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",92,{"inputs":[{"name":"self"},{"name":"__ht"}],"output":null}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",93,{"inputs":[{"name":"self"},{"name":"__ht"}],"output":null}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"rawrendertarget"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",94,null],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"rawrendertarget"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"rawrendertarget"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",95,{"inputs":[{"name":"self"},{"name":"__ht"}],"output":null}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",96,{"inputs":[{"name":"self"},{"name":"__ht"}],"output":null}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",97,{"inputs":[{"name":"self"},{"name":"__ht"}],"output":null}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"scissor"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",98,null],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"scissor"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"scissor"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"blendref"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",99,null],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"blendref"}],"output":{"name":"bool"}}],[11,"new","","",92,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_output","","",92,null],[11,"bind_to","","",92,null],[11,"new","","",93,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_output","","",93,null],[11,"bind_to","","",93,null],[11,"new","","",94,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_output","","",94,null],[11,"bind_to","","",94,null],[11,"new","","",95,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_depth_stencil","","",95,null],[11,"bind_to","","",95,null],[11,"new","","",96,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_depth_stencil","","",96,null],[11,"bind_to","","",96,null],[11,"new","","",97,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_depth_stencil","","",97,null],[11,"bind_to","","",97,null],[11,"new","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_scissor","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bind_to","","",98,null],[11,"new","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bind_to","","",99,null],[0,"bundle","gfx::pso","Combine slice data with pipeline state.",null,null],[3,"Bundle","gfx::pso::bundle","Slice-PSO bundle.",null,null],[12,"slice","","Slice",100,null],[12,"pso","","Pipeline state",100,null],[12,"data","","Pipeline data",100,null],[11,"new","","Create new Bundle",100,{"inputs":[{"name":"slice"},{"name":"pipelinestate"},{"name":"data"}],"output":{"name":"self"}}],[11,"encode","","Draw bundle using encoder.",100,{"inputs":[{"name":"self"},{"name":"encoder"}],"output":null}],[8,"PipelineInit","gfx::pso","A service trait implemented by the \"init\" structure of PSO.",null,null],[16,"Meta","","The associated \"meta\" struct.",101,null],[10,"link_to","","Attempt to map a PSO descriptor to a give shader program, represented by `ProgramInfo`. Returns an instance of the \"meta\" struct upon successful mapping.",101,{"inputs":[{"name":"self"},{"name":"descriptor"},{"name":"programinfo"}],"output":{"generics":["initerror"],"name":"result"}}],[8,"PipelineData","","a service trait implemented the \"data\" structure of PSO.",null,null],[16,"Meta","","The associated \"meta\" struct.",102,null],[10,"bake_to","","Dump all the contained data into the raw data set, given the mapping (\"meta\"), and a handle manager.",102,null],[8,"DataLink","","The \"link\" logic portion of a PSO component. Defines the input data for the component.",null,null],[16,"Init","","The assotiated \"init\" type - a member of the PSO \"init\" struct.",103,null],[10,"new","","Create a new empty data link.",103,{"inputs":[],"output":{"name":"self"}}],[10,"is_active","","Check if this link is actually used by the shader.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"link_vertex_buffer","","Attempt to link with a vertex buffer containing multiple attributes.",103,null],[11,"link_input","","Attempt to link with a vertex attribute.",103,null],[11,"link_constant_buffer","","Attempt to link with a constant buffer.",103,null],[11,"link_global_constant","","Attempt to link with a global constant.",103,null],[11,"link_output","","Attempt to link with an output render target (RTV).",103,null],[11,"link_depth_stencil","","Attempt to link with a depth-stencil target (DSV).",103,null],[11,"link_resource_view","","Attempt to link with a shader resource (SRV).",103,null],[11,"link_unordered_view","","Attempt to link with an unordered access (UAV).",103,null],[11,"link_sampler","","Attempt to link with a sampler.",103,null],[11,"link_scissor","","Attempt to enable scissor test.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"DataBind","","The \"bind\" logic portion of the PSO component. Defines how the user data translates into the raw data set.",null,null],[16,"Data","","The associated \"data\" type - a member of the PSO \"data\" struct.",104,null],[10,"bind_to","","Dump the given data into the raw data set.",104,null],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"rawdataset"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"rawdataset"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"rawdataset"}],"output":{"name":"bool"}}],[11,"new","","Create an empty data set.",72,{"inputs":[],"output":{"name":"rawdataset"}}],[11,"clear","","Clear all contained data.",72,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"elementerror"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"elementerror"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"elementerror"}],"output":{"name":"bool"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",73,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",73,{"inputs":[{"generics":["str"],"name":"elementerror"}],"output":{"generics":["string"],"name":"elementerror"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"initerror"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"initerror"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"initerror"}],"output":{"name":"bool"}}],[11,"from","","",74,{"inputs":[{"generics":["str"],"name":"initerror"}],"output":{"generics":["string"],"name":"initerror"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",74,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"pipelinestate"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",105,null],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"pipelinestate"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"pipelinestate"}],"output":{"name":"bool"}}],[11,"new","","Create a new PSO from a raw handle and the \"meta\" instance.",105,{"inputs":[{"name":"rawpipelinestate"},{"name":"primitive"},{"name":"m"}],"output":{"name":"pipelinestate"}}],[11,"get_handle","","Get a raw handle reference.",105,{"inputs":[{"name":"self"}],"output":{"name":"rawpipelinestate"}}],[11,"get_meta","","Get a \"meta\" struct reference. Can be used by the user to check what resources are actually used and what not.",105,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[0,"shade","gfx","Shaders Shader parameter handling.",null,null],[0,"core","gfx::shade","Shader handling.",null,null],[6,"Dimension","gfx::shade::core","Number of components in a container type (vectors/matrices)",null,null],[4,"IsArray","","Whether the sampler samples an array texture.",null,null],[13,"Array","","",106,null],[13,"NoArray","","",106,null],[4,"IsComparison","","Whether the sampler compares the depth value upon sampling.",null,null],[13,"Compare","","",107,null],[13,"NoCompare","","",107,null],[4,"IsMultiSample","","Whether the sampler samples a multisample texture.",null,null],[13,"MultiSample","","",108,null],[13,"NoMultiSample","","",108,null],[4,"IsRect","","Whether the sampler samples a rectangle texture.",null,null],[13,"Rect","","",109,null],[13,"NoRect","","",109,null],[4,"MatrixFormat","","Whether the matrix is column or row major.",null,null],[13,"ColumnMajor","","",110,null],[13,"RowMajor","","",110,null],[4,"TextureType","","A type of the texture variable. This has to match the actual data we bind to the shader.",null,null],[13,"Buffer","","Sample from a buffer.",111,null],[13,"D1","","Sample from a 1D texture",111,null],[13,"D2","","Sample from a 2D texture",111,null],[13,"D3","","Sample from a 3D texture",111,null],[13,"Cube","","Sample from a cubemap.",111,null],[3,"SamplerType","","A type of the sampler variable.",null,null],[12,"0","","",112,null],[12,"1","","",112,null],[4,"BaseType","","Base type of this shader parameter.",null,null],[13,"I32","","",113,null],[13,"U32","","",113,null],[13,"F32","","",113,null],[13,"F64","","",113,null],[13,"Bool","","",113,null],[4,"ContainerType","","Number of components this parameter represents.",null,null],[13,"Single","","Scalar value",114,null],[13,"Vector","","A vector with `Dimension` components.",114,null],[13,"Matrix","","A matrix.",114,null],[4,"Stage","","Which program stage this shader represents.",null,null],[13,"Vertex","","",115,null],[13,"Hull","","",115,null],[13,"Domain","","",115,null],[13,"Geometry","","",115,null],[13,"Pixel","","",115,null],[17,"STAGES","","A constant static array of all shader stages.",null,null],[6,"Location","","Location of a parameter in the program.",null,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",62,null],[13,"F32","","",62,null],[13,"I32Vector2","","",62,null],[13,"I32Vector3","","",62,null],[13,"I32Vector4","","",62,null],[13,"F32Vector2","","",62,null],[13,"F32Vector3","","",62,null],[13,"F32Vector4","","",62,null],[13,"F32Matrix2","","",62,null],[13,"F32Matrix3","","",62,null],[13,"F32Matrix4","","",62,null],[6,"ConstFormat","","Format of a shader constant.",null,null],[8,"BaseTyped","","A trait that statically links simple data types to base types of the shader constants.",null,null],[10,"get_base_type","","",116,{"inputs":[],"output":{"name":"basetype"}}],[8,"Formatted","","A trait that statically links simple data types to constant formats.",null,null],[10,"get_format","","Get the associated constant format.",117,null],[3,"Usage","","Parameter usage flags.",null,null],[3,"AttributeVar","","Vertex information that a shader takes as input.",null,null],[12,"name","","Name of this attribute.",118,null],[12,"slot","","Slot of the vertex attribute.",118,null],[12,"base_type","","Type that this attribute is composed of.",118,null],[12,"container","","\"Scalarness\" of this attribute.",118,null],[3,"ConstVar","","A constant in the shader - a bit of data that doesn't vary",null,null],[12,"name","","Name of this constant.",119,null],[12,"location","","Location of this constant in the program. For constant buffer elements, it's the offset in bytes.",119,null],[12,"count","","Number of elements this constant represents.",119,null],[12,"base_type","","Type that this constant is composed of",119,null],[12,"container","","\"Scalarness\" of this constant.",119,null],[3,"ConstantBufferVar","","A constant buffer.",null,null],[12,"name","","Name of this constant buffer.",120,null],[12,"slot","","Slot of the constant buffer.",120,null],[12,"size","","Size (in bytes) of this buffer's data.",120,null],[12,"usage","","What program stage this buffer is used in.",120,null],[12,"elements","","List of individual elements in this buffer.",120,null],[3,"TextureVar","","Texture shader parameter.",null,null],[12,"name","","Name of this texture variable.",121,null],[12,"slot","","Slot of this texture variable.",121,null],[12,"base_type","","Base type for the texture.",121,null],[12,"ty","","Type of this texture.",121,null],[12,"usage","","What program stage this texture is used in.",121,null],[3,"UnorderedVar","","Unordered access shader parameter.",null,null],[12,"name","","Name of this unordered variable.",122,null],[12,"slot","","Slot of this unordered variable.",122,null],[12,"usage","","What program stage this UAV is used in.",122,null],[3,"SamplerVar","","Sampler shader parameter.",null,null],[12,"name","","Name of this sampler variable.",123,null],[12,"slot","","Slot of this sampler variable.",123,null],[12,"ty","","Type of this sampler.",123,null],[12,"usage","","What program stage this texture is used in.",123,null],[3,"OutputVar","","Target output variable.",null,null],[12,"name","","Name of this output variable.",124,null],[12,"slot","","Output color target index.",124,null],[12,"base_type","","Type of the output component.",124,null],[12,"container","","\"Scalarness\" of this output.",124,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",61,null],[12,"globals","","Global constants in the program",61,null],[12,"constant_buffers","","Constant buffers in the program",61,null],[12,"textures","","Textures in the program",61,null],[12,"unordereds","","Unordered access resources in the program",61,null],[12,"samplers","","Samplers in the program",61,null],[12,"outputs","","Output targets in the program",61,null],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",61,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are unable to actually get the output variable info",61,null],[3,"Program","","A program",null,null],[4,"CompatibilityError","","Error type for trying to store a UniformValue in a ConstVar.",null,null],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",125,null],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",125,null],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4, etc)",125,null],[4,"CreateShaderError","","An error type for creating shaders.",null,null],[13,"ModelNotSupported","","The device does not support the requested shader model.",126,null],[13,"StageNotSupported","","The device does not support the shader stage.",126,null],[13,"CompilationFailed","","The shader failed to compile.",126,null],[3,"CreateProgramError","","An error type for creating programs.",null,null],[6,"ConstFormat","gfx::shade","Format of a shader constant.",null,null],[8,"Formatted","","A trait that statically links simple data types to constant formats.",null,null],[10,"get_format","","Get the associated constant format.",117,null],[3,"Usage","","Parameter usage flags.",null,null],[4,"ProgramError","","Program linking error",null,null],[13,"Vertex","","Unable to compile the vertex shader",127,null],[13,"Hull","","Unable to compile the hull shader",127,null],[13,"Domain","","Unable to compile the domain shader",127,null],[13,"Geometry","","Unable to compile the geometry shader",127,null],[13,"Pixel","","Unable to compile the pixel shader",127,null],[13,"Link","","Unable to link",127,null],[8,"ToUniform","","",null,null],[10,"convert","","",128,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"programerror"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"programerror"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"programerror"}],"output":{"name":"bool"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",127,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",127,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[0,"macros","gfx","Convenience macros Various helper macros.",null,null],[6,"CopyBufferResult","","Result type returned when copying a buffer into another buffer.",null,null],[6,"CopyBufferTextureResult","","Result type returned when copying buffer data into a texture.",null,null],[6,"CopyTextureBufferResult","","Result type returned when copying texture data into a buffer.",null,null],[8,"IntoIndexBuffer","","A helper trait to create `IndexBuffers` from different kinds of data.",null,null],[10,"into_index_buffer","","Turns self into an `IndexBuffer`.",129,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[14,"gfx_pipeline_inner","","",null,null],[14,"gfx_pipeline_base","","",null,null],[14,"gfx_pipeline","","",null,null],[14,"gfx_impl_struct","","",null,null],[14,"gfx_impl_struct_meta","","",null,null],[14,"gfx_vertex_struct","","",null,null],[14,"gfx_vertex_struct_meta","","",null,null],[14,"gfx_constant_struct","","",null,null],[14,"gfx_constant_struct_meta","","",null,null],[14,"gfx_format","","",null,null],[14,"gfx_defines","","Defines vertex, constant and pipeline formats in one block.",null,null],[11,"hash","gfx::state","",2,null],[11,"hash","","",1,null],[11,"hash","","",130,null],[11,"hash","","",9,null],[11,"hash","","",14,null],[11,"hash","","",15,null],[11,"hash","","",8,null],[11,"hash","","",13,null],[11,"hash","","",10,null],[11,"hash","","",6,null],[11,"hash","","",4,null],[11,"hash","","",3,null],[11,"hash","","",12,null],[11,"hash","","",0,null],[11,"hash","","",5,null],[11,"hash","","",7,null],[11,"hash","","",131,null],[11,"hash","","",11,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"frontface"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"comparison"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"multisample"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"equation"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"factor"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"depth"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"cullface"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"offset"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rastermethod"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"stencilside"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rasterizer"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"refvalues"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"blend"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"stencil"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"colormask"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"blendvalue"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"stencilop"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"blendchannel"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",130,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",131,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",131,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"le","","",131,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"gt","","",131,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ge","","",131,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"from_iter","","",131,{"inputs":[{"name":"t"}],"output":{"name":"colormask"}}],[11,"sub","","Returns the set difference of the two sets of flags.",131,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"stencil"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"color"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"depth"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"stencilside"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"blend"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"refvalues"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"blendchannel"}}],[11,"bitor","","Returns the union of the two sets of flags.",131,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"ordering"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"name":"ordering"}}],[11,"cmp","","",131,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"ordering"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"ordering"}}],[11,"cmp","","",130,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"name":"ordering"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"name":"ordering"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"ordering"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"ordering"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"ordering"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"name":"ordering"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"name":"ordering"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"name":"ordering"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"name":"ordering"}}],[11,"sub_assign","","Disables all flags enabled in the set.",131,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",131,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"extend","","",131,null],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",131,null],[11,"bitxor_assign","","Toggles the set of flags.",131,null],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"not","","Returns the complement of this set of flags.",131,{"inputs":[{"name":"self"}],"output":{"name":"colormask"}}],[11,"bitor_assign","","Adds the set of flags.",131,null],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",131,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"bitor","gfx::shade","Returns the union of the two sets of flags.",132,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitor","gfx::memory","Returns the union of the two sets of flags.",133,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitor","gfx::texture","Returns the union of the two sets of flags.",134,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitor","gfx::memory","Returns the union of the two sets of flags.",135,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"access"}}],[11,"not","","Returns the complement of this set of flags.",133,{"inputs":[{"name":"self"}],"output":{"name":"bind"}}],[11,"not","gfx::shade","Returns the complement of this set of flags.",132,{"inputs":[{"name":"self"}],"output":{"name":"usage"}}],[11,"not","gfx::texture","Returns the complement of this set of flags.",134,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilflags"}}],[11,"not","gfx::memory","Returns the complement of this set of flags.",135,{"inputs":[{"name":"self"}],"output":{"name":"access"}}],[11,"description","gfx::shade::core","",126,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","gfx","",59,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","gfx::mapping","",38,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","gfx::shade::core","",136,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","gfx","",58,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","gfx::texture","",41,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","gfx","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","gfx::texture","",40,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","gfx::buffer","",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","gfx::shade::core","",125,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_surface_type","gfx::format","",137,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",138,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",139,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",140,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",141,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",142,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",143,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",144,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",145,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",146,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",147,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",148,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",149,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",150,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",151,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",152,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",153,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",154,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",155,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",156,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",157,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",158,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","gfx::shade","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::memory","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","gfx::texture","",52,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"clone","gfx::handle","",159,{"inputs":[{"name":"self"}],"output":{"name":"rawbuffer"}}],[11,"clone","gfx::texture","",55,{"inputs":[{"name":"self"}],"output":{"name":"depthstencildesc"}}],[11,"clone","gfx::format","",34,{"inputs":[{"name":"self"}],"output":{"name":"i8norm"}}],[11,"clone","gfx::texture","",40,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"clone","gfx::handle","",160,{"inputs":[{"name":"self"}],"output":{"name":"rendertargetview"}}],[11,"clone","gfx::pso","",161,{"inputs":[{"name":"self"}],"output":{"name":"accessinfo"}}],[11,"clone","gfx::pso::buffer","",75,{"inputs":[{"name":"self"}],"output":{"name":"element"}}],[11,"clone","gfx","",21,{"inputs":[{"name":"self"}],"output":{"name":"shaderset"}}],[11,"clone","gfx::format","",26,{"inputs":[{"name":"self"}],"output":{"name":"surfacetype"}}],[11,"clone","gfx::shade::core","",120,{"inputs":[{"name":"self"}],"output":{"name":"constantbuffervar"}}],[11,"clone","gfx::memory","",133,{"inputs":[{"name":"self"}],"output":{"name":"bind"}}],[11,"clone","gfx::texture","",45,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"clone","gfx::format","",162,{"inputs":[{"name":"self"}],"output":{"name":"unorm"}}],[11,"clone","gfx::shade::core","",107,{"inputs":[{"name":"self"}],"output":{"name":"iscomparison"}}],[11,"clone","gfx::format","",157,{"inputs":[{"name":"self"}],"output":{"name":"d24_s8"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"r32_g32_b32"}}],[11,"clone","gfx::shade::core","",115,{"inputs":[{"name":"self"}],"output":{"name":"stage"}}],[11,"clone","gfx::handle","",163,{"inputs":[{"name":"self"}],"output":{"name":"rawdepthstencilview"}}],[11,"clone","gfx::shade::core","",111,{"inputs":[{"name":"self"}],"output":{"name":"texturetype"}}],[11,"clone","gfx::format","",36,{"inputs":[{"name":"self"}],"output":{"name":"i16norm"}}],[11,"clone","gfx::shade::core","",106,{"inputs":[{"name":"self"}],"output":{"name":"isarray"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"samplertype"}}],[11,"clone","gfx::memory","",135,{"inputs":[{"name":"self"}],"output":{"name":"access"}}],[11,"clone","gfx::handle","",164,{"inputs":[{"name":"self"}],"output":{"name":"program"}}],[11,"clone","gfx::format","",144,{"inputs":[{"name":"self"}],"output":{"name":"r8"}}],[11,"clone","gfx::shade::core","",119,{"inputs":[{"name":"self"}],"output":{"name":"constvar"}}],[11,"clone","gfx::format","",145,{"inputs":[{"name":"self"}],"output":{"name":"r32"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"r4_g4_b4_a4"}}],[11,"clone","gfx::handle","",165,{"inputs":[{"name":"self"}],"output":{"name":"shader"}}],[11,"clone","gfx","",166,{"inputs":[{"name":"self"}],"output":{"name":"geometryshader"}}],[11,"clone","gfx::format","",138,{"inputs":[{"name":"self"}],"output":{"name":"r5_g6_b5"}}],[11,"clone","gfx::shade::core","",113,{"inputs":[{"name":"self"}],"output":{"name":"basetype"}}],[11,"clone","gfx::handle","",167,{"inputs":[{"name":"self"}],"output":{"name":"fence"}}],[11,"clone","gfx::buffer","",24,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"clone","gfx::texture","",54,{"inputs":[{"name":"self"}],"output":{"name":"renderdesc"}}],[11,"clone","gfx::handle","",168,{"inputs":[{"name":"self"}],"output":{"name":"rawrendertargetview"}}],[11,"clone","gfx::format","",141,{"inputs":[{"name":"self"}],"output":{"name":"r8_g8_b8_a8"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"r16_g16"}}],[11,"clone","gfx::texture","",51,{"inputs":[{"name":"self"}],"output":{"name":"samplerinfo"}}],[11,"clone","gfx::format","",152,{"inputs":[{"name":"self"}],"output":{"name":"r4_g4"}}],[11,"clone","gfx::texture","",49,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[11,"clone","gfx","",59,{"inputs":[{"name":"self"}],"output":{"name":"combinederror"}}],[11,"clone","gfx::format","",146,{"inputs":[{"name":"self"}],"output":{"name":"r10_g10_b10_a2"}}],[11,"clone","gfx","",58,{"inputs":[{"name":"self"}],"output":{"name":"targetviewerror"}}],[11,"clone","gfx::format","",169,{"inputs":[{"name":"self"}],"output":{"name":"inorm"}}],[11,"clone","gfx::texture","",48,{"inputs":[{"name":"self"}],"output":{"name":"texturecopyregion"}}],[11,"clone","gfx::handle","",170,{"inputs":[{"name":"self"}],"output":{"name":"texture"}}],[11,"clone","gfx::texture","",171,{"inputs":[{"name":"self"}],"output":{"name":"lod"}}],[11,"clone","gfx::format","",142,{"inputs":[{"name":"self"}],"output":{"name":"d16"}}],[11,"clone","gfx::texture","",41,{"inputs":[{"name":"self"}],"output":{"name":"layererror"}}],[11,"clone","gfx::handle","",172,{"inputs":[{"name":"self"}],"output":{"name":"rawpipelinestate"}}],[11,"clone","gfx","",173,{"inputs":[{"name":"self"}],"output":{"name":"vertexshader"}}],[11,"clone","gfx::format","",37,{"inputs":[{"name":"self"}],"output":{"name":"f16"}}],[11,"clone","gfx::mapping","",38,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","gfx::shade::core","",124,{"inputs":[{"name":"self"}],"output":{"name":"outputvar"}}],[11,"clone","gfx::format","",156,{"inputs":[{"name":"self"}],"output":{"name":"r8_g8"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"channeltype"}}],[11,"clone","gfx","",20,{"inputs":[{"name":"self"}],"output":{"name":"submissionerror"}}],[11,"clone","gfx::handle","",174,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilview"}}],[11,"clone","gfx::shade::core","",109,{"inputs":[{"name":"self"}],"output":{"name":"isrect"}}],[11,"clone","gfx::texture","",46,{"inputs":[{"name":"self"}],"output":{"name":"mipmap"}}],[11,"clone","gfx::format","",27,{"inputs":[{"name":"self"}],"output":{"name":"channelsource"}}],[11,"clone","gfx","",175,{"inputs":[{"name":"self"}],"output":{"name":"hullshader"}}],[11,"clone","gfx::format","",29,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"r32_g32_b32_a32"}}],[11,"clone","gfx::texture","",50,{"inputs":[{"name":"self"}],"output":{"name":"packedcolor"}}],[11,"clone","gfx","",176,{"inputs":[{"name":"self"}],"output":{"name":"domainshader"}}],[11,"clone","gfx::format","",150,{"inputs":[{"name":"self"}],"output":{"name":"r11_g11_b10"}}],[11,"clone","gfx::shade::core","",125,{"inputs":[{"name":"self"}],"output":{"name":"compatibilityerror"}}],[11,"clone","gfx::format","",151,{"inputs":[{"name":"self"}],"output":{"name":"r16"}}],[11,"clone","gfx::shade::core","",108,{"inputs":[{"name":"self"}],"output":{"name":"ismultisample"}}],[11,"clone","gfx::format","",35,{"inputs":[{"name":"self"}],"output":{"name":"u16norm"}}],[11,"clone","gfx::handle","",177,{"inputs":[{"name":"self"}],"output":{"name":"rawshaderresourceview"}}],[11,"clone","gfx::format","",137,{"inputs":[{"name":"self"}],"output":{"name":"r32_g32"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"uint"}}],[11,"clone","gfx::handle","",179,{"inputs":[{"name":"self"}],"output":{"name":"rawunorderedaccessview"}}],[11,"clone","gfx::shade::core","",136,{"inputs":[{"name":"self"}],"output":{"name":"createprogramerror"}}],[11,"clone","gfx::handle","",70,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"clone","gfx::shade::core","",114,{"inputs":[{"name":"self"}],"output":{"name":"containertype"}}],[11,"clone","gfx::format","",148,{"inputs":[{"name":"self"}],"output":{"name":"d32"}}],[11,"clone","gfx::texture","",53,{"inputs":[{"name":"self"}],"output":{"name":"resourcedesc"}}],[11,"clone","gfx::shade::core","",110,{"inputs":[{"name":"self"}],"output":{"name":"matrixformat"}}],[11,"clone","gfx::format","",149,{"inputs":[{"name":"self"}],"output":{"name":"d24"}}],[11,"clone","gfx","",180,{"inputs":[{"name":"self"}],"output":{"name":"pixelshader"}}],[11,"clone","gfx::shade::core","",121,{"inputs":[{"name":"self"}],"output":{"name":"texturevar"}}],[11,"clone","gfx::format","",181,{"inputs":[{"name":"self"}],"output":{"name":"float"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"r5_g5_b5_a1"}}],[11,"clone","gfx::handle","",182,{"inputs":[{"name":"self"}],"output":{"name":"shaderresourceview"}}],[11,"clone","gfx::shade::core","",122,{"inputs":[{"name":"self"}],"output":{"name":"unorderedvar"}}],[11,"clone","gfx::format","",153,{"inputs":[{"name":"self"}],"output":{"name":"r16_g16_b16_a16"}}],[11,"clone","gfx::shade::core","",123,{"inputs":[{"name":"self"}],"output":{"name":"samplervar"}}],[11,"clone","gfx::handle","",183,{"inputs":[{"name":"self"}],"output":{"name":"rawtexture"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"clone","gfx::format","",158,{"inputs":[{"name":"self"}],"output":{"name":"r16_g16_b16"}}],[11,"clone","gfx::handle","",185,{"inputs":[{"name":"self"}],"output":{"name":"unorderedaccessview"}}],[11,"clone","gfx::format","",186,{"inputs":[{"name":"self"}],"output":{"name":"int"}}],[11,"clone","gfx","",18,{"inputs":[{"name":"self"}],"output":{"name":"primitive"}}],[11,"clone","gfx::shade::core","",126,{"inputs":[{"name":"self"}],"output":{"name":"createshadererror"}}],[11,"clone","gfx::buffer","",22,{"inputs":[{"name":"self"}],"output":{"name":"role"}}],[11,"clone","gfx","",57,{"inputs":[{"name":"self"}],"output":{"name":"resourceviewerror"}}],[11,"clone","gfx::format","",143,{"inputs":[{"name":"self"}],"output":{"name":"b8_g8_r8_a8"}}],[11,"clone","gfx::shade::core","",118,{"inputs":[{"name":"self"}],"output":{"name":"attributevar"}}],[11,"clone","gfx::pso","",71,{"inputs":[{"name":"self"}],"output":{"name":"descriptor"}}],[11,"clone","gfx::format","",33,{"inputs":[{"name":"self"}],"output":{"name":"u8norm"}}],[11,"clone","gfx::texture","",44,{"inputs":[{"name":"self"}],"output":{"name":"cubeface"}}],[11,"clone","gfx::memory","",39,{"inputs":[{"name":"self"}],"output":{"name":"usage"}}],[11,"clone","gfx::shade::core","",62,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"clone","gfx::texture","",43,{"inputs":[{"name":"self"}],"output":{"name":"filtermethod"}}],[11,"clone","gfx::shade::core","",61,{"inputs":[{"name":"self"}],"output":{"name":"programinfo"}}],[11,"clone","gfx::texture","",134,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilflags"}}],[11,"clone","gfx::shade","",132,{"inputs":[{"name":"self"}],"output":{"name":"usage"}}],[11,"clone","gfx::buffer","",23,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"clone","gfx::format","",187,{"inputs":[{"name":"self"}],"output":{"name":"srgb"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"swizzle"}}],[11,"clone","gfx::texture","",42,{"inputs":[{"name":"self"}],"output":{"name":"aamode"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"imageinfocommon"}}],[11,"sub","gfx::shade","Returns the set difference of the two sets of flags.",132,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"sub","gfx::memory","Returns the set difference of the two sets of flags.",135,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"access"}}],[11,"sub","","Returns the set difference of the two sets of flags.",133,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"sub","gfx::texture","Returns the set difference of the two sets of flags.",134,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"fmt","gfx::shade::core","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::memory","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::mapping","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::buffer","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::buffer","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::buffer","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::pso","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::memory","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::pso::buffer","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::memory","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::buffer","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::mapping","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::mapping","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::pso","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::handle","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::format","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","gfx::texture","",53,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::format","",186,{"inputs":[{"name":"self"},{"name":"int"}],"output":{"name":"ordering"}}],[11,"cmp","","",148,{"inputs":[{"name":"self"},{"name":"d32"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::texture","",55,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::format","",157,{"inputs":[{"name":"self"},{"name":"d24_s8"}],"output":{"name":"ordering"}}],[11,"cmp","","",178,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"ordering"}}],[11,"cmp","","",27,{"inputs":[{"name":"self"},{"name":"channelsource"}],"output":{"name":"ordering"}}],[11,"cmp","","",146,{"inputs":[{"name":"self"},{"name":"r10_g10_b10_a2"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::memory","",133,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::format","",169,{"inputs":[{"name":"self"},{"name":"inorm"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::texture","",44,{"inputs":[{"name":"self"},{"name":"cubeface"}],"output":{"name":"ordering"}}],[11,"cmp","","",49,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::format","",155,{"inputs":[{"name":"self"},{"name":"r32_g32_b32_a32"}],"output":{"name":"ordering"}}],[11,"cmp","","",149,{"inputs":[{"name":"self"},{"name":"d24"}],"output":{"name":"ordering"}}],[11,"cmp","","",28,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"ordering"}}],[11,"cmp","","",153,{"inputs":[{"name":"self"},{"name":"r16_g16_b16_a16"}],"output":{"name":"ordering"}}],[11,"cmp","","",142,{"inputs":[{"name":"self"},{"name":"d16"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::texture","",134,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::format","",154,{"inputs":[{"name":"self"},{"name":"r16_g16"}],"output":{"name":"ordering"}}],[11,"cmp","","",34,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"ordering"}}],[11,"cmp","","",36,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::texture","",43,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::format","",156,{"inputs":[{"name":"self"},{"name":"r8_g8"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::texture","",46,{"inputs":[{"name":"self"},{"name":"mipmap"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::format","",139,{"inputs":[{"name":"self"},{"name":"r5_g5_b5_a1"}],"output":{"name":"ordering"}}],[11,"cmp","","",187,{"inputs":[{"name":"self"},{"name":"srgb"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::texture","",52,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::format","",138,{"inputs":[{"name":"self"},{"name":"r5_g6_b5"}],"output":{"name":"ordering"}}],[11,"cmp","","",143,{"inputs":[{"name":"self"},{"name":"b8_g8_r8_a8"}],"output":{"name":"ordering"}}],[11,"cmp","","",26,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::texture","",54,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::shade","",132,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::format","",145,{"inputs":[{"name":"self"},{"name":"r32"}],"output":{"name":"ordering"}}],[11,"cmp","","",25,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"name":"ordering"}}],[11,"cmp","","",151,{"inputs":[{"name":"self"},{"name":"r16"}],"output":{"name":"ordering"}}],[11,"cmp","","",144,{"inputs":[{"name":"self"},{"name":"r8"}],"output":{"name":"ordering"}}],[11,"cmp","","",140,{"inputs":[{"name":"self"},{"name":"r32_g32_b32"}],"output":{"name":"ordering"}}],[11,"cmp","","",147,{"inputs":[{"name":"self"},{"name":"r4_g4_b4_a4"}],"output":{"name":"ordering"}}],[11,"cmp","","",137,{"inputs":[{"name":"self"},{"name":"r32_g32"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::texture","",47,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::format","",141,{"inputs":[{"name":"self"},{"name":"r8_g8_b8_a8"}],"output":{"name":"ordering"}}],[11,"cmp","","",33,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"ordering"}}],[11,"cmp","","",158,{"inputs":[{"name":"self"},{"name":"r16_g16_b16"}],"output":{"name":"ordering"}}],[11,"cmp","","",35,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::texture","",48,{"inputs":[{"name":"self"},{"name":"texturecopyregion"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::format","",150,{"inputs":[{"name":"self"},{"name":"r11_g11_b10"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::memory","",135,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"ordering"}}],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::format","",29,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"ordering"}}],[11,"cmp","","",162,{"inputs":[{"name":"self"},{"name":"unorm"}],"output":{"name":"ordering"}}],[11,"cmp","","",37,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"ordering"}}],[11,"cmp","","",181,{"inputs":[{"name":"self"},{"name":"float"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::texture","",42,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::format","",152,{"inputs":[{"name":"self"},{"name":"r4_g4"}],"output":{"name":"ordering"}}],[11,"cmp","gfx::texture","",45,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"ordering"}}],[11,"bitxor","gfx::memory","Returns the left flags, but with all the right flags toggled.",133,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",135,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"access"}}],[11,"bitxor","gfx::texture","Returns the left flags, but with all the right flags toggled.",134,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitxor","gfx::shade","Returns the left flags, but with all the right flags toggled.",132,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"extend","gfx::memory","",133,null],[11,"extend","gfx::texture","",134,null],[11,"extend","gfx::memory","",135,null],[11,"extend","gfx::shade","",132,null],[11,"bitand","gfx::memory","Returns the intersection between the two sets of flags.",135,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"access"}}],[11,"bitand","gfx::texture","Returns the intersection between the two sets of flags.",134,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitand","gfx::memory","Returns the intersection between the two sets of flags.",133,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitand","gfx::shade","Returns the intersection between the two sets of flags.",132,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"partial_cmp","gfx::format","",141,{"inputs":[{"name":"self"},{"name":"r8_g8_b8_a8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",153,{"inputs":[{"name":"self"},{"name":"r16_g16_b16_a16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","gfx::texture","",55,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",55,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"le","","",55,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"gt","","",55,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"ge","","",55,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx::shade","",132,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",132,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"le","","",132,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"gt","","",132,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ge","","",132,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx::format","",146,{"inputs":[{"name":"self"},{"name":"r10_g10_b10_a2"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",162,{"inputs":[{"name":"self"},{"name":"unorm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",140,{"inputs":[{"name":"self"},{"name":"r32_g32_b32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",157,{"inputs":[{"name":"self"},{"name":"d24_s8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",137,{"inputs":[{"name":"self"},{"name":"r32_g32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","gfx::memory","",135,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",135,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"le","","",135,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"gt","","",135,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"ge","","",135,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx::format","",150,{"inputs":[{"name":"self"},{"name":"r11_g11_b10"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","gfx::texture","",51,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",45,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"le","","",45,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"gt","","",45,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ge","","",45,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx::format","",28,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",186,{"inputs":[{"name":"self"},{"name":"int"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","gfx::texture","",43,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",47,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",47,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"le","","",47,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"gt","","",47,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"ge","","",47,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx::format","",29,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",148,{"inputs":[{"name":"self"},{"name":"d32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","gfx::texture","",50,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",50,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"le","","",50,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"gt","","",50,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"ge","","",50,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx::memory","",39,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","gfx::format","",155,{"inputs":[{"name":"self"},{"name":"r32_g32_b32_a32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",152,{"inputs":[{"name":"self"},{"name":"r4_g4"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",37,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",37,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"le","","",37,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"gt","","",37,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"ge","","",37,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",158,{"inputs":[{"name":"self"},{"name":"r16_g16_b16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","gfx::texture","",52,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",52,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"le","","",52,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"gt","","",52,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"ge","","",52,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx::format","",178,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","gfx::texture","",171,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",171,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"le","","",171,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"gt","","",171,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"ge","","",171,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx::format","",181,{"inputs":[{"name":"self"},{"name":"float"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",187,{"inputs":[{"name":"self"},{"name":"srgb"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",169,{"inputs":[{"name":"self"},{"name":"inorm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",156,{"inputs":[{"name":"self"},{"name":"r8_g8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","gfx::memory","",133,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",133,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"le","","",133,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"gt","","",133,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"ge","","",133,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx::format","",138,{"inputs":[{"name":"self"},{"name":"r5_g6_b5"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",33,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"le","","",33,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"gt","","",33,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"ge","","",33,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx::texture","",49,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","gfx::format","",151,{"inputs":[{"name":"self"},{"name":"r16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",145,{"inputs":[{"name":"self"},{"name":"r32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","gfx::texture","",54,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",54,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"le","","",54,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"gt","","",54,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"ge","","",54,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",53,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"le","","",53,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"gt","","",53,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"ge","","",53,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx::format","",139,{"inputs":[{"name":"self"},{"name":"r5_g5_b5_a1"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",35,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",35,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"le","","",35,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"gt","","",35,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"ge","","",35,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",142,{"inputs":[{"name":"self"},{"name":"d16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",144,{"inputs":[{"name":"self"},{"name":"r8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","gfx::texture","",134,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",134,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"le","","",134,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"gt","","",134,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"ge","","",134,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"self"},{"name":"texturecopyregion"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"self"},{"name":"texturecopyregion"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"self"},{"name":"texturecopyregion"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"self"},{"name":"texturecopyregion"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"self"},{"name":"texturecopyregion"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx::format","",147,{"inputs":[{"name":"self"},{"name":"r4_g4_b4_a4"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","gfx::texture","",44,{"inputs":[{"name":"self"},{"name":"cubeface"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","gfx::format","",143,{"inputs":[{"name":"self"},{"name":"b8_g8_r8_a8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",36,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"le","","",36,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"gt","","",36,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"ge","","",36,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"self"},{"name":"channelsource"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",154,{"inputs":[{"name":"self"},{"name":"r16_g16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","gfx::texture","",42,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",42,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"le","","",42,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"gt","","",42,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ge","","",42,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"self"},{"name":"mipmap"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","gfx::shade::core","",62,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",62,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"name":"bool"}}],[11,"le","","",62,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"name":"bool"}}],[11,"gt","","",62,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"name":"bool"}}],[11,"ge","","",62,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx::format","",149,{"inputs":[{"name":"self"},{"name":"d24"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","gfx","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::buffer","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade::core","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::mapping","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref_mut","","",193,null],[11,"sub_assign","gfx::memory","Disables all flags enabled in the set.",135,null],[11,"sub_assign","gfx::texture","Disables all flags enabled in the set.",134,null],[11,"sub_assign","gfx::memory","Disables all flags enabled in the set.",133,null],[11,"sub_assign","gfx::shade","Disables all flags enabled in the set.",132,null],[11,"bitand_assign","gfx::texture","Disables all flags disabled in the set.",134,null],[11,"bitand_assign","gfx::memory","Disables all flags disabled in the set.",133,null],[11,"bitand_assign","","Disables all flags disabled in the set.",135,null],[11,"bitand_assign","gfx::shade","Disables all flags disabled in the set.",132,null],[11,"bitxor_assign","","Toggles the set of flags.",132,null],[11,"bitxor_assign","gfx::memory","Toggles the set of flags.",135,null],[11,"bitxor_assign","gfx::texture","Toggles the set of flags.",134,null],[11,"bitxor_assign","gfx::memory","Toggles the set of flags.",133,null],[11,"eq","gfx::texture","",51,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"eq","gfx::buffer","",22,{"inputs":[{"name":"self"},{"name":"role"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",190,{"inputs":[{"name":"self"},{"name":"raw"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",148,{"inputs":[{"name":"self"},{"name":"d32"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade","",132,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",140,{"inputs":[{"name":"self"},{"name":"r32_g32_b32"}],"output":{"name":"bool"}}],[11,"eq","gfx::buffer","",24,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"eq","gfx","",175,{"inputs":[{"name":"self"},{"name":"hullshader"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"self"},{"name":"hullshader"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",108,{"inputs":[{"name":"self"},{"name":"ismultisample"}],"output":{"name":"bool"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"self"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",43,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",149,{"inputs":[{"name":"self"},{"name":"d24"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",52,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",137,{"inputs":[{"name":"self"},{"name":"r32_g32"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",171,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",187,{"inputs":[{"name":"self"},{"name":"srgb"}],"output":{"name":"bool"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"r16"}],"output":{"name":"bool"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"r16_g16_b16"}],"output":{"name":"bool"}}],[11,"eq","gfx::handle","",183,{"inputs":[{"name":"self"},{"name":"rawtexture"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"self"},{"name":"rawtexture"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",29,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"r5_g5_b5_a1"}],"output":{"name":"bool"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"r32_g32_b32_a32"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"r4_g4"}],"output":{"name":"bool"}}],[11,"eq","gfx::handle","",174,{"inputs":[{"name":"self"},{"name":"depthstencilview"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",136,{"inputs":[{"name":"self"},{"name":"createprogramerror"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"self"},{"name":"createprogramerror"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",134,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",119,{"inputs":[{"name":"self"},{"name":"constvar"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"constvar"}],"output":{"name":"bool"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"attributevar"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"attributevar"}],"output":{"name":"bool"}}],[11,"eq","gfx::handle","",182,{"inputs":[{"name":"self"},{"name":"shaderresourceview"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",62,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",27,{"inputs":[{"name":"self"},{"name":"channelsource"}],"output":{"name":"bool"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",61,{"inputs":[{"name":"self"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"eq","gfx::mapping","",38,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"eq","gfx","",58,{"inputs":[{"name":"self"},{"name":"targetviewerror"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"targetviewerror"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",42,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",112,{"inputs":[{"name":"self"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",181,{"inputs":[{"name":"self"},{"name":"float"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",124,{"inputs":[{"name":"self"},{"name":"outputvar"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"self"},{"name":"outputvar"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",41,{"inputs":[{"name":"self"},{"name":"layererror"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"layererror"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",162,{"inputs":[{"name":"self"},{"name":"unorm"}],"output":{"name":"bool"}}],[11,"eq","gfx::buffer","",188,{"inputs":[{"name":"self"},{"name":"raw"}],"output":{"name":"bool"}}],[11,"eq","gfx","",176,{"inputs":[{"name":"self"},{"name":"domainshader"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"domainshader"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",126,{"inputs":[{"name":"self"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"self"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",145,{"inputs":[{"name":"self"},{"name":"r32"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",54,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",120,{"inputs":[{"name":"self"},{"name":"constantbuffervar"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"constantbuffervar"}],"output":{"name":"bool"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"basetype"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",33,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"r8_g8"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",49,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"eq","gfx","",173,{"inputs":[{"name":"self"},{"name":"vertexshader"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"vertexshader"}],"output":{"name":"bool"}}],[11,"eq","gfx::buffer","",23,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",53,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",35,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"eq","gfx::handle","",168,{"inputs":[{"name":"self"},{"name":"rawrendertargetview"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"self"},{"name":"rawrendertargetview"}],"output":{"name":"bool"}}],[11,"eq","gfx","",57,{"inputs":[{"name":"self"},{"name":"resourceviewerror"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"resourceviewerror"}],"output":{"name":"bool"}}],[11,"eq","gfx::handle","",172,{"inputs":[{"name":"self"},{"name":"rawpipelinestate"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"self"},{"name":"rawpipelinestate"}],"output":{"name":"bool"}}],[11,"eq","gfx","",18,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"eq","gfx::handle","",170,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",122,{"inputs":[{"name":"self"},{"name":"unorderedvar"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"unorderedvar"}],"output":{"name":"bool"}}],[11,"eq","gfx::memory","",135,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",125,{"inputs":[{"name":"self"},{"name":"compatibilityerror"}],"output":{"name":"bool"}}],[11,"eq","gfx::pso","",71,{"inputs":[{"name":"self"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"eq","gfx","",21,{"inputs":[{"name":"self"},{"name":"shaderset"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"shaderset"}],"output":{"name":"bool"}}],[11,"eq","gfx::handle","",184,{"inputs":[{"name":"self"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"self"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"eq","gfx","",20,{"inputs":[{"name":"self"},{"name":"submissionerror"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",111,{"inputs":[{"name":"self"},{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",142,{"inputs":[{"name":"self"},{"name":"d16"}],"output":{"name":"bool"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"d24_s8"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",50,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",26,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",47,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",143,{"inputs":[{"name":"self"},{"name":"b8_g8_r8_a8"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",46,{"inputs":[{"name":"self"},{"name":"mipmap"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",144,{"inputs":[{"name":"self"},{"name":"r8"}],"output":{"name":"bool"}}],[11,"eq","gfx::handle","",179,{"inputs":[{"name":"self"},{"name":"rawunorderedaccessview"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"self"},{"name":"rawunorderedaccessview"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",44,{"inputs":[{"name":"self"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"texturecopyregion"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"texturecopyregion"}],"output":{"name":"bool"}}],[11,"eq","gfx::handle","",165,{"inputs":[{"name":"self"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",178,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",191,{"inputs":[{"name":"self"},{"name":"program"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",154,{"inputs":[{"name":"self"},{"name":"r16_g16"}],"output":{"name":"bool"}}],[11,"eq","gfx::pso::buffer","",75,{"inputs":[{"name":"self"},{"name":"element"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"element"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",141,{"inputs":[{"name":"self"},{"name":"r8_g8_b8_a8"}],"output":{"name":"bool"}}],[11,"eq","gfx","",180,{"inputs":[{"name":"self"},{"name":"pixelshader"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"pixelshader"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",153,{"inputs":[{"name":"self"},{"name":"r16_g16_b16_a16"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",110,{"inputs":[{"name":"self"},{"name":"matrixformat"}],"output":{"name":"bool"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"iscomparison"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",40,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",106,{"inputs":[{"name":"self"},{"name":"isarray"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",37,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"r11_g11_b10"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",109,{"inputs":[{"name":"self"},{"name":"isrect"}],"output":{"name":"bool"}}],[11,"eq","gfx","",166,{"inputs":[{"name":"self"},{"name":"geometryshader"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"self"},{"name":"geometryshader"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",138,{"inputs":[{"name":"self"},{"name":"r5_g6_b5"}],"output":{"name":"bool"}}],[11,"eq","gfx::memory","",133,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",169,{"inputs":[{"name":"self"},{"name":"inorm"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"name":"bool"}}],[11,"eq","gfx::handle","",70,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"program"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"self"},{"name":"program"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",55,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"eq","gfx","",59,{"inputs":[{"name":"self"},{"name":"combinederror"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"combinederror"}],"output":{"name":"bool"}}],[11,"eq","gfx::texture","",45,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"eq","gfx::handle","",177,{"inputs":[{"name":"self"},{"name":"rawshaderresourceview"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"self"},{"name":"rawshaderresourceview"}],"output":{"name":"bool"}}],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"unorderedaccessview"}],"output":{"name":"bool"}}],[11,"eq","gfx::memory","",39,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"eq","gfx::handle","",167,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",115,{"inputs":[{"name":"self"},{"name":"stage"}],"output":{"name":"bool"}}],[11,"eq","gfx::handle","",160,{"inputs":[{"name":"self"},{"name":"rendertargetview"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",114,{"inputs":[{"name":"self"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",186,{"inputs":[{"name":"self"},{"name":"int"}],"output":{"name":"bool"}}],[11,"eq","gfx::shade::core","",121,{"inputs":[{"name":"self"},{"name":"texturevar"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"texturevar"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",34,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"r4_g4_b4_a4"}],"output":{"name":"bool"}}],[11,"eq","gfx::handle","",163,{"inputs":[{"name":"self"},{"name":"rawdepthstencilview"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"rawdepthstencilview"}],"output":{"name":"bool"}}],[11,"eq","gfx::pso","",161,{"inputs":[{"name":"self"},{"name":"accessinfo"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"accessinfo"}],"output":{"name":"bool"}}],[11,"eq","gfx::format","",146,{"inputs":[{"name":"self"},{"name":"r10_g10_b10_a2"}],"output":{"name":"bool"}}],[11,"hash","gfx::texture","",46,null],[11,"hash","gfx::format","",25,null],[11,"hash","gfx::memory","",133,null],[11,"hash","gfx::shade::core","",107,null],[11,"hash","","",118,null],[11,"hash","gfx::format","",140,null],[11,"hash","gfx::texture","",41,null],[11,"hash","gfx::handle","",170,null],[11,"hash","gfx::texture","",44,null],[11,"hash","gfx::handle","",179,null],[11,"hash","","",183,null],[11,"hash","gfx::format","",151,null],[11,"hash","gfx::texture","",52,null],[11,"hash","","",53,null],[11,"hash","gfx::format","",152,null],[11,"hash","gfx::texture","",171,null],[11,"hash","gfx::format","",157,null],[11,"hash","","",150,null],[11,"hash","gfx","",18,null],[11,"hash","gfx::mapping","",38,null],[11,"hash","gfx::format","",155,null],[11,"hash","","",144,null],[11,"hash","","",181,null],[11,"hash","","",35,null],[11,"hash","gfx","",21,null],[11,"hash","gfx::texture","",55,null],[11,"hash","","",49,null],[11,"hash","gfx::format","",141,null],[11,"hash","","",145,null],[11,"hash","gfx::shade::core","",115,null],[11,"hash","gfx::format","",28,null],[11,"hash","gfx::memory","",39,null],[11,"hash","gfx::format","",178,null],[11,"hash","gfx::shade::core","",121,null],[11,"hash","gfx::handle","",70,null],[11,"hash","gfx::buffer","",24,null],[11,"hash","gfx::format","",169,null],[11,"hash","","",143,null],[11,"hash","gfx","",176,null],[11,"hash","gfx::texture","",48,null],[11,"hash","gfx::shade::core","",113,null],[11,"hash","","",111,null],[11,"hash","gfx","",175,null],[11,"hash","gfx::texture","",47,null],[11,"hash","gfx::handle","",177,null],[11,"hash","","",160,null],[11,"hash","gfx::texture","",190,null],[11,"hash","gfx::handle","",163,null],[11,"hash","gfx::texture","",43,null],[11,"hash","gfx::shade::core","",110,null],[11,"hash","gfx::handle","",184,null],[11,"hash","gfx::pso::buffer","",75,null],[11,"hash","gfx::format","",149,null],[11,"hash","gfx::texture","",54,null],[11,"hash","gfx::format","",158,null],[11,"hash","","",162,null],[11,"hash","gfx::handle","",174,null],[11,"hash","gfx::texture","",50,null],[11,"hash","gfx::format","",29,null],[11,"hash","gfx::buffer","",188,null],[11,"hash","gfx::format","",147,null],[11,"hash","gfx::shade::core","",114,null],[11,"hash","","",109,null],[11,"hash","gfx::format","",33,null],[11,"hash","gfx::handle","",167,null],[11,"hash","gfx::shade","",132,null],[11,"hash","gfx::format","",186,null],[11,"hash","","",27,null],[11,"hash","gfx::pso","",71,null],[11,"hash","gfx::texture","",51,null],[11,"hash","gfx::handle","",182,null],[11,"hash","gfx::shade::core","",122,null],[11,"hash","gfx::format","",187,null],[11,"hash","gfx::buffer","",22,null],[11,"hash","gfx","",173,null],[11,"hash","gfx::buffer","",23,null],[11,"hash","gfx::shade::core","",123,null],[11,"hash","gfx::format","",36,null],[11,"hash","gfx::shade::core","",124,null],[11,"hash","gfx::handle","",159,null],[11,"hash","gfx::format","",154,null],[11,"hash","gfx::shade::core","",106,null],[11,"hash","gfx::texture","",42,null],[11,"hash","gfx::shade::core","",61,null],[11,"hash","gfx::handle","",168,null],[11,"hash","gfx::format","",146,null],[11,"hash","gfx::shade::core","",191,null],[11,"hash","gfx::memory","",135,null],[11,"hash","gfx::texture","",45,null],[11,"hash","gfx::format","",148,null],[11,"hash","","",156,null],[11,"hash","gfx","",166,null],[11,"hash","gfx::format","",37,null],[11,"hash","gfx::texture","",134,null],[11,"hash","gfx","",180,null],[11,"hash","gfx::format","",137,null],[11,"hash","gfx::shade::core","",112,null],[11,"hash","","",120,null],[11,"hash","gfx::format","",26,null],[11,"hash","","",139,null],[11,"hash","gfx::handle","",165,null],[11,"hash","gfx::format","",153,null],[11,"hash","","",34,null],[11,"hash","gfx::handle","",185,null],[11,"hash","gfx::shade::core","",108,null],[11,"hash","gfx::format","",138,null],[11,"hash","","",142,null],[11,"hash","gfx::handle","",164,null],[11,"hash","gfx::shade::core","",119,null],[11,"hash","gfx::handle","",172,null],[11,"from_iter","gfx::texture","",134,{"inputs":[{"name":"t"}],"output":{"name":"depthstencilflags"}}],[11,"from_iter","gfx::memory","",135,{"inputs":[{"name":"t"}],"output":{"name":"access"}}],[11,"from_iter","","",133,{"inputs":[{"name":"t"}],"output":{"name":"bind"}}],[11,"from_iter","gfx::shade","",132,{"inputs":[{"name":"t"}],"output":{"name":"usage"}}],[11,"from","gfx::format","",34,{"inputs":[{"name":"i8"}],"output":{"name":"i8norm"}}],[11,"from","gfx","",59,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"combinederror"}}],[11,"from","gfx::shade","",132,{"inputs":[{"name":"stage"}],"output":{"name":"usage"}}],[11,"from","gfx::format","",35,{"inputs":[{"name":"u16"}],"output":{"name":"u16norm"}}],[11,"from","","",37,{"inputs":[{"name":"u16"}],"output":{"name":"f16"}}],[11,"from","gfx","",59,{"inputs":[{"name":"targetviewerror"}],"output":{"name":"combinederror"}}],[11,"from","gfx::texture","",42,{"inputs":[{"name":"u8"}],"output":{"name":"aamode"}}],[11,"from","gfx","",59,{"inputs":[{"name":"creationerror"}],"output":{"name":"combinederror"}}],[11,"from","gfx::format","",33,{"inputs":[{"name":"u8"}],"output":{"name":"u8norm"}}],[11,"from","gfx::texture","",55,{"inputs":[{"name":"renderdesc"}],"output":{"name":"depthstencildesc"}}],[11,"from","gfx::format","",36,{"inputs":[{"name":"i16"}],"output":{"name":"i16norm"}}],[11,"from","gfx::texture","",50,null],[11,"from","gfx::shade::core","",136,{"inputs":[{"name":"s"}],"output":{"name":"createprogramerror"}}],[11,"from","gfx::texture","",171,{"inputs":[{"name":"f32"}],"output":{"name":"lod"}}],[11,"get_channel_type","gfx::format","",178,{"inputs":[],"output":{"name":"channeltype"}}],[11,"get_channel_type","","",162,{"inputs":[],"output":{"name":"channeltype"}}],[11,"get_channel_type","","",186,{"inputs":[],"output":{"name":"channeltype"}}],[11,"get_channel_type","","",169,{"inputs":[],"output":{"name":"channeltype"}}],[11,"get_channel_type","","",181,{"inputs":[],"output":{"name":"channeltype"}}],[11,"get_channel_type","","",187,{"inputs":[],"output":{"name":"channeltype"}}],[11,"into","gfx::texture","",50,null],[11,"into","","",171,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::memory","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::memory","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"get_info","gfx::buffer","Get buffer info",188,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"is_mapped","","Is this buffer mapped ?",188,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","gfx::handle","",159,null],[11,"get_info","gfx::shade::core","Get program info",191,{"inputs":[{"name":"self"}],"output":{"name":"programinfo"}}],[11,"deref","gfx::handle","",164,null],[11,"deref","gfx::mapping","",192,null],[11,"new","gfx::pso","Creates empty access informations",161,{"inputs":[],"output":{"name":"accessinfo"}}],[11,"clear","","Clear access informations",161,null],[11,"buffer_read","","Register a buffer read access",161,null],[11,"buffer_write","","Register a buffer write access",161,null],[11,"mapped_reads","","Returns the mapped buffers that The GPU will read from",161,{"inputs":[{"name":"self"}],"output":{"generics":["rawbuffer"],"name":"iter"}}],[11,"mapped_writes","","Returns the mapped buffers that The GPU will write to",161,{"inputs":[{"name":"self"}],"output":{"generics":["rawbuffer"],"name":"iter"}}],[11,"has_mapped_reads","","Is there any mapped buffer reads ?",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_mapped_writes","","Is there any mapped buffer writes ?",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take_accesses","","Takes all the accesses necessary for submission",161,{"inputs":[{"name":"self"}],"output":{"generics":["accessguard","submissionerror"],"name":"result"}}],[11,"get_info","gfx::texture","Get texture descriptor",190,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"deref","gfx::handle","",183,null],[11,"deref","gfx::mapping","",193,null],[11,"fmt","gfx::memory","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::memory","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::shade","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::memory","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::texture","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx::memory","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitor_assign","","Adds the set of flags.",135,null],[11,"bitor_assign","gfx::shade","Adds the set of flags.",132,null],[11,"bitor_assign","gfx::texture","Adds the set of flags.",134,null],[11,"bitor_assign","gfx::memory","Adds the set of flags.",133,null],[11,"new_fill","gfx::state","Create a new filling rasterizer.",4,{"inputs":[],"output":{"name":"rasterizer"}}],[11,"with_cull_back","","Add back face culling.",4,{"inputs":[{"name":"self"}],"output":{"name":"rasterizer"}}],[11,"with_offset","","Add polygon offset.",4,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"i32"}],"output":{"name":"rasterizer"}}],[11,"new","","Create a new stencil state with a given function.",8,null],[11,"new","","Create a new blend state with a given equation.",14,{"inputs":[{"name":"equation"},{"name":"factor"},{"name":"factor"}],"output":{"name":"blend"}}],[18,"RED","","",131,null],[18,"GREEN","","",131,null],[18,"BLUE","","",131,null],[18,"ALPHA","","",131,null],[11,"empty","","Returns an empty set of flags.",131,{"inputs":[],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",131,{"inputs":[],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",131,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",131,{"inputs":[{"name":"u8"}],"output":{"generics":["colormask"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",131,{"inputs":[{"name":"u8"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",131,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",131,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",131,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",131,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",131,null],[11,"remove","","Removes the specified flags in-place.",131,null],[11,"toggle","","Toggles the specified flags in-place.",131,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",131,null],[11,"get_usage","gfx","Return the aggregated stage usage for the set.",21,{"inputs":[{"name":"self"}],"output":{"name":"usage"}}],[11,"reference","","",173,null],[11,"reference","","",175,null],[11,"reference","","",176,null],[11,"reference","","",166,null],[11,"reference","","",180,null],[11,"get_total_bits","gfx::format","Return the total number of bits for this format.",26,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_alpha_stencil_bits","","Return the number of bits allocated for alpha and stencil.",26,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"new","","Create a new swizzle where each channel is unmapped.",28,{"inputs":[],"output":{"name":"swizzle"}}],[11,"cast2","","Convert a 2-element slice.",33,null],[11,"cast3","","Convert a 3-element slice.",33,null],[11,"cast4","","Convert a 4-element slice.",33,null],[11,"cast_slice","","Convert a generic slice by transmutation.",33,null],[11,"cast2","","Convert a 2-element slice.",34,null],[11,"cast3","","Convert a 3-element slice.",34,null],[11,"cast4","","Convert a 4-element slice.",34,null],[11,"cast_slice","","Convert a generic slice by transmutation.",34,null],[11,"cast2","","Convert a 2-element slice.",35,null],[11,"cast3","","Convert a 3-element slice.",35,null],[11,"cast4","","Convert a 4-element slice.",35,null],[11,"cast_slice","","Convert a generic slice by transmutation.",35,null],[11,"cast2","","Convert a 2-element slice.",36,null],[11,"cast3","","Convert a 3-element slice.",36,null],[11,"cast4","","Convert a 4-element slice.",36,null],[11,"cast_slice","","Convert a generic slice by transmutation.",36,null],[11,"cast2","","Convert a 2-element slice.",37,null],[11,"cast3","","Convert a 3-element slice.",37,null],[11,"cast4","","Convert a 4-element slice.",37,null],[11,"cast_slice","","Convert a generic slice by transmutation.",37,null],[11,"get_info","gfx::handle","Get the associated information about the buffer",70,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"len","","Get the number of elements in the buffer.",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_info","","Get texture descriptor",170,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"get_dimensions","","Get target dimensions",168,null],[11,"get_texture","","Get the associated texture",168,{"inputs":[{"name":"self"}],"output":{"name":"rawtexture"}}],[11,"get_dimensions","","Get target dimensions",163,null],[11,"get_texture","","Get the associated texture",163,{"inputs":[{"name":"self"}],"output":{"name":"rawtexture"}}],[11,"get_dimensions","","Get target dimensions",160,null],[11,"get_dimensions","","Get target dimensions",174,null],[11,"get_info","","Get sampler info",184,{"inputs":[{"name":"self"}],"output":{"name":"samplerinfo"}}],[11,"new","","Create a new handle manager",189,{"inputs":[],"output":{"name":"manager"}}],[11,"clear","","Clear all references",189,null],[11,"extend","","Extend with all references of another handle manager",189,null],[11,"count","","Count the total number of referenced resources",189,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ref_buffer","","Reference a buffer",189,null],[11,"ref_shader","","Reference a shader",189,null],[11,"ref_program","","Reference a program",189,null],[11,"ref_pso","","Reference a pipeline state object",189,null],[11,"ref_texture","","Reference a texture",189,null],[11,"ref_srv","","Reference a shader resource view",189,null],[11,"ref_uav","","Reference an unordered access view",189,null],[11,"ref_rtv","","Reference an RTV",189,null],[11,"ref_dsv","","Reference a DSV",189,null],[11,"ref_sampler","","Reference a sampler",189,null],[11,"ref_fence","","Reference a fence",189,null],[18,"READ","gfx::memory","Read access",135,null],[18,"WRITE","","Write access",135,null],[18,"RW","","Full access",135,null],[11,"empty","","Returns an empty set of flags.",135,{"inputs":[],"output":{"name":"access"}}],[11,"all","","Returns the set containing all flags.",135,{"inputs":[],"output":{"name":"access"}}],[11,"bits","","Returns the raw value of the flags currently stored.",135,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",135,{"inputs":[{"name":"u8"}],"output":{"generics":["access"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",135,{"inputs":[{"name":"u8"}],"output":{"name":"access"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",135,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",135,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",135,null],[11,"remove","","Removes the specified flags in-place.",135,null],[11,"toggle","","Toggles the specified flags in-place.",135,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",135,null],[11,"is_mutable","","Is this memory bound to be mutated ?",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[18,"RENDER_TARGET","","Can be rendered into.",133,null],[18,"DEPTH_STENCIL","","Can serve as a depth/stencil target.",133,null],[18,"SHADER_RESOURCE","","Can be bound to the shader for reading.",133,null],[18,"UNORDERED_ACCESS","","Can be bound to the shader for writing.",133,null],[18,"TRANSFER_SRC","","Can be transfered from.",133,null],[18,"TRANSFER_DST","","Can be transfered into.",133,null],[11,"empty","","Returns an empty set of flags.",133,{"inputs":[],"output":{"name":"bind"}}],[11,"all","","Returns the set containing all flags.",133,{"inputs":[],"output":{"name":"bind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",133,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",133,{"inputs":[{"name":"u8"}],"output":{"generics":["bind"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",133,{"inputs":[{"name":"u8"}],"output":{"name":"bind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",133,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",133,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",133,null],[11,"remove","","Removes the specified flags in-place.",133,null],[11,"toggle","","Toggles the specified flags in-place.",133,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",133,null],[11,"get_num_fragments","gfx::texture","Return the number of actual data fragments stored per texel.",42,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"needs_resolve","","Return true if the surface has to be resolved before sampling.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_dimensions","","Get texture dimensions, with 0 values where not applicable.",45,null],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",45,null],[11,"get_num_levels","","Count the number of mipmap levels.",45,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",45,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"is_cube","","Check if it's one of the cube kinds.",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_texel_count","","Get the total number of texels.",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"convert","","Convert into a differently typed format.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"imageinfocommon"}}],[11,"is_inside","","Check if it fits inside given dimensions.",47,null],[11,"get_byte_count","","Get the total number of bytes.",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_texture","","Change the texture",48,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"texturecopyregion"}}],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD modifications.",51,{"inputs":[{"name":"filtermethod"},{"name":"wrapmode"}],"output":{"name":"samplerinfo"}}],[11,"to_image_info","","Get image info for a given mip.",52,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"imageinfocommon"}}],[11,"to_raw_image_info","","Get the raw image info for a given mip and a channel type.",52,{"inputs":[{"name":"self"},{"name":"channeltype"},{"name":"u8"}],"output":{"generics":["format"],"name":"imageinfocommon"}}],[18,"RO_DEPTH","","Depth is read-only in the view.",134,null],[18,"RO_STENCIL","","Stencil is read-only in the view.",134,null],[18,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",134,null],[11,"empty","","Returns an empty set of flags.",134,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"all","","Returns the set containing all flags.",134,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",134,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",134,{"inputs":[{"name":"u8"}],"output":{"generics":["depthstencilflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",134,{"inputs":[{"name":"u8"}],"output":{"name":"depthstencilflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",134,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",134,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",134,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",134,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",134,null],[11,"remove","","Removes the specified flags in-place.",134,null],[11,"toggle","","Toggles the specified flags in-place.",134,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",134,null],[11,"new","gfx::pso","Create a new empty PSO descriptor.",71,{"inputs":[{"name":"primitive"},{"name":"rasterizer"}],"output":{"name":"descriptor"}}],[11,"can_sample","gfx::shade::core","Check if this texture can be used with a sampler.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[18,"VERTEX","gfx::shade","Used by the vertex shader",132,null],[18,"GEOMETRY","","Used by the geometry shader",132,null],[18,"PIXEL","","Used by the pixel shader",132,null],[18,"HULL","","Used by the hull shader",132,null],[18,"DOMAIN","","Used by the pixel shader",132,null],[11,"empty","","Returns an empty set of flags.",132,{"inputs":[],"output":{"name":"usage"}}],[11,"all","","Returns the set containing all flags.",132,{"inputs":[],"output":{"name":"usage"}}],[11,"bits","","Returns the raw value of the flags currently stored.",132,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",132,{"inputs":[{"name":"u8"}],"output":{"generics":["usage"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",132,{"inputs":[{"name":"u8"}],"output":{"name":"usage"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",132,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",132,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",132,null],[11,"remove","","Removes the specified flags in-place.",132,null],[11,"toggle","","Toggles the specified flags in-place.",132,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",132,null],[11,"is_compatible","gfx::shade::core","Whether a value is compatible with this variable. That is, whether the value can be stored in this variable.",119,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"generics":["compatibilityerror"],"name":"result"}}]],"paths":[[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"Rasterizer"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[8,"Device"],[4,"Primitive"],[8,"Resources"],[4,"SubmissionError"],[4,"ShaderSet"],[4,"Role"],[3,"Info"],[4,"CreationError"],[4,"ChannelType"],[4,"SurfaceType"],[4,"ChannelSource"],[3,"Swizzle"],[3,"Format"],[8,"SurfaceTyped"],[8,"ChannelTyped"],[8,"Formatted"],[3,"U8Norm"],[3,"I8Norm"],[3,"U16Norm"],[3,"I16Norm"],[3,"F16"],[4,"Error"],[4,"Usage"],[4,"CreationError"],[4,"LayerError"],[4,"AaMode"],[4,"FilterMethod"],[4,"CubeFace"],[4,"Kind"],[4,"Mipmap"],[3,"ImageInfoCommon"],[3,"TextureCopyRegion"],[4,"WrapMode"],[3,"PackedColor"],[3,"SamplerInfo"],[3,"Info"],[3,"ResourceDesc"],[3,"RenderDesc"],[3,"DepthStencilDesc"],[8,"Factory"],[4,"ResourceViewError"],[4,"TargetViewError"],[4,"CombinedError"],[8,"CommandBuffer"],[3,"ProgramInfo"],[4,"UniformValue"],[3,"Slice"],[4,"CopyError"],[4,"UpdateError"],[4,"PipelineStateError"],[4,"IndexBuffer"],[8,"FactoryExt"],[3,"Encoder"],[3,"Buffer"],[3,"Descriptor"],[3,"RawDataSet"],[4,"ElementError"],[4,"InitError"],[3,"Element"],[8,"Structure"],[8,"ToInstanceRate"],[3,"VertexBufferCommon"],[6,"InstanceRate"],[4,"Instanced"],[4,"NonInstanced"],[3,"RawVertexBuffer"],[3,"ConstantBuffer"],[3,"RawConstantBuffer"],[3,"Global"],[3,"RawGlobal"],[3,"ShaderResource"],[3,"RawShaderResource"],[3,"UnorderedAccess"],[3,"Sampler"],[3,"TextureSampler"],[3,"RenderTarget"],[3,"BlendTarget"],[3,"RawRenderTarget"],[3,"DepthTarget"],[3,"StencilTarget"],[3,"DepthStencilTarget"],[3,"Scissor"],[3,"BlendRef"],[3,"Bundle"],[8,"PipelineInit"],[8,"PipelineData"],[8,"DataLink"],[8,"DataBind"],[3,"PipelineState"],[4,"IsArray"],[4,"IsComparison"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"TextureType"],[3,"SamplerType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[8,"BaseTyped"],[8,"Formatted"],[3,"AttributeVar"],[3,"ConstVar"],[3,"ConstantBufferVar"],[3,"TextureVar"],[3,"UnorderedVar"],[3,"SamplerVar"],[3,"OutputVar"],[4,"CompatibilityError"],[4,"CreateShaderError"],[4,"ProgramError"],[8,"ToUniform"],[8,"IntoIndexBuffer"],[3,"MultiSample"],[3,"ColorMask"],[3,"Usage"],[3,"Bind"],[3,"DepthStencilFlags"],[3,"Access"],[3,"CreateProgramError"],[4,"R32_G32"],[4,"R5_G6_B5"],[4,"R5_G5_B5_A1"],[4,"R32_G32_B32"],[4,"R8_G8_B8_A8"],[4,"D16"],[4,"B8_G8_R8_A8"],[4,"R8"],[4,"R32"],[4,"R10_G10_B10_A2"],[4,"R4_G4_B4_A4"],[4,"D32"],[4,"D24"],[4,"R11_G11_B10"],[4,"R16"],[4,"R4_G4"],[4,"R16_G16_B16_A16"],[4,"R16_G16"],[4,"R32_G32_B32_A32"],[4,"R8_G8"],[4,"D24_S8"],[4,"R16_G16_B16"],[3,"RawBuffer"],[3,"RenderTargetView"],[3,"AccessInfo"],[4,"Unorm"],[3,"RawDepthStencilView"],[3,"Program"],[3,"Shader"],[3,"GeometryShader"],[3,"Fence"],[3,"RawRenderTargetView"],[4,"Inorm"],[3,"Texture"],[3,"Lod"],[3,"RawPipelineState"],[3,"VertexShader"],[3,"DepthStencilView"],[3,"HullShader"],[3,"DomainShader"],[3,"RawShaderResourceView"],[4,"Uint"],[3,"RawUnorderedAccessView"],[3,"PixelShader"],[4,"Float"],[3,"ShaderResourceView"],[3,"RawTexture"],[3,"Sampler"],[3,"UnorderedAccessView"],[4,"Int"],[4,"Srgb"],[3,"Raw"],[3,"Manager"],[3,"Raw"],[3,"Program"],[3,"Reader"],[3,"Writer"]]};
searchIndex["gfx_core"] = {"doc":"Low-level graphics abstraction for Rust. Mostly operates on data, not types. Designed for use by libraries and higher-level abstractions only.","items":[[0,"state","gfx_core","Fixed-function hardware state.",null,null],[4,"FrontFace","gfx_core::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",0,null],[13,"CounterClockwise","","Counter-clockwise winding order.",0,null],[6,"LineWidth","","Width of a line. Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where the unit is the minimal difference in the depth value dictated by the precision of the depth buffer.",null,null],[3,"Offset","","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",2,null],[13,"Front","","",2,null],[13,"Back","","",2,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",3,null],[13,"Line","","Rasterize as a line with the given width.",3,null],[13,"Fill","","Rasterize as a face.",3,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster method to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",4,null],[12,"cull_face","","Which face should be culled.",4,null],[12,"method","","How to rasterize this primitive.",4,null],[12,"offset","","Any polygon offset to apply.",4,null],[12,"samples","","Multi-sampling mode.",4,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",5,null],[13,"Less","","`x < y`",5,null],[13,"LessEqual","","`x <= y`",5,null],[13,"Equal","","`x == y`",5,null],[13,"GreaterEqual","","`x >= y`",5,null],[13,"Greater","","`x > y`",5,null],[13,"NotEqual","","`x != y`",5,null],[13,"Always","","`true`",5,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",6,null],[13,"Zero","","Set the value in the stencil buffer to zero.",6,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",6,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",6,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",6,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",6,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",6,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",6,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",7,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they are read before doing the stencil test.",7,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",7,null],[12,"op_fail","","What operation to do if the stencil test fails.",7,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",7,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",7,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",8,null],[12,"back","","",8,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",9,null],[12,"write","","Specify whether to write to the depth buffer or not.",9,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination. Source and destination are multiplied by blending parameters before addition.",10,null],[13,"Sub","","Subtracts destination from source. Source and destination are multiplied by blending parameters before subtraction.",10,null],[13,"RevSub","","Subtracts source from destination. Source and destination are multiplied by blending parameters before subtraction.",10,null],[13,"Min","","Component-wise minimum value of source and destination. Blending parameters are ignored.",10,null],[13,"Max","","Component-wise maximum value of source and destination. Blending parameters are ignored.",10,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",11,null],[13,"SourceAlpha","","",11,null],[13,"DestColor","","",11,null],[13,"DestAlpha","","",11,null],[13,"ConstColor","","",11,null],[13,"ConstAlpha","","",11,null],[4,"Factor","","",null,null],[13,"Zero","","",12,null],[13,"One","","",12,null],[13,"SourceAlphaSaturated","","",12,null],[13,"ZeroPlus","","",12,null],[13,"OneMinus","","",12,null],[3,"BlendChannel","","",null,null],[12,"equation","","",13,null],[12,"source","","",13,null],[12,"destination","","",13,null],[3,"Blend","","",null,null],[12,"color","","",14,null],[12,"alpha","","",14,null],[3,"ColorMask","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",15,null],[12,"blend","","Optional blending.",15,null],[3,"RefValues","","The complete set of the rasterizer reference values. Switching these doesn't roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",16,null],[12,"blend","","Constant blend color.",16,null],[0,"target","gfx_core","Render target specification.",null,null],[6,"Layer","gfx_core::target","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Depth","","A single depth value from a depth buffer.",null,null],[6,"Stencil","","A single value from a stencil stencstencil buffer.",null,null],[3,"Rect","","A screen space rectangle",null,null],[12,"x","","",17,null],[12,"y","","",17,null],[12,"w","","",17,null],[12,"h","","",17,null],[6,"ColorValue","","A color with floating-point components.",null,null],[3,"Mirror","","Mirroring flags, used for blitting",null,null],[3,"VertexShader","gfx_core","",null,null],[3,"HullShader","","",null,null],[3,"DomainShader","","",null,null],[3,"GeometryShader","","",null,null],[3,"PixelShader","","",null,null],[3,"Capabilities","","Features that the device supports.",null,null],[12,"max_vertex_count","","",18,null],[12,"max_index_count","","",18,null],[12,"max_texture_size","","",18,null],[12,"max_patch_size","","",18,null],[12,"instance_base_supported","","",18,null],[12,"instance_call_supported","","",18,null],[12,"instance_rate_supported","","",18,null],[12,"vertex_base_supported","","",18,null],[12,"srgb_color_supported","","",18,null],[12,"constant_buffer_supported","","",18,null],[12,"unordered_access_view_supported","","",18,null],[12,"separate_blending_slots_supported","","",18,null],[12,"copy_buffer_supported","","",18,null],[3,"AdapterInfo","","Information about a backend adapater.",null,null],[12,"name","","Adapter name",19,null],[12,"vendor","","Vendor PCI id of the adapter",19,null],[12,"device","","PCI id of the adapter",19,null],[12,"software_rendering","","The device is based on a software rasterizer",19,null],[3,"Frame","","Handle to a backbuffer of the swapchain.",null,null],[4,"ShaderSet","","A complete set of shaders to link a program.",null,null],[13,"Simple","","Simple program: Vs-Ps",20,null],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",20,null],[13,"Tessellated","","Tessellated TODO: Tessellated, TessellatedGeometry, TransformFeedback",20,null],[4,"Primitive","","Describes what geometric primitives are created from vertex data.",null,null],[13,"PointList","","Each vertex represents a single point.",21,null],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d, e]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",21,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a \"path\" of lines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line line, and `b` and `c` form a line.",21,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`, `a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",21,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c, d]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",21,null],[13,"LineListAdjacency","","Each quadtruplet of vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d]`, `b` and `c` form a line, and `a` and `d` are the adjacent vertices.",21,null],[13,"LineStripAdjacency","","Every four consecutive vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d, e]`, `[a, b, c, d]` form a line segment with adjacency, and `[b, c, d, e]` form a line segment with adjacency.",21,null],[13,"TriangleListAdjacency","","Each sextuplet of vertices represent a single traingle with adjacency information. For example, with `[a, b, c, d, e, f]`, `a`, `c`, and `e` form a traingle, and `b`, `d`, and `f` are the adjacent vertices, where `b` is adjacent to the edge formed by `a` and `c`, `d` is adjacent to the edge `c` and `e`, and `f` is adjacent to the edge `e` and `a`.",21,null],[13,"TriangleStripAdjacency","","Every even-numbered vertex (every other starting from the first) represents an additional vertex for the triangle strip, while odd-numbered vertices (every other starting from the second) represent adjacent vertices. For example, with `[a, b, c, d, e, f, g, h]`, `[a, c, e, g]` form a triangle strip, and `[b, d, f, h]` are the adjacent vertices, where `b`, `d`, and `f` are adjacent to the first triangle in the strip, and `d`, `f`, and `h` are adjacent to the second.",21,null],[13,"PatchList","","Patch list, used with shaders capable of producing primitives on their own (tessellation)",21,null],[4,"IndexType","","A type of each index value in the slice's index buffer",null,null],[13,"U16","","",22,null],[13,"U32","","",22,null],[4,"SubmissionError","","",null,null],[13,"AccessOverlap","","",23,null],[0,"buffer","","Memory buffers",null,null],[3,"Raw","gfx_core::buffer","Untyped buffer",null,null],[3,"Info","","An information block that is immutable and associated to each buffer.",null,null],[12,"role","","Role",24,null],[12,"usage","","Usage hint",24,null],[12,"bind","","Bind flags",24,null],[12,"size","","Size in bytes",24,null],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers that you use via shader resource / unordered access views.",24,null],[4,"Role","","Role of the memory buffer.",null,null],[13,"Vertex","","Generic vertex buffer",25,null],[13,"Index","","Index buffer",25,null],[13,"Constant","","Constant buffer",25,null],[13,"Staging","","Staging buffer",25,null],[4,"CreationError","","Error creating a buffer.",null,null],[13,"UnsupportedBind","","Some of the bind flags are not supported.",26,null],[13,"Other","","Unknown other error.",26,null],[13,"UnsupportedUsage","","Usage mode is not supported",26,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_info","","Get buffer info",27,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"is_mapped","","Is this buffer mapped ?",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",27,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"role"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",25,null],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"role"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",24,null],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",26,null],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"command","gfx_core","Command Buffer device interface",null,null],[3,"AccessInfo","gfx_core::command","Informations about what is accessed by a bunch of commands.",null,null],[3,"AccessGuard","","",null,null],[3,"AccessGuardBuffers","","",null,null],[3,"AccessGuardBuffersChain","","",null,null],[4,"ClearColor","","A universal clear color supporting integet formats as well as the standard floating-point.",null,null],[13,"Float","","Standard floating-point vec4 color",28,null],[13,"Int","","Integer vector to clear ivec4 targets.",28,null],[13,"Uint","","Unsigned int vector to clear uvec4 targets.",28,null],[6,"InstanceParams","","Optional instance parameters: (instance count, buffer offset)",null,null],[6,"AccessInfoBuffers","","",null,null],[8,"Buffer","","An interface of the abstract command buffer. It collects commands in an efficient API-specific manner, to be ready for execution on the device.",null,null],[10,"reset","","Reset the command buffer contents, retain the allocated storage",29,{"inputs":[{"name":"self"}],"output":null}],[10,"bind_pipeline_state","","Bind a pipeline state object",29,null],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",29,{"inputs":[{"name":"self"},{"name":"vertexbufferset"}],"output":null}],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",29,null],[10,"bind_global_constant","","Bind a global constant",29,{"inputs":[{"name":"self"},{"name":"location"},{"name":"uniformvalue"}],"output":null}],[10,"bind_resource_views","","Bind a complete set of shader resource views",29,null],[10,"bind_unordered_views","","Bind a complete set of unordered access views",29,null],[10,"bind_samplers","","Bind a complete set of samplers",29,null],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple colors views and an optional depth/stencil view.",29,{"inputs":[{"name":"self"},{"name":"pixeltargetset"}],"output":null}],[10,"bind_index","","Bind an index buffer",29,null],[10,"set_scissor","","Set scissor rectangle",29,{"inputs":[{"name":"self"},{"name":"rect"}],"output":null}],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",29,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":null}],[10,"copy_buffer","","Copy part of a buffer to another",29,null],[10,"copy_buffer_to_texture","","Copy part of a buffer to a texture",29,null],[10,"copy_texture_to_buffer","","Copy part of a texture to a buffer",29,null],[10,"copy_texture_to_texture","","Copy part of one texture into another",29,{"inputs":[{"name":"self"},{"name":"texturecopyregion"},{"name":"texturecopyregion"}],"output":null}],[10,"update_buffer","","Update a vertex/index/uniform buffer",29,null],[10,"update_texture","","Update a texture",29,null],[10,"generate_mipmap","","",29,null],[10,"clear_color","","Clear color target",29,null],[10,"clear_depth_stencil","","",29,null],[10,"call_draw","","Draw a primitive",29,{"inputs":[{"name":"self"},{"name":"vertexcount"},{"name":"vertexcount"},{"generics":["instanceparams"],"name":"option"}],"output":null}],[10,"call_draw_indexed","","Draw a primitive with index buffer",29,{"inputs":[{"name":"self"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"vertexcount"},{"generics":["instanceparams"],"name":"option"}],"output":null}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"clearcolor"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"clearcolor"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"self"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"self"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"self"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"self"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,{"inputs":[{"name":"f32"}],"output":{"name":"clearcolor"}}],[11,"from","","",28,{"inputs":[{"name":"i32"}],"output":{"name":"clearcolor"}}],[11,"from","","",28,{"inputs":[{"name":"u32"}],"output":{"name":"clearcolor"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"accessinfo"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"accessinfo"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"accessinfo"}],"output":{"name":"bool"}}],[11,"new","","Creates empty access informations",30,{"inputs":[],"output":{"name":"self"}}],[11,"clear","","Clear access informations",30,{"inputs":[{"name":"self"}],"output":null}],[11,"buffer_read","","Register a buffer read access",30,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":null}],[11,"buffer_write","","Register a buffer write access",30,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":null}],[11,"mapped_reads","","Returns the mapped buffers that The GPU will read from",30,{"inputs":[{"name":"self"}],"output":{"name":"accessinfobuffers"}}],[11,"mapped_writes","","Returns the mapped buffers that The GPU will write to",30,{"inputs":[{"name":"self"}],"output":{"name":"accessinfobuffers"}}],[11,"has_mapped_reads","","Is there any mapped buffer reads ?",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_mapped_writes","","Is there any mapped buffer writes ?",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take_accesses","","Takes all the accesses necessary for submission",30,{"inputs":[{"name":"self"}],"output":{"generics":["accessguard"],"name":"submissionresult"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"access_mapped_reads","","Returns the mapped buffers that The GPU will read from, with exclusive acces to their mapping",31,{"inputs":[{"name":"self"}],"output":{"name":"accessguardbuffers"}}],[11,"access_mapped_writes","","Returns the mapped buffers that The GPU will write to, with exclusive acces to their mapping",31,{"inputs":[{"name":"self"}],"output":{"name":"accessguardbuffers"}}],[11,"access_mapped","","",31,{"inputs":[{"name":"self"}],"output":{"name":"accessguardbufferschain"}}],[11,"deref","","",31,null],[11,"drop","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"dummy","gfx_core","Dummy backend implementation to test the code for compile errors outside of the graphics development environment.",null,null],[3,"DummyDevice","gfx_core::dummy","Dummy device which does minimal work, just to allow testing gfx-rs apps for compilation.",null,null],[3,"DummyFence","","Dummy fence that does nothing.",null,null],[3,"DummyMapping","","Dummy mapping which will crash on use.",null,null],[3,"DummyCommandBuffer","","Dummy command buffer, which ignores all the calls.",null,null],[4,"DummyResources","","Dummy resources phantom type",null,null],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"dummyresources"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",34,null],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"dummyresources"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dummyfence"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"dummyfence"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dummymapping"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",36,null],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"dummymapping"}],"output":{"name":"bool"}}],[11,"new","","Create a new dummy device",37,{"inputs":[],"output":{"name":"dummydevice"}}],[11,"reset","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"bind_pipeline_state","","",38,null],[11,"bind_vertex_buffers","","",38,{"inputs":[{"name":"self"},{"generics":["dummyresources"],"name":"vertexbufferset"}],"output":null}],[11,"bind_constant_buffers","","",38,null],[11,"bind_global_constant","","",38,{"inputs":[{"name":"self"},{"name":"location"},{"name":"uniformvalue"}],"output":null}],[11,"bind_resource_views","","",38,null],[11,"bind_unordered_views","","",38,null],[11,"bind_samplers","","",38,null],[11,"bind_pixel_targets","","",38,{"inputs":[{"name":"self"},{"generics":["dummyresources"],"name":"pixeltargetset"}],"output":null}],[11,"bind_index","","",38,null],[11,"set_scissor","","",38,{"inputs":[{"name":"self"},{"name":"rect"}],"output":null}],[11,"set_ref_values","","",38,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":null}],[11,"copy_buffer","","",38,null],[11,"copy_buffer_to_texture","","",38,null],[11,"copy_texture_to_buffer","","",38,null],[11,"copy_texture_to_texture","","",38,{"inputs":[{"name":"self"},{"name":"texturecopyregion"},{"name":"texturecopyregion"}],"output":null}],[11,"update_buffer","","",38,null],[11,"update_texture","","",38,null],[11,"generate_mipmap","","",38,null],[11,"clear_color","","",38,null],[11,"clear_depth_stencil","","",38,null],[11,"call_draw","","",38,{"inputs":[{"name":"self"},{"name":"vertexcount"},{"name":"vertexcount"},{"generics":["instanceparams"],"name":"option"}],"output":null}],[11,"call_draw_indexed","","",38,{"inputs":[{"name":"self"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"vertexcount"},{"generics":["instanceparams"],"name":"option"}],"output":null}],[11,"get_capabilities","","",37,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[11,"pin_submitted_resources","","",37,{"inputs":[{"name":"self"},{"name":"manager"}],"output":null}],[11,"submit","","",37,{"inputs":[{"name":"self"},{"name":"dummycommandbuffer"},{"name":"accessinfo"}],"output":{"name":"submissionresult"}}],[11,"fenced_submit","","",37,null],[11,"wait_fence","","",37,{"inputs":[{"name":"self"},{"name":"fence"}],"output":null}],[11,"cleanup","","",37,{"inputs":[{"name":"self"}],"output":null}],[0,"factory","gfx_core","Resource factory",null,null],[4,"ResourceViewError","gfx_core::factory","Error creating either a ShaderResourceView, or UnorderedAccessView.",null,null],[13,"NoBindFlag","","The corresponding bind flag is not present in the texture.",39,null],[13,"Channel","","Selected channel type is not supported for this texture.",39,null],[13,"Layer","","Selected layer can not be viewed for this texture.",39,null],[13,"Unsupported","","The backend was refused for some reason.",39,null],[4,"TargetViewError","","Error creating either a RenderTargetView, or DepthStencilView.",null,null],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag is not present in the texture.",40,null],[13,"Level","","Selected mip level doesn't exist.",40,null],[13,"Layer","","Selected array layer doesn't exist.",40,null],[13,"Channel","","Selected channel type is not supported for this texture.",40,null],[13,"Unsupported","","The backend was refused for some reason.",40,null],[13,"NotDetached","","The RTV cannot be changed due to the references to it existing.",40,null],[4,"CombinedError","","An error from creating textures with views at the same time.",null,null],[13,"Texture","","Failed to create the raw texture.",41,null],[13,"Resource","","Failed to create SRV or UAV.",41,null],[13,"Target","","Failed to create RTV or DSV.",41,null],[8,"Factory","","Overview",null,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being used.",42,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[10,"create_buffer_raw","","",42,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"generics":["rawbuffer","creationerror"],"name":"result"}}],[10,"create_buffer_immutable_raw","","",42,null],[11,"create_buffer_immutable","","",42,null],[11,"create_buffer","","",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"role"},{"name":"usage"},{"name":"bind"}],"output":{"generics":["buffer","creationerror"],"name":"result"}}],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the `FactoryExt` trait and `pso` module, both in the `gfx` crate.",42,{"inputs":[{"name":"self"},{"name":"program"},{"name":"descriptor"}],"output":{"generics":["rawpipelinestate","creationerror"],"name":"result"}}],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",42,{"inputs":[{"name":"self"},{"name":"shaderset"}],"output":{"generics":["program","createprogramerror"],"name":"result"}}],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader `Program`.",42,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",42,null],[11,"create_shader_hull","","Compiles a `HullShader` from source.",42,null],[11,"create_shader_domain","","Compiles a `VertexShader` from source.",42,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",42,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment shader.",42,null],[10,"create_sampler","","",42,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"read_mapping","","Acquire a mapping Reader",42,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"generics":["reader","error"],"name":"result"}}],[10,"write_mapping","","Acquire a mapping Writer",42,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"generics":["writer","error"],"name":"result"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint, required to assist backends that have no concept of typeless formats (OpenGL). The initial data, if given, has to be provided for all mip levels and slices: Slice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",42,{"inputs":[{"name":"self"},{"name":"info"},{"generics":["channeltype"],"name":"option"},{"name":"option"}],"output":{"generics":["rawtexture","creationerror"],"name":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",42,{"inputs":[{"name":"self"},{"name":"rawbuffer"},{"name":"format"}],"output":{"generics":["rawshaderresourceview","resourceviewerror"],"name":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",42,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"generics":["rawunorderedaccessview","resourceviewerror"],"name":"result"}}],[10,"view_texture_as_shader_resource_raw","","",42,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"resourcedesc"}],"output":{"generics":["rawshaderresourceview","resourceviewerror"],"name":"result"}}],[10,"view_texture_as_unordered_access_raw","","",42,{"inputs":[{"name":"self"},{"name":"rawtexture"}],"output":{"generics":["rawunorderedaccessview","resourceviewerror"],"name":"result"}}],[10,"view_texture_as_render_target_raw","","",42,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"renderdesc"}],"output":{"generics":["rawrendertargetview","targetviewerror"],"name":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",42,{"inputs":[{"name":"self"},{"name":"rawtexture"},{"name":"depthstencildesc"}],"output":{"generics":["rawdepthstencilview","targetviewerror"],"name":"result"}}],[11,"create_texture","","",42,{"inputs":[{"name":"self"},{"name":"kind"},{"name":"level"},{"name":"bind"},{"name":"usage"},{"generics":["channeltype"],"name":"option"}],"output":{"generics":["texture","creationerror"],"name":"result"}}],[11,"view_buffer_as_shader_resource","","",42,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"generics":["shaderresourceview","resourceviewerror"],"name":"result"}}],[11,"view_buffer_as_unordered_access","","",42,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"generics":["unorderedaccessview","resourceviewerror"],"name":"result"}}],[11,"view_texture_as_shader_resource","","",42,null],[11,"view_texture_as_unordered_access","","",42,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"generics":["unorderedaccessview","resourceviewerror"],"name":"result"}}],[11,"view_texture_as_render_target","","",42,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"level"},{"generics":["layer"],"name":"option"}],"output":{"generics":["rendertargetview","targetviewerror"],"name":"result"}}],[11,"view_texture_as_depth_stencil","","",42,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"level"},{"generics":["layer"],"name":"option"},{"name":"depthstencilflags"}],"output":{"generics":["depthstencilview","targetviewerror"],"name":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",42,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"generics":["depthstencilview","targetviewerror"],"name":"result"}}],[11,"create_texture_immutable_u8","","",42,null],[11,"create_texture_immutable","","",42,null],[11,"create_render_target","","",42,{"inputs":[{"name":"self"},{"name":"size"},{"name":"size"}],"output":{"generics":["combinederror"],"name":"result"}}],[11,"create_depth_stencil","","",42,{"inputs":[{"name":"self"},{"name":"size"},{"name":"size"}],"output":{"generics":["combinederror"],"name":"result"}}],[11,"create_depth_stencil_view_only","","",42,{"inputs":[{"name":"self"},{"name":"size"},{"name":"size"}],"output":{"generics":["depthstencilview","combinederror"],"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"resourceviewerror"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"resourceviewerror"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"resourceviewerror"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"targetviewerror"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"targetviewerror"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"targetviewerror"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",40,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"combinederror"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"combinederror"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"combinederror"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",41,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",41,{"inputs":[{"name":"creationerror"}],"output":{"name":"combinederror"}}],[11,"from","","",41,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"combinederror"}}],[11,"from","","",41,{"inputs":[{"name":"targetviewerror"}],"output":{"name":"combinederror"}}],[0,"format","gfx_core","Universal format specification. Applicable to textures, views, and vertex buffers.",null,null],[3,"Swizzle","gfx_core::format","Channel swizzle configuration for the resource views. Note: It's not currently mirrored at compile-time, thus providing less safety and convenience.",null,null],[12,"0","","",43,null],[12,"1","","",43,null],[12,"2","","",43,null],[12,"3","","",43,null],[3,"Format","","Complete run-time surface format.",null,null],[12,"0","","",44,null],[12,"1","","",44,null],[3,"U8Norm","","",null,null],[12,"0","","",45,null],[3,"I8Norm","","",null,null],[12,"0","","",46,null],[3,"U16Norm","","",null,null],[12,"0","","",47,null],[3,"I16Norm","","",null,null],[12,"0","","",48,null],[3,"F16","","",null,null],[12,"0","","",49,null],[4,"ChannelType","","Type of a surface channel. This is how we interpret the storage allocated with `SurfaceType`.",null,null],[13,"Int","","",50,null],[13,"Uint","","",50,null],[13,"Inorm","","",50,null],[13,"Unorm","","",50,null],[13,"Float","","",50,null],[13,"Srgb","","",50,null],[4,"Int","","",null,null],[4,"Uint","","",null,null],[4,"Inorm","","",null,null],[4,"Unorm","","",null,null],[4,"Float","","",null,null],[4,"Srgb","","",null,null],[4,"SurfaceType","","Type of the allocated texture surface. It is supposed to only carry information about the number of bits per each channel. The actual types are up to the views to decide and interpret. The actual components are up to the swizzle to define.",null,null],[13,"R4_G4","","",51,null],[13,"R4_G4_B4_A4","","",51,null],[13,"R5_G5_B5_A1","","",51,null],[13,"R5_G6_B5","","",51,null],[13,"R8","","",51,null],[13,"R8_G8","","",51,null],[13,"R8_G8_B8_A8","","",51,null],[13,"R10_G10_B10_A2","","",51,null],[13,"R11_G11_B10","","",51,null],[13,"R16","","",51,null],[13,"R16_G16","","",51,null],[13,"R16_G16_B16","","",51,null],[13,"R16_G16_B16_A16","","",51,null],[13,"R32","","",51,null],[13,"R32_G32","","",51,null],[13,"R32_G32_B32","","",51,null],[13,"R32_G32_B32_A32","","",51,null],[13,"B8_G8_R8_A8","","",51,null],[13,"D16","","",51,null],[13,"D24","","",51,null],[13,"D24_S8","","",51,null],[13,"D32","","",51,null],[4,"R4_G4","","",null,null],[4,"R4_G4_B4_A4","","",null,null],[4,"R5_G5_B5_A1","","",null,null],[4,"R5_G6_B5","","",null,null],[4,"R8","","",null,null],[4,"R8_G8","","",null,null],[4,"R8_G8_B8_A8","","",null,null],[4,"R10_G10_B10_A2","","",null,null],[4,"R11_G11_B10","","",null,null],[4,"R16","","",null,null],[4,"R16_G16","","",null,null],[4,"R16_G16_B16","","",null,null],[4,"R16_G16_B16_A16","","",null,null],[4,"R32","","",null,null],[4,"R32_G32","","",null,null],[4,"R32_G32_B32","","",null,null],[4,"R32_G32_B32_A32","","",null,null],[4,"B8_G8_R8_A8","","",null,null],[4,"D16","","",null,null],[4,"D24","","",null,null],[4,"D24_S8","","",null,null],[4,"D32","","",null,null],[4,"ChannelSource","","Source channel in a swizzle configuration. Some may redirect onto different physical channels, some may be hardcoded to 0 or 1.",null,null],[13,"Zero","","",52,null],[13,"One","","",52,null],[13,"X","","",52,null],[13,"Y","","",52,null],[13,"Z","","",52,null],[13,"W","","",52,null],[6,"Vec1","","Abstracted 1-element container for macro internal use",null,null],[6,"Vec2","","Abstracted 2-element container for macro internal use",null,null],[6,"Vec3","","Abstracted 3-element container for macro internal use",null,null],[6,"Vec4","","Abstracted 4-element container for macro internal use",null,null],[6,"Rgba8","","Standard 8bits RGBA format.",null,null],[6,"Srgba8","","Standard 8bit gamma transforming RGB format.",null,null],[6,"Rgb10a2F","","Standard HDR floating-point format with 10 bits for RGB components and 2 bits for the alpha.",null,null],[6,"Rgba16F","","Standard 16-bit floating-point RGBA format.",null,null],[6,"Rgba32F","","Standard 32-bit floating-point RGBA format.",null,null],[6,"Bgra8","","Standard 8bits BGRA format.",null,null],[6,"Depth","","Standard 24-bit depth format.",null,null],[6,"DepthStencil","","Standard 24-bit depth format with 8-bit stencil.",null,null],[6,"Depth32F","","Standard 32-bit floating-point depth format.",null,null],[8,"SurfaceTyped","","Compile-time surface type trait.",null,null],[16,"DataType","","The corresponding data type to be passed from CPU.",53,null],[10,"get_surface_type","","Return the run-time value of the type.",53,{"inputs":[],"output":{"name":"surfacetype"}}],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",null,null],[8,"TextureSurface","","An ability of a surface type to be used for textures.",null,null],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",null,null],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",null,null],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",null,null],[8,"ChannelTyped","","Compile-time channel type trait.",null,null],[16,"ShaderType","","Shader-visible type that corresponds to this channel. For example, normalized integers are visible as floats.",54,null],[10,"get_channel_type","","Return the run-time value of the type.",54,{"inputs":[],"output":{"name":"channeltype"}}],[8,"TextureChannel","","An ability of a channel type to be used for textures.",null,null],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",null,null],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",null,null],[8,"Formatted","","Compile-time full format trait.",null,null],[16,"Surface","","Associated surface type.",55,null],[16,"Channel","","Associated channel type.",55,null],[16,"View","","Shader view type of this format.",55,null],[11,"get_format","","Return the run-time value of the type.",55,{"inputs":[],"output":{"name":"format"}}],[8,"BufferFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthFormat","","Ability to be used for depth targets.",null,null],[8,"StencilFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",null,null],[8,"TextureFormat","","Ability to be used for textures.",null,null],[8,"RenderFormat","","Ability to be used for render targets.",null,null],[8,"BlendFormat","","Ability to be used for blended render targets.",null,null],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"channeltype"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"cmp","","",50,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"name":"ordering"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",50,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"int"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"int"}],"output":{"name":"ordering"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"int"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"int"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_channel_type","","",56,{"inputs":[],"output":{"name":"channeltype"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"uint"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"ordering"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_channel_type","","",57,{"inputs":[],"output":{"name":"channeltype"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"inorm"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",58,null],[11,"cmp","","",58,{"inputs":[{"name":"self"},{"name":"inorm"}],"output":{"name":"ordering"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"inorm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",58,{"inputs":[{"name":"self"},{"name":"inorm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_channel_type","","",58,{"inputs":[],"output":{"name":"channeltype"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"unorm"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",59,null],[11,"cmp","","",59,{"inputs":[{"name":"self"},{"name":"unorm"}],"output":{"name":"ordering"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"unorm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"self"},{"name":"unorm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_channel_type","","",59,{"inputs":[],"output":{"name":"channeltype"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"float"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"cmp","","",60,{"inputs":[{"name":"self"},{"name":"float"}],"output":{"name":"ordering"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"float"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"self"},{"name":"float"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_channel_type","","",60,{"inputs":[],"output":{"name":"channeltype"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"srgb"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",61,null],[11,"cmp","","",61,{"inputs":[{"name":"self"},{"name":"srgb"}],"output":{"name":"ordering"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"srgb"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"self"},{"name":"srgb"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_channel_type","","",61,{"inputs":[],"output":{"name":"channeltype"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"surfacetype"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"cmp","","",51,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"name":"ordering"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_total_bits","","Return the total number of bits for this format.",51,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_alpha_stencil_bits","","Return the number of bits allocated for alpha and stencil.",51,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"r4_g4"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"cmp","","",62,{"inputs":[{"name":"self"},{"name":"r4_g4"}],"output":{"name":"ordering"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"r4_g4"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"self"},{"name":"r4_g4"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",62,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"r4_g4_b4_a4"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"cmp","","",63,{"inputs":[{"name":"self"},{"name":"r4_g4_b4_a4"}],"output":{"name":"ordering"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"r4_g4_b4_a4"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"self"},{"name":"r4_g4_b4_a4"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",63,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"r5_g5_b5_a1"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",64,null],[11,"cmp","","",64,{"inputs":[{"name":"self"},{"name":"r5_g5_b5_a1"}],"output":{"name":"ordering"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"r5_g5_b5_a1"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",64,{"inputs":[{"name":"self"},{"name":"r5_g5_b5_a1"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",64,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"r5_g6_b5"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",65,null],[11,"cmp","","",65,{"inputs":[{"name":"self"},{"name":"r5_g6_b5"}],"output":{"name":"ordering"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"r5_g6_b5"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",65,{"inputs":[{"name":"self"},{"name":"r5_g6_b5"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",65,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"r8"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"cmp","","",66,{"inputs":[{"name":"self"},{"name":"r8"}],"output":{"name":"ordering"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"r8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",66,{"inputs":[{"name":"self"},{"name":"r8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",66,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"r8_g8"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"cmp","","",67,{"inputs":[{"name":"self"},{"name":"r8_g8"}],"output":{"name":"ordering"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"r8_g8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"self"},{"name":"r8_g8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",67,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"r8_g8_b8_a8"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"cmp","","",68,{"inputs":[{"name":"self"},{"name":"r8_g8_b8_a8"}],"output":{"name":"ordering"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"r8_g8_b8_a8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"self"},{"name":"r8_g8_b8_a8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",68,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"r10_g10_b10_a2"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"cmp","","",69,{"inputs":[{"name":"self"},{"name":"r10_g10_b10_a2"}],"output":{"name":"ordering"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"r10_g10_b10_a2"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"self"},{"name":"r10_g10_b10_a2"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",69,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"r11_g11_b10"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"cmp","","",70,{"inputs":[{"name":"self"},{"name":"r11_g11_b10"}],"output":{"name":"ordering"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"r11_g11_b10"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",70,{"inputs":[{"name":"self"},{"name":"r11_g11_b10"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",70,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"r16"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"cmp","","",71,{"inputs":[{"name":"self"},{"name":"r16"}],"output":{"name":"ordering"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"r16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"self"},{"name":"r16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",71,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"r16_g16"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",72,null],[11,"cmp","","",72,{"inputs":[{"name":"self"},{"name":"r16_g16"}],"output":{"name":"ordering"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"r16_g16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"self"},{"name":"r16_g16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",72,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"r16_g16_b16"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",73,null],[11,"cmp","","",73,{"inputs":[{"name":"self"},{"name":"r16_g16_b16"}],"output":{"name":"ordering"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"r16_g16_b16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",73,{"inputs":[{"name":"self"},{"name":"r16_g16_b16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",73,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"r16_g16_b16_a16"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",74,null],[11,"cmp","","",74,{"inputs":[{"name":"self"},{"name":"r16_g16_b16_a16"}],"output":{"name":"ordering"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"r16_g16_b16_a16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"r16_g16_b16_a16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",74,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"r32"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",75,null],[11,"cmp","","",75,{"inputs":[{"name":"self"},{"name":"r32"}],"output":{"name":"ordering"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"r32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",75,{"inputs":[{"name":"self"},{"name":"r32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",75,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"r32_g32"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",76,null],[11,"cmp","","",76,{"inputs":[{"name":"self"},{"name":"r32_g32"}],"output":{"name":"ordering"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"r32_g32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",76,{"inputs":[{"name":"self"},{"name":"r32_g32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",76,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"r32_g32_b32"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",77,null],[11,"cmp","","",77,{"inputs":[{"name":"self"},{"name":"r32_g32_b32"}],"output":{"name":"ordering"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"r32_g32_b32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",77,{"inputs":[{"name":"self"},{"name":"r32_g32_b32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",77,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"r32_g32_b32_a32"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",78,null],[11,"cmp","","",78,{"inputs":[{"name":"self"},{"name":"r32_g32_b32_a32"}],"output":{"name":"ordering"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"r32_g32_b32_a32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",78,{"inputs":[{"name":"self"},{"name":"r32_g32_b32_a32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",78,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"b8_g8_r8_a8"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",79,null],[11,"cmp","","",79,{"inputs":[{"name":"self"},{"name":"b8_g8_r8_a8"}],"output":{"name":"ordering"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"b8_g8_r8_a8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",79,{"inputs":[{"name":"self"},{"name":"b8_g8_r8_a8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",79,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"d16"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",80,null],[11,"cmp","","",80,{"inputs":[{"name":"self"},{"name":"d16"}],"output":{"name":"ordering"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"d16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",80,{"inputs":[{"name":"self"},{"name":"d16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",80,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"d24"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"cmp","","",81,{"inputs":[{"name":"self"},{"name":"d24"}],"output":{"name":"ordering"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"d24"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"self"},{"name":"d24"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",81,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"d24_s8"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[11,"cmp","","",82,{"inputs":[{"name":"self"},{"name":"d24_s8"}],"output":{"name":"ordering"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"d24_s8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",82,{"inputs":[{"name":"self"},{"name":"d24_s8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",82,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"d32"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",83,null],[11,"cmp","","",83,{"inputs":[{"name":"self"},{"name":"d32"}],"output":{"name":"ordering"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"d32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"self"},{"name":"d32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"get_surface_type","","",83,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"channelsource"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",52,null],[11,"cmp","","",52,{"inputs":[{"name":"self"},{"name":"channelsource"}],"output":{"name":"ordering"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"channelsource"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"self"},{"name":"channelsource"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"swizzle"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"cmp","","",43,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"ordering"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"self"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"new","","Create a new swizzle where each channel is unmapped.",43,{"inputs":[],"output":{"name":"swizzle"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"ordering"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"u8norm"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"cmp","","",45,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"ordering"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",45,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"le","","",45,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"gt","","",45,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"ge","","",45,{"inputs":[{"name":"self"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"from","","",45,{"inputs":[{"name":"u8"}],"output":{"name":"u8norm"}}],[11,"cast2","","Convert a 2-element slice.",45,null],[11,"cast3","","Convert a 3-element slice.",45,null],[11,"cast4","","Convert a 4-element slice.",45,null],[11,"cast_slice","","Convert a generic slice by transmutation.",45,null],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i8norm"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",46,null],[11,"cmp","","",46,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"ordering"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",46,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"le","","",46,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"gt","","",46,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"ge","","",46,{"inputs":[{"name":"self"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"from","","",46,{"inputs":[{"name":"i8"}],"output":{"name":"i8norm"}}],[11,"cast2","","Convert a 2-element slice.",46,null],[11,"cast3","","Convert a 3-element slice.",46,null],[11,"cast4","","Convert a 4-element slice.",46,null],[11,"cast_slice","","Convert a generic slice by transmutation.",46,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u16norm"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",47,null],[11,"cmp","","",47,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"ordering"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",47,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",47,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"le","","",47,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"gt","","",47,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"ge","","",47,{"inputs":[{"name":"self"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"from","","",47,{"inputs":[{"name":"u16"}],"output":{"name":"u16norm"}}],[11,"cast2","","Convert a 2-element slice.",47,null],[11,"cast3","","Convert a 3-element slice.",47,null],[11,"cast4","","Convert a 4-element slice.",47,null],[11,"cast_slice","","Convert a generic slice by transmutation.",47,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"i16norm"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",48,null],[11,"cmp","","",48,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"ordering"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"self"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"from","","",48,{"inputs":[{"name":"i16"}],"output":{"name":"i16norm"}}],[11,"cast2","","Convert a 2-element slice.",48,null],[11,"cast3","","Convert a 3-element slice.",48,null],[11,"cast4","","Convert a 4-element slice.",48,null],[11,"cast_slice","","Convert a generic slice by transmutation.",48,null],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"f16"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"cmp","","",49,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"ordering"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",49,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"le","","",49,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"gt","","",49,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"ge","","",49,{"inputs":[{"name":"self"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"from","","",49,{"inputs":[{"name":"u16"}],"output":{"name":"f16"}}],[11,"cast2","","Convert a 2-element slice.",49,null],[11,"cast3","","Convert a 3-element slice.",49,null],[11,"cast4","","Convert a 4-element slice.",49,null],[11,"cast_slice","","Convert a generic slice by transmutation.",49,null],[0,"handle","gfx_core","Resource handles",null,null],[3,"RawBuffer","gfx_core::handle","Untyped buffer handle",null,null],[3,"Buffer","","Type-safe buffer handle",null,null],[3,"Shader","","Shader Handle",null,null],[3,"Program","","Program Handle",null,null],[3,"RawPipelineState","","Raw Pipeline State Handle",null,null],[3,"RawTexture","","Raw texture handle",null,null],[3,"Texture","","Typed texture object",null,null],[3,"RawShaderResourceView","","Raw Shader Resource View Handle",null,null],[3,"ShaderResourceView","","Type-safe Shader Resource View Handle",null,null],[3,"RawUnorderedAccessView","","Raw Unordered Access View Handle",null,null],[3,"UnorderedAccessView","","Type-safe Unordered Access View Handle",null,null],[3,"RawRenderTargetView","","Raw RTV",null,null],[3,"RawDepthStencilView","","Raw DSV",null,null],[3,"RenderTargetView","","Typed RTV",null,null],[3,"DepthStencilView","","Typed DSV",null,null],[3,"Sampler","","Sampler Handle",null,null],[3,"Fence","","Fence Handle",null,null],[3,"Manager","","Stores reference-counted resources used in a command buffer. Seals actual resource names behind the interface, automatically referencing them both by the Factory on resource creation and the Renderer during CommandBuffer population.",null,null],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"rawbuffer"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",84,null],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"deref","","",84,null],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",85,{"inputs":[{"name":"self"},{"name":"__hrt"}],"output":null}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"get_info","","Get the associated information about the buffer",85,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"len","","Get the number of elements in the buffer.",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"shader"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",86,null],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"program"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",87,null],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"program"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"program"}],"output":{"name":"bool"}}],[11,"deref","","",87,null],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"rawpipelinestate"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",88,null],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"rawpipelinestate"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"rawpipelinestate"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"rawtexture"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"rawtexture"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"rawtexture"}],"output":{"name":"bool"}}],[11,"deref","","",89,null],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",90,{"inputs":[{"name":"self"},{"name":"__hrs"}],"output":null}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"get_info","","Get texture descriptor",90,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"rawshaderresourceview"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",91,null],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"rawshaderresourceview"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"rawshaderresourceview"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",92,{"inputs":[{"name":"self"},{"name":"__hrt"}],"output":null}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"rawunorderedaccessview"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",93,null],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"rawunorderedaccessview"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"rawunorderedaccessview"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",94,{"inputs":[{"name":"self"},{"name":"__hrt"}],"output":null}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"rawrendertargetview"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",95,null],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"rawrendertargetview"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"rawrendertargetview"}],"output":{"name":"bool"}}],[11,"get_dimensions","","Get target dimensions",95,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"get_texture","","Get the associated texture",95,{"inputs":[{"name":"self"}],"output":{"name":"rawtexture"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"rawdepthstencilview"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",96,null],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"rawdepthstencilview"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"rawdepthstencilview"}],"output":{"name":"bool"}}],[11,"get_dimensions","","Get target dimensions",96,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"get_texture","","Get the associated texture",96,{"inputs":[{"name":"self"}],"output":{"name":"rawtexture"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",97,{"inputs":[{"name":"self"},{"name":"__hrt"}],"output":null}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"get_dimensions","","Get target dimensions",97,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",98,{"inputs":[{"name":"self"},{"name":"__hrt"}],"output":null}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"get_dimensions","","Get target dimensions",98,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",99,null],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"get_info","","Get sampler info",99,{"inputs":[{"name":"self"}],"output":{"name":"samplerinfo"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"fence"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",100,null],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new handle manager",101,{"inputs":[],"output":{"name":"manager"}}],[11,"clear","","Clear all references",101,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","Extend with all references of another handle manager",101,{"inputs":[{"name":"self"},{"name":"manager"}],"output":null}],[11,"count","","Count the total number of referenced resources",101,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ref_buffer","","Reference a buffer",101,null],[11,"ref_shader","","Reference a shader",101,null],[11,"ref_program","","Reference a program",101,null],[11,"ref_pso","","Reference a pipeline state object",101,null],[11,"ref_texture","","Reference a texture",101,null],[11,"ref_srv","","Reference a shader resource view",101,null],[11,"ref_uav","","Reference an unordered access view",101,null],[11,"ref_rtv","","Reference an RTV",101,null],[11,"ref_dsv","","Reference a DSV",101,null],[11,"ref_sampler","","Reference a sampler",101,null],[11,"ref_fence","","Reference a fence",101,null],[0,"mapping","gfx_core","Memory mapping",null,null],[3,"Reader","gfx_core::mapping","Mapping reader",null,null],[3,"Writer","","Mapping writer. Currently is not possible to make write-only slice so while it is technically possible to read from Writer, it will lead to an undefined behavior. Please do not read from it.",null,null],[4,"Error","","Error accessing a mapping.",null,null],[13,"InvalidAccess","","The requested mapping access did not match the expected usage.",102,null],[13,"AccessOverlap","","The requested mapping access overlaps with another.",102,null],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",102,null],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",102,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",103,null],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",104,null],[11,"deref_mut","","",104,null],[0,"memory","gfx_core","Types to describe the properties of memory allocated for gfx resources.",null,null],[3,"Access","gfx_core::memory","Flags providing information about the type of memory access to a resource.",null,null],[3,"Bind","","Flags providing information about the usage of a resource.",null,null],[4,"Usage","","How this memory will be used regarding GPU-CPU data flow.",null,null],[13,"Data","","Full speed GPU access. Optimal for render targets and resourced memory.",105,null],[13,"Dynamic","","CPU to GPU data flow with update commands. Used for dynamic buffer data, typically constant buffers.",105,null],[13,"Upload","","CPU to GPU data flow with mapping. Used for staging for upload to GPU.",105,null],[13,"Download","","GPU to CPU data flow with mapping. Used for staging for download from GPU.",105,null],[5,"cast_slice","","Cast a slice from one POD type to another.",null,null],[8,"Pod","","A trait for plain-old-data types.",null,null],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"usage"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",105,null],[11,"cmp","","",105,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"ordering"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",105,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"access"}}],[11,"partial_cmp","","",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"le","","",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"gt","","",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"ge","","",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"cmp","","",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"ordering"}}],[11,"hash","","",106,null],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"READ","","Read access",106,null],[18,"WRITE","","Write access",106,null],[18,"RW","","Full access",106,null],[11,"empty","","Returns an empty set of flags.",106,{"inputs":[],"output":{"name":"access"}}],[11,"all","","Returns the set containing all flags.",106,{"inputs":[],"output":{"name":"access"}}],[11,"bits","","Returns the raw value of the flags currently stored.",106,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",106,{"inputs":[{"name":"u8"}],"output":{"generics":["access"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",106,{"inputs":[{"name":"u8"}],"output":{"name":"access"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",106,{"inputs":[{"name":"self"},{"name":"access"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"access"}}],[11,"bitor_assign","","Adds the set of flags.",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"access"}}],[11,"bitxor_assign","","Toggles the set of flags.",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"access"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":{"name":"access"}}],[11,"sub_assign","","Disables all flags enabled in the set.",106,{"inputs":[{"name":"self"},{"name":"access"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",106,{"inputs":[{"name":"self"}],"output":{"name":"access"}}],[11,"extend","","",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",106,{"inputs":[{"name":"t"}],"output":{"name":"access"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bind"}}],[11,"partial_cmp","","",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"le","","",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"gt","","",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"ge","","",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"cmp","","",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"ordering"}}],[11,"hash","","",107,null],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"RENDER_TARGET","","Can be rendered into.",107,null],[18,"DEPTH_STENCIL","","Can serve as a depth/stencil target.",107,null],[18,"SHADER_RESOURCE","","Can be bound to the shader for reading.",107,null],[18,"UNORDERED_ACCESS","","Can be bound to the shader for writing.",107,null],[18,"TRANSFER_SRC","","Can be transfered from.",107,null],[18,"TRANSFER_DST","","Can be transfered into.",107,null],[11,"empty","","Returns an empty set of flags.",107,{"inputs":[],"output":{"name":"bind"}}],[11,"all","","Returns the set containing all flags.",107,{"inputs":[],"output":{"name":"bind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",107,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",107,{"inputs":[{"name":"u8"}],"output":{"generics":["bind"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",107,{"inputs":[{"name":"u8"}],"output":{"name":"bind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",107,{"inputs":[{"name":"self"},{"name":"bind"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitor_assign","","Adds the set of flags.",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitxor_assign","","Toggles the set of flags.",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"sub_assign","","Disables all flags enabled in the set.",107,{"inputs":[{"name":"self"},{"name":"bind"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",107,{"inputs":[{"name":"self"}],"output":{"name":"bind"}}],[11,"extend","","",107,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",107,{"inputs":[{"name":"t"}],"output":{"name":"bind"}}],[11,"is_mutable","","Is this memory bound to be mutated ?",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"pso","gfx_core","Raw Pipeline State Objects",null,null],[3,"CreationError","gfx_core::pso","Error types happening upon PSO creation on the device side.",null,null],[3,"ColorInfo","","Color output configuration of the PSO.",null,null],[12,"mask","","Color channel mask",108,null],[12,"color","","Optional color blending",108,null],[12,"alpha","","Optional alpha blending",108,null],[3,"DepthStencilInfo","","Depth and stencil state of the PSO.",null,null],[12,"depth","","Optional depth test configuration",109,null],[12,"front","","Optional stencil test on the front faces",109,null],[12,"back","","Optional stencil test on the back faces",109,null],[3,"Element","","A struct element descriptor.",null,null],[12,"format","","Element format",110,null],[12,"offset","","Offset from the beginning of the container, in bytes",110,null],[3,"VertexBufferDesc","","Vertex buffer descriptor",null,null],[12,"stride","","Total container size, in bytes",111,null],[12,"rate","","Rate of the input for the given buffer",111,null],[3,"Descriptor","","All the information surrounding a shader program that is required for PSO creation, including the formats of vertex buffers and pixel targets;",null,null],[12,"primitive","","Type of the primitive",112,null],[12,"rasterizer","","Rasterizer setup",112,null],[12,"scissor","","Enable scissor test",112,null],[12,"vertex_buffers","","Vertex buffers",112,null],[12,"attributes","","Vertex attributes",112,null],[12,"constant_buffers","","Constant buffers",112,null],[12,"resource_views","","Shader resource views",112,null],[12,"unordered_views","","Unordered access views",112,null],[12,"samplers","","Samplers",112,null],[12,"color_targets","","Render target views (RTV)",112,null],[12,"depth_stencil","","Depth stencil view (DSV)",112,null],[3,"VertexBufferSet","","A complete set of vertex buffers to be used for vertex import in PSO.",null,null],[12,"0","","Array of buffer handles with offsets in them",113,null],[3,"ConstantBufferParam","","A constant buffer run-time parameter for PSO.",null,null],[12,"0","","",114,null],[12,"1","","",114,null],[12,"2","","",114,null],[3,"ResourceViewParam","","A shader resource view (SRV) run-time parameter for PSO.",null,null],[12,"0","","",115,null],[12,"1","","",115,null],[12,"2","","",115,null],[3,"UnorderedViewParam","","An unordered access view (UAV) run-time parameter for PSO.",null,null],[12,"0","","",116,null],[12,"1","","",116,null],[12,"2","","",116,null],[3,"SamplerParam","","A sampler run-time parameter for PSO.",null,null],[12,"0","","",117,null],[12,"1","","",117,null],[12,"2","","",117,null],[3,"PixelTargetSet","","A complete set of render targets to be used for pixel export in PSO.",null,null],[12,"colors","","Array of color target views",118,null],[12,"depth","","Depth target view",118,null],[12,"stencil","","Stencil target view",118,null],[12,"dimensions","","Rendering dimensions",118,null],[6,"BufferOffset","","An offset inside a vertex buffer, in bytes.",null,null],[6,"BufferIndex","","Index of a vertex buffer.",null,null],[6,"ElemOffset","","Offset of an attribute from the start of the buffer, in bytes",null,null],[6,"ElemStride","","Offset between attribute values, in bytes",null,null],[6,"InstanceRate","","The number of instances between each subsequent attribute value",null,null],[6,"AttributeDesc","","PSO vertex attribute descriptor",null,null],[6,"ConstantBufferDesc","","PSO constant buffer descriptor",null,null],[6,"ResourceViewDesc","","PSO shader resource view descriptor",null,null],[6,"UnorderedViewDesc","","PSO unordered access view descriptor",null,null],[6,"SamplerDesc","","PSO sampler descriptor",null,null],[6,"ColorTargetDesc","","PSO color target descriptor",null,null],[6,"DepthStencilDesc","","PSO depth-stencil target descriptor",null,null],[17,"MAX_VERTEX_BUFFERS","","Maximum number of vertex buffers used in a PSO definition.",null,null],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",119,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"colorinfo"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",108,null],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"colorinfo"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"colorinfo"}],"output":{"name":"bool"}}],[11,"from","","",108,{"inputs":[{"name":"colormask"}],"output":{"name":"colorinfo"}}],[11,"from","","",108,{"inputs":[{"name":"blend"}],"output":{"name":"colorinfo"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilinfo"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",109,null],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"depthstencilinfo"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"depthstencilinfo"}],"output":{"name":"bool"}}],[11,"from","","",109,{"inputs":[{"name":"depth"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",109,{"inputs":[{"name":"stencil"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",109,null],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"element"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",110,null],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"element"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"element"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"vertexbufferdesc"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",111,null],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"vertexbufferdesc"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"vertexbufferdesc"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"descriptor"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",112,null],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"new","","Create a new empty PSO descriptor.",112,{"inputs":[{"name":"primitive"},{"name":"rasterizer"}],"output":{"name":"descriptor"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"vertexbufferset"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",113,null],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"vertexbufferset"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"vertexbufferset"}],"output":{"name":"bool"}}],[11,"new","","Create an empty set",113,{"inputs":[],"output":{"name":"vertexbufferset"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"constantbufferparam"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",114,null],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"constantbufferparam"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"constantbufferparam"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"resourceviewparam"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",115,null],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"resourceviewparam"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"resourceviewparam"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"unorderedviewparam"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",116,null],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"unorderedviewparam"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"unorderedviewparam"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"samplerparam"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",117,null],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"samplerparam"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"self"},{"name":"samplerparam"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"pixeltargetset"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",118,null],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"pixeltargetset"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"pixeltargetset"}],"output":{"name":"bool"}}],[11,"new","","Create an empty set",118,{"inputs":[],"output":{"name":"pixeltargetset"}}],[11,"add_color","","Add a color view to the specified slot",118,null],[11,"add_depth_stencil","","Add a depth or stencil view to the specified slot",118,null],[11,"get_view","","Get the rendering view (returns values > 0)",118,null],[0,"shade","gfx_core","Shader handling.",null,null],[3,"SamplerType","gfx_core::shade","A type of the sampler variable.",null,null],[12,"0","","",120,null],[12,"1","","",120,null],[3,"Usage","","Parameter usage flags.",null,null],[3,"AttributeVar","","Vertex information that a shader takes as input.",null,null],[12,"name","","Name of this attribute.",121,null],[12,"slot","","Slot of the vertex attribute.",121,null],[12,"base_type","","Type that this attribute is composed of.",121,null],[12,"container","","\"Scalarness\" of this attribute.",121,null],[3,"ConstVar","","A constant in the shader - a bit of data that doesn't vary",null,null],[12,"name","","Name of this constant.",122,null],[12,"location","","Location of this constant in the program. For constant buffer elements, it's the offset in bytes.",122,null],[12,"count","","Number of elements this constant represents.",122,null],[12,"base_type","","Type that this constant is composed of",122,null],[12,"container","","\"Scalarness\" of this constant.",122,null],[3,"ConstantBufferVar","","A constant buffer.",null,null],[12,"name","","Name of this constant buffer.",123,null],[12,"slot","","Slot of the constant buffer.",123,null],[12,"size","","Size (in bytes) of this buffer's data.",123,null],[12,"usage","","What program stage this buffer is used in.",123,null],[12,"elements","","List of individual elements in this buffer.",123,null],[3,"TextureVar","","Texture shader parameter.",null,null],[12,"name","","Name of this texture variable.",124,null],[12,"slot","","Slot of this texture variable.",124,null],[12,"base_type","","Base type for the texture.",124,null],[12,"ty","","Type of this texture.",124,null],[12,"usage","","What program stage this texture is used in.",124,null],[3,"UnorderedVar","","Unordered access shader parameter.",null,null],[12,"name","","Name of this unordered variable.",125,null],[12,"slot","","Slot of this unordered variable.",125,null],[12,"usage","","What program stage this UAV is used in.",125,null],[3,"SamplerVar","","Sampler shader parameter.",null,null],[12,"name","","Name of this sampler variable.",126,null],[12,"slot","","Slot of this sampler variable.",126,null],[12,"ty","","Type of this sampler.",126,null],[12,"usage","","What program stage this texture is used in.",126,null],[3,"OutputVar","","Target output variable.",null,null],[12,"name","","Name of this output variable.",127,null],[12,"slot","","Output color target index.",127,null],[12,"base_type","","Type of the output component.",127,null],[12,"container","","\"Scalarness\" of this output.",127,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",128,null],[12,"globals","","Global constants in the program",128,null],[12,"constant_buffers","","Constant buffers in the program",128,null],[12,"textures","","Textures in the program",128,null],[12,"unordereds","","Unordered access resources in the program",128,null],[12,"samplers","","Samplers in the program",128,null],[12,"outputs","","Output targets in the program",128,null],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",128,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are unable to actually get the output variable info",128,null],[3,"Program","","A program",null,null],[3,"CreateProgramError","","An error type for creating programs.",null,null],[4,"IsArray","","Whether the sampler samples an array texture.",null,null],[13,"Array","","",129,null],[13,"NoArray","","",129,null],[4,"IsComparison","","Whether the sampler compares the depth value upon sampling.",null,null],[13,"Compare","","",130,null],[13,"NoCompare","","",130,null],[4,"IsMultiSample","","Whether the sampler samples a multisample texture.",null,null],[13,"MultiSample","","",131,null],[13,"NoMultiSample","","",131,null],[4,"IsRect","","Whether the sampler samples a rectangle texture.",null,null],[13,"Rect","","",132,null],[13,"NoRect","","",132,null],[4,"MatrixFormat","","Whether the matrix is column or row major.",null,null],[13,"ColumnMajor","","",133,null],[13,"RowMajor","","",133,null],[4,"TextureType","","A type of the texture variable. This has to match the actual data we bind to the shader.",null,null],[13,"Buffer","","Sample from a buffer.",134,null],[13,"D1","","Sample from a 1D texture",134,null],[13,"D2","","Sample from a 2D texture",134,null],[13,"D3","","Sample from a 3D texture",134,null],[13,"Cube","","Sample from a cubemap.",134,null],[4,"BaseType","","Base type of this shader parameter.",null,null],[13,"I32","","",135,null],[13,"U32","","",135,null],[13,"F32","","",135,null],[13,"F64","","",135,null],[13,"Bool","","",135,null],[4,"ContainerType","","Number of components this parameter represents.",null,null],[13,"Single","","Scalar value",136,null],[13,"Vector","","A vector with `Dimension` components.",136,null],[13,"Matrix","","A matrix.",136,null],[4,"Stage","","Which program stage this shader represents.",null,null],[13,"Vertex","","",137,null],[13,"Hull","","",137,null],[13,"Domain","","",137,null],[13,"Geometry","","",137,null],[13,"Pixel","","",137,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",138,null],[13,"F32","","",138,null],[13,"I32Vector2","","",138,null],[13,"I32Vector3","","",138,null],[13,"I32Vector4","","",138,null],[13,"F32Vector2","","",138,null],[13,"F32Vector3","","",138,null],[13,"F32Vector4","","",138,null],[13,"F32Matrix2","","",138,null],[13,"F32Matrix3","","",138,null],[13,"F32Matrix4","","",138,null],[4,"CompatibilityError","","Error type for trying to store a UniformValue in a ConstVar.",null,null],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",139,null],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",139,null],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4, etc)",139,null],[4,"CreateShaderError","","An error type for creating shaders.",null,null],[13,"ModelNotSupported","","The device does not support the requested shader model.",140,null],[13,"StageNotSupported","","The device does not support the shader stage.",140,null],[13,"CompilationFailed","","The shader failed to compile.",140,null],[6,"Dimension","","Number of components in a container type (vectors/matrices)",null,null],[6,"Location","","Location of a parameter in the program.",null,null],[6,"ConstFormat","","Format of a shader constant.",null,null],[17,"STAGES","","A constant static array of all shader stages.",null,null],[8,"BaseTyped","","A trait that statically links simple data types to base types of the shader constants.",null,null],[10,"get_base_type","","",141,{"inputs":[],"output":{"name":"basetype"}}],[8,"Formatted","","A trait that statically links simple data types to constant formats.",null,null],[10,"get_format","","Get the associated constant format.",142,{"inputs":[],"output":{"name":"constformat"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"isarray"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",129,null],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"isarray"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"iscomparison"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",130,null],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"iscomparison"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"ismultisample"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",131,null],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"ismultisample"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"isrect"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",132,null],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"isrect"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"matrixformat"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",133,null],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"matrixformat"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"texturetype"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",134,null],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"can_sample","","Check if this texture can be used with a sampler.",134,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"samplertype"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",120,null],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"basetype"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",135,null],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"basetype"}],"output":{"name":"bool"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"containertype"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",136,null],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"self"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"stage"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",137,null],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"stage"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",138,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",138,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"name":"bool"}}],[11,"le","","",138,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"name":"bool"}}],[11,"gt","","",138,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"name":"bool"}}],[11,"ge","","",138,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"usage"}}],[11,"partial_cmp","","",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"le","","",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"gt","","",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ge","","",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"cmp","","",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"ordering"}}],[11,"hash","","",143,null],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"VERTEX","","Used by the vertex shader",143,null],[18,"GEOMETRY","","Used by the geometry shader",143,null],[18,"PIXEL","","Used by the pixel shader",143,null],[18,"HULL","","Used by the hull shader",143,null],[18,"DOMAIN","","Used by the pixel shader",143,null],[11,"empty","","Returns an empty set of flags.",143,{"inputs":[],"output":{"name":"usage"}}],[11,"all","","Returns the set containing all flags.",143,{"inputs":[],"output":{"name":"usage"}}],[11,"bits","","Returns the raw value of the flags currently stored.",143,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",143,{"inputs":[{"name":"u8"}],"output":{"generics":["usage"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",143,{"inputs":[{"name":"u8"}],"output":{"name":"usage"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",143,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",143,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",143,{"inputs":[{"name":"self"},{"name":"usage"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitor_assign","","Adds the set of flags.",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitxor_assign","","Toggles the set of flags.",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"sub_assign","","Disables all flags enabled in the set.",143,{"inputs":[{"name":"self"},{"name":"usage"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",143,{"inputs":[{"name":"self"}],"output":{"name":"usage"}}],[11,"extend","","",143,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",143,{"inputs":[{"name":"t"}],"output":{"name":"usage"}}],[11,"from","","",143,{"inputs":[{"name":"stage"}],"output":{"name":"self"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"attributevar"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",121,null],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"attributevar"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"attributevar"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"constvar"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",122,null],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"constvar"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"constvar"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"constantbuffervar"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",123,null],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"constantbuffervar"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"self"},{"name":"constantbuffervar"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"texturevar"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",124,null],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"texturevar"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"self"},{"name":"texturevar"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"unorderedvar"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",125,null],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"unorderedvar"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"self"},{"name":"unorderedvar"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"samplervar"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",126,null],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"self"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"outputvar"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",127,null],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"outputvar"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"outputvar"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"programinfo"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",128,null],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_info","","Get program info",144,{"inputs":[{"name":"self"}],"output":{"name":"programinfo"}}],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"program"}],"output":{"name":"bool"}}],[11,"hash","","",144,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"compatibilityerror"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"compatibilityerror"}],"output":{"name":"bool"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",139,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_compatible","","Whether a value is compatible with this variable. That is, whether the value can be stored in this variable.",122,{"inputs":[{"name":"self"},{"name":"uniformvalue"}],"output":{"generics":["compatibilityerror"],"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"createshadererror"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",140,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"createprogramerror"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"createprogramerror"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"self"},{"name":"createprogramerror"}],"output":{"name":"bool"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",145,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",145,{"inputs":[{"name":"s"}],"output":{"name":"createprogramerror"}}],[0,"texture","gfx_core","Texture creation and modification.",null,null],[6,"Layer","gfx_core::texture","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[3,"Raw","","Untyped texture",null,null],[3,"ImageInfoCommon","","Describes a subvolume of a texture, which image data can be uploaded into.",null,null],[12,"xoffset","","",146,null],[12,"yoffset","","",146,null],[12,"zoffset","","",146,null],[12,"width","","",146,null],[12,"height","","",146,null],[12,"depth","","",146,null],[12,"format","","Format of each texel.",146,null],[12,"mipmap","","Which mipmap to select.",146,null],[3,"TextureCopyRegion","","A texture region defined for copy operations",null,null],[12,"texture","","Raw texture",147,null],[12,"kind","","Texture kind",147,null],[12,"cube_face","","Optional cube face",147,null],[12,"info","","Dimensions, offsets, and format",147,null],[3,"Lod","","A wrapper for the LOD level of a texture.",null,null],[3,"PackedColor","","A wrapper for the 8bpp RGBA color, encoded as u32.",null,null],[12,"0","","",148,null],[3,"SamplerInfo","","Specifies how to sample from a texture.",null,null],[12,"filter","","Filter method to use.",149,null],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL speak).",149,null],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For example, if it would select mipmap level 2 and lod_bias is 1, it will use mipmap level 3.",149,null],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",149,null],[12,"comparison","","Comparison mode, used primary for a shadow map.",149,null],[12,"border","","Border color is used when one of the wrap modes is set to border.",149,null],[3,"Info","","Texture storage descriptor.",null,null],[12,"kind","","",150,null],[12,"levels","","",150,null],[12,"format","","",150,null],[12,"bind","","",150,null],[12,"usage","","",150,null],[3,"ResourceDesc","","Texture resource view descriptor.",null,null],[12,"channel","","",151,null],[12,"layer","","",151,null],[12,"min","","",151,null],[12,"max","","",151,null],[12,"swizzle","","",151,null],[3,"RenderDesc","","Texture render view descriptor.",null,null],[12,"channel","","",152,null],[12,"level","","",152,null],[12,"layer","","",152,null],[3,"DepthStencilFlags","","Depth-stencil read-only flags",null,null],[3,"DepthStencilDesc","","Texture depth-stencil view descriptor.",null,null],[12,"level","","",153,null],[12,"layer","","",153,null],[12,"flags","","",153,null],[4,"CreationError","","Pure texture object creation error.",null,null],[13,"Format","","Failed to map a given format to the device.",154,null],[13,"Kind","","The kind doesn't support a particular operation.",154,null],[13,"Samples","","Failed to map a given multisampled kind to the device.",154,null],[13,"Size","","Unsupported size in one of the dimensions.",154,null],[13,"Data","","The given data has a different size than the target texture slice.",154,null],[13,"Usage","","The mentioned usage mode is not supported",154,null],[13,"Mipmap","","The requested mipmap creation parameter is unsupported.",154,null],[13,"Level","","The requested mipmap level count does not match the provided data.",154,null],[4,"LayerError","","An error associated with selected texture layer.",null,null],[13,"NotExpected","","The source texture kind doesn't support array slices.",155,null],[13,"OutOfBounds","","Selected layer is outside of the provided range.",155,null],[4,"AaMode","","Describes the configuration of samples inside each texel.",null,null],[13,"Single","","No additional sample information",156,null],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",156,null],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",156,null],[4,"FilterMethod","","How to filter the texture when sampling. They correspond to increasing levels of quality, but also cost. They \"layer\" on top of each other: it is not possible to have bilinear filtering without mipmapping, for example.",null,null],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",157,null],[13,"Mipmap","","Add simple mipmapping.",157,null],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase quality.",157,null],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",157,null],[13,"Anisotropic","","Anisotropic filtering with a given \"max\", must be between 1 and 16, inclusive.",157,null],[4,"CubeFace","","The face of a cube texture to do an operation on.",null,null],[13,"PosX","","",158,null],[13,"NegX","","",158,null],[13,"PosY","","",158,null],[13,"NegY","","",158,null],[13,"PosZ","","",158,null],[13,"NegZ","","",158,null],[4,"Kind","","Specifies the kind of a texture storage to be allocated.",null,null],[13,"D1","","A single row of texels.",159,null],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels in a different row are not sampled.",159,null],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",159,null],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in a different depth level are not sampled.",159,null],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",159,null],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",159,null],[13,"CubeArray","","An array of Cube textures.",159,null],[4,"Mipmap","","The marker for the texture initializer to generate extra space for the mipmap generation.",null,null],[13,"Provided","","The mipmap data is provided as a part of bitmap data.",160,null],[13,"Allocated","","The mipmap data is not provided, but the memory for it should be allocated for the later generation/",160,null],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",null,null],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is the default.",161,null],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",161,null],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",161,null],[13,"Border","","Use border color.",161,null],[6,"Size","","Dimension size",null,null],[6,"Bits","","Number of bits per component",null,null],[6,"NumSamples","","Number of MSAA samples",null,null],[6,"NumFragments","","Number of EQAA fragments",null,null],[6,"Dimensions","","Dimensions: width, height, depth, and samples.",null,null],[6,"RawImageInfo","","New raw image info based on the universal format spec.",null,null],[6,"NewImageInfo","","New image info based on the universal format spec. The format is suppsed to come from compile-time information as opposed to run-time enum values.",null,null],[17,"MAX_LEVEL","","Maximum accessible mipmap level of a texture.",null,null],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",null,null],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_info","","Get texture descriptor",162,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",162,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"self"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",154,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"layererror"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",155,null],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"layererror"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"layererror"}],"output":{"name":"bool"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",155,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"aamode"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",156,null],[11,"cmp","","",156,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"ordering"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",156,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",156,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"le","","",156,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"gt","","",156,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ge","","",156,{"inputs":[{"name":"self"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"from","","",156,{"inputs":[{"name":"numsamples"}],"output":{"name":"aamode"}}],[11,"get_num_fragments","","Return the number of actual data fragments stored per texel.",156,{"inputs":[{"name":"self"}],"output":{"name":"numfragments"}}],[11,"needs_resolve","","Return true if the surface has to be resolved before sampling.",156,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"filtermethod"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",157,null],[11,"cmp","","",157,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"ordering"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",157,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",157,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"le","","",157,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"gt","","",157,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ge","","",157,{"inputs":[{"name":"self"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"cubeface"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",158,null],[11,"cmp","","",158,{"inputs":[{"name":"self"},{"name":"cubeface"}],"output":{"name":"ordering"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",158,{"inputs":[{"name":"self"},{"name":"cubeface"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",159,null],[11,"cmp","","",159,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"ordering"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",159,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",159,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"le","","",159,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"gt","","",159,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ge","","",159,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"get_dimensions","","Get texture dimensions, with 0 values where not applicable.",159,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",159,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"dimensions"}}],[11,"get_num_levels","","Count the number of mipmap levels.",159,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",159,{"inputs":[{"name":"self"}],"output":{"generics":["layer"],"name":"option"}}],[11,"is_cube","","Check if it's one of the cube kinds.",159,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"mipmap"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",160,null],[11,"cmp","","",160,{"inputs":[{"name":"self"},{"name":"mipmap"}],"output":{"name":"ordering"}}],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"mipmap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",160,{"inputs":[{"name":"self"},{"name":"mipmap"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"imageinfocommon"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",146,null],[11,"cmp","","",146,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"ordering"}}],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",146,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",146,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"le","","",146,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"gt","","",146,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"ge","","",146,{"inputs":[{"name":"self"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"get_texel_count","","Get the total number of texels.",146,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"convert","","Convert into a differently typed format.",146,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"imageinfocommon"}}],[11,"is_inside","","Check if it fits inside given dimensions.",146,{"inputs":[{"name":"self"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"get_byte_count","","Get the total number of bytes.",163,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"texturecopyregion"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",147,null],[11,"cmp","","",147,{"inputs":[{"name":"self"},{"name":"texturecopyregion"}],"output":{"name":"ordering"}}],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"texturecopyregion"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"self"},{"name":"texturecopyregion"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",147,{"inputs":[{"name":"self"},{"name":"texturecopyregion"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",147,{"inputs":[{"name":"self"},{"name":"texturecopyregion"}],"output":{"name":"bool"}}],[11,"le","","",147,{"inputs":[{"name":"self"},{"name":"texturecopyregion"}],"output":{"name":"bool"}}],[11,"gt","","",147,{"inputs":[{"name":"self"},{"name":"texturecopyregion"}],"output":{"name":"bool"}}],[11,"ge","","",147,{"inputs":[{"name":"self"},{"name":"texturecopyregion"}],"output":{"name":"bool"}}],[11,"with_texture","","Change the texture",147,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"texturecopyregion"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"wrapmode"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",161,null],[11,"cmp","","",161,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":{"name":"ordering"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",161,{"inputs":[{"name":"self"},{"name":"wrapmode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"lod"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",164,null],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",164,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",164,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"le","","",164,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"gt","","",164,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"ge","","",164,{"inputs":[{"name":"self"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"from","","",164,{"inputs":[{"name":"f32"}],"output":{"name":"lod"}}],[11,"into","","",164,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"packedcolor"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",148,null],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",148,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",148,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"le","","",148,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"gt","","",148,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"ge","","",148,{"inputs":[{"name":"self"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"from","","",148,null],[11,"into","","",148,null],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"samplerinfo"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",149,null],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",149,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",149,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"le","","",149,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"gt","","",149,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ge","","",149,{"inputs":[{"name":"self"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD modifications.",149,{"inputs":[{"name":"filtermethod"},{"name":"wrapmode"}],"output":{"name":"samplerinfo"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",150,null],[11,"cmp","","",150,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"ordering"}}],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",150,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",150,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"le","","",150,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"gt","","",150,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"ge","","",150,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"to_image_info","","Get image info for a given mip.",150,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"newimageinfo"}}],[11,"to_raw_image_info","","Get the raw image info for a given mip and a channel type.",150,{"inputs":[{"name":"self"},{"name":"channeltype"},{"name":"level"}],"output":{"name":"rawimageinfo"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"resourcedesc"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",151,null],[11,"cmp","","",151,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"ordering"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",151,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",151,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"le","","",151,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"gt","","",151,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"ge","","",151,{"inputs":[{"name":"self"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"renderdesc"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",152,null],[11,"cmp","","",152,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"ordering"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",152,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",152,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"le","","",152,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"gt","","",152,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"ge","","",152,{"inputs":[{"name":"self"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilflags"}}],[11,"partial_cmp","","",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"le","","",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"gt","","",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"ge","","",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"cmp","","",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"ordering"}}],[11,"hash","","",165,null],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"RO_DEPTH","","Depth is read-only in the view.",165,null],[18,"RO_STENCIL","","Stencil is read-only in the view.",165,null],[18,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",165,null],[11,"empty","","Returns an empty set of flags.",165,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"all","","Returns the set containing all flags.",165,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",165,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",165,{"inputs":[{"name":"u8"}],"output":{"generics":["depthstencilflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",165,{"inputs":[{"name":"u8"}],"output":{"name":"depthstencilflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",165,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",165,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitor_assign","","Adds the set of flags.",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",165,{"inputs":[{"name":"self"},{"name":"depthstencilflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",165,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilflags"}}],[11,"extend","","",165,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",165,{"inputs":[{"name":"t"}],"output":{"name":"depthstencilflags"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"depthstencildesc"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",153,null],[11,"cmp","","",153,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"ordering"}}],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",153,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",153,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"le","","",153,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"gt","","",153,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"ge","","",153,{"inputs":[{"name":"self"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"from","","",153,{"inputs":[{"name":"renderdesc"}],"output":{"name":"depthstencildesc"}}],[6,"VertexCount","gfx_core","Draw vertex count.",null,null],[6,"InstanceCount","","Draw number of instances",null,null],[6,"PatchSize","","Number of vertices in a patch",null,null],[6,"AttributeSlot","","Slot for an attribute.",null,null],[6,"ConstantBufferSlot","","Slot for a constant buffer object.",null,null],[6,"ResourceViewSlot","","Slot for a shader resource view.",null,null],[6,"UnorderedViewSlot","","Slot for an unordered access object.",null,null],[6,"ColorSlot","","Slot for an active color buffer.",null,null],[6,"SamplerSlot","","Slot for a sampler.",null,null],[6,"SubmissionResult","","",null,null],[17,"MAX_VERTEX_ATTRIBUTES","","Compile-time maximum number of vertex attributes.",null,null],[17,"MAX_COLOR_TARGETS","","Compile-time maximum number of color targets.",null,null],[17,"MAX_CONSTANT_BUFFERS","","Compile-time maximum number of constant buffers.",null,null],[17,"MAX_RESOURCE_VIEWS","","Compile-time maximum number of shader resource views (SRV).",null,null],[17,"MAX_UNORDERED_VIEWS","","Compile-time maximum number of unordered access views (UAV).",null,null],[17,"MAX_SAMPLERS","","Compile-time maximum number of samplers.",null,null],[8,"Resources","","Different types of a specific API.",null,null],[16,"Buffer","","",166,null],[16,"Shader","","",166,null],[16,"Program","","",166,null],[16,"PipelineStateObject","","",166,null],[16,"Texture","","",166,null],[16,"ShaderResourceView","","",166,null],[16,"UnorderedAccessView","","",166,null],[16,"RenderTargetView","","",166,null],[16,"DepthStencilView","","",166,null],[16,"Sampler","","",166,null],[16,"Fence","","",166,null],[16,"Mapping","","",166,null],[8,"Device","","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",null,null],[16,"Resources","","Associated `Resources` type.",167,null],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer` type.",167,null],[10,"get_capabilities","","Returns the capabilities of this `Device`.",167,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",167,{"inputs":[{"name":"self"},{"name":"manager"}],"output":null}],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",167,null],[10,"fenced_submit","","Submits a `CommandBuffer` to the GPU for execution. returns a fence that is signaled after the GPU has executed all commands",167,null],[10,"wait_fence","","Stalls the current thread until the fence is satisfied",167,{"inputs":[{"name":"self"},{"name":"fence"}],"output":null}],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",167,{"inputs":[{"name":"self"}],"output":null}],[8,"Adapter","","Represents a physical or virtual device, which is capable of running the backend.",null,null],[16,"CommandQueue","","Associated `CommandQueue` type.",168,null],[16,"Device","","Associated `Device` type.",168,null],[16,"QueueFamily","","Associated `QueueFamily` type.",168,null],[10,"enumerate_adapters","","Enumerate all available adapters supporting this backend",168,{"inputs":[],"output":{"name":"vec"}}],[10,"open","","Create a new device and command queues.",168,null],[10,"get_info","","Get the `AdapterInfo` for this adapater.",168,{"inputs":[{"name":"self"}],"output":{"name":"adapterinfo"}}],[10,"get_queue_families","","Return the supported queue families for this adapter.",168,null],[8,"QueueFamily","","`QueueFamily` denotes a group of command queues provided by the backend with the same properties/type.",null,null],[16,"Surface","","Associated `Surface` type.",169,null],[10,"supports_present","","Check if the queue family supports presentation to a surface",169,null],[10,"num_queues","","Return the number of available queues of this family",169,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"CommandQueue","","Dummy trait for command queues. CommandBuffers will be later submitted to command queues instead of the device.",null,null],[8,"Surface","","A `Surface` abstracts the surface of a native window, which will be presented",null,null],[16,"CommandQueue","","Associated `CommandQueue` type.",170,null],[16,"SwapChain","","Associated `SwapChain` type.",170,null],[16,"Window","","Associated native `Window` type.",170,null],[10,"from_window","","Create a new surface from a native window.",170,null],[10,"build_swapchain","","Create a new swapchain from the current surface with an associated present queue.",170,null],[8,"SwapChain","","The `SwapChain` is the backend representation of the surface. It consists of multiple buffers, which will be presented on the surface.",null,null],[10,"acquire_frame","","Acquire a new frame for rendering. This needs to be called before presenting.",171,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[10,"present","","Present one acquired frame in FIFO order.",171,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"vertexshader"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",172,null],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"vertexshader"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"self"},{"name":"vertexshader"}],"output":{"name":"bool"}}],[11,"reference","","",172,null],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"hullshader"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",173,null],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"hullshader"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"hullshader"}],"output":{"name":"bool"}}],[11,"reference","","",173,null],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"domainshader"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",174,null],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"domainshader"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"self"},{"name":"domainshader"}],"output":{"name":"bool"}}],[11,"reference","","",174,null],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"geometryshader"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",175,null],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"geometryshader"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"self"},{"name":"geometryshader"}],"output":{"name":"bool"}}],[11,"reference","","",175,null],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"pixelshader"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",176,null],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"pixelshader"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"pixelshader"}],"output":{"name":"bool"}}],[11,"reference","","",176,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"shaderset"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"shaderset"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"shaderset"}],"output":{"name":"bool"}}],[11,"get_usage","","Return the aggregated stage usage for the set.",20,{"inputs":[{"name":"self"}],"output":{"name":"usage"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"capabilities"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"capabilities"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"primitive"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"indextype"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"indextype"}],"output":{"name":"ordering"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"indextype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"indextype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"submissionerror"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"submissionerror"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",23,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"adapterinfo"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"adapterinfo"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"adapterinfo"}],"output":{"name":"bool"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","gfx_core::state","",2,null],[11,"hash","","",1,null],[11,"hash","","",178,null],[11,"hash","","",9,null],[11,"hash","","",14,null],[11,"hash","","",15,null],[11,"hash","","",8,null],[11,"hash","","",13,null],[11,"hash","","",10,null],[11,"hash","","",6,null],[11,"hash","","",4,null],[11,"hash","","",3,null],[11,"hash","","",12,null],[11,"hash","gfx_core::target","",17,null],[11,"hash","gfx_core::state","",0,null],[11,"hash","gfx_core::target","",179,null],[11,"hash","gfx_core::state","",5,null],[11,"hash","","",7,null],[11,"hash","","",180,null],[11,"hash","","",11,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"frontface"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"comparison"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"multisample"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"equation"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"factor"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"depth"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"cullface"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"offset"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rastermethod"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"stencilside"}}],[11,"clone","gfx_core::target","",17,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"clone","gfx_core::state","",4,{"inputs":[{"name":"self"}],"output":{"name":"rasterizer"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"refvalues"}}],[11,"clone","gfx_core::target","",179,{"inputs":[{"name":"self"}],"output":{"name":"mirror"}}],[11,"clone","gfx_core::state","",14,{"inputs":[{"name":"self"}],"output":{"name":"blend"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"stencil"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"colormask"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"blendvalue"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"stencilop"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"blendchannel"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",178,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",180,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",180,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"le","","",180,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"gt","","",180,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ge","","",180,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"partial_cmp","gfx_core::target","",17,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",179,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",179,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"le","","",179,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"gt","","",179,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ge","","",179,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"from_iter","gfx_core::state","",180,{"inputs":[{"name":"t"}],"output":{"name":"colormask"}}],[11,"from_iter","gfx_core::target","",179,{"inputs":[{"name":"t"}],"output":{"name":"mirror"}}],[11,"sub","gfx_core::state","Returns the set difference of the two sets of flags.",180,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"sub","gfx_core::target","Returns the set difference of the two sets of flags.",179,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"default","gfx_core::state","",8,{"inputs":[],"output":{"name":"stencil"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"color"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"depth"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"stencilside"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"blend"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"refvalues"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"blendchannel"}}],[11,"bitor","","Returns the union of the two sets of flags.",180,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitor","gfx_core::target","Returns the union of the two sets of flags.",179,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"fmt","gfx_core::state","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx_core::target","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx_core::state","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx_core::target","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx_core::state","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"ordering"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"name":"ordering"}}],[11,"cmp","","",180,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"ordering"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"ordering"}}],[11,"cmp","","",178,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"name":"ordering"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"name":"ordering"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"ordering"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"ordering"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"ordering"}}],[11,"cmp","gfx_core::target","",179,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"ordering"}}],[11,"cmp","gfx_core::state","",6,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"name":"ordering"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"name":"ordering"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"name":"ordering"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"name":"ordering"}}],[11,"sub_assign","","Disables all flags enabled in the set.",180,null],[11,"sub_assign","gfx_core::target","Disables all flags enabled in the set.",179,null],[11,"bitxor","gfx_core::state","Returns the left flags, but with all the right flags toggled.",180,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitxor","gfx_core::target","Returns the left flags, but with all the right flags toggled.",179,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx_core::state","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"extend","gfx_core::target","",179,null],[11,"extend","gfx_core::state","",180,null],[11,"fmt","gfx_core::target","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx_core::state","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitand_assign","gfx_core::target","Disables all flags disabled in the set.",179,null],[11,"bitand_assign","gfx_core::state","Disables all flags disabled in the set.",180,null],[11,"bitxor_assign","","Toggles the set of flags.",180,null],[11,"bitxor_assign","gfx_core::target","Toggles the set of flags.",179,null],[11,"fmt","gfx_core::state","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx_core::target","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"not","gfx_core::state","Returns the complement of this set of flags.",180,{"inputs":[{"name":"self"}],"output":{"name":"colormask"}}],[11,"not","gfx_core::target","Returns the complement of this set of flags.",179,{"inputs":[{"name":"self"}],"output":{"name":"mirror"}}],[11,"bitor_assign","","Adds the set of flags.",179,null],[11,"bitor_assign","gfx_core::state","Adds the set of flags.",180,null],[11,"fmt","gfx_core::target","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","gfx_core::state","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",180,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitand","gfx_core::target","Returns the intersection between the two sets of flags.",179,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"eq","gfx_core::state","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"eq","gfx_core::target","",179,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"eq","gfx_core::state","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"eq","gfx_core::target","",17,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"eq","gfx_core::state","",5,{"inputs":[{"name":"self"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"new_fill","","Create a new filling rasterizer.",4,{"inputs":[],"output":{"name":"rasterizer"}}],[11,"with_cull_back","","Add back face culling.",4,{"inputs":[{"name":"self"}],"output":{"name":"rasterizer"}}],[11,"with_offset","","Add polygon offset.",4,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"i32"}],"output":{"name":"rasterizer"}}],[11,"new","","Create a new stencil state with a given function.",8,null],[11,"new","","Create a new blend state with a given equation.",14,{"inputs":[{"name":"equation"},{"name":"factor"},{"name":"factor"}],"output":{"name":"blend"}}],[18,"RED","","",180,null],[18,"GREEN","","",180,null],[18,"BLUE","","",180,null],[18,"ALPHA","","",180,null],[11,"empty","","Returns an empty set of flags.",180,{"inputs":[],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",180,{"inputs":[],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",180,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",180,{"inputs":[{"name":"u8"}],"output":{"generics":["colormask"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",180,{"inputs":[{"name":"u8"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",180,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",180,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",180,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",180,{"inputs":[{"name":"self"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",180,null],[11,"remove","","Removes the specified flags in-place.",180,null],[11,"toggle","","Toggles the specified flags in-place.",180,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",180,null],[18,"X","gfx_core::target","",179,null],[18,"Y","","",179,null],[11,"empty","","Returns an empty set of flags.",179,{"inputs":[],"output":{"name":"mirror"}}],[11,"all","","Returns the set containing all flags.",179,{"inputs":[],"output":{"name":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",179,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",179,{"inputs":[{"name":"u8"}],"output":{"generics":["mirror"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",179,{"inputs":[{"name":"u8"}],"output":{"name":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",179,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",179,{"inputs":[{"name":"self"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",179,null],[11,"remove","","Removes the specified flags in-place.",179,null],[11,"toggle","","Toggles the specified flags in-place.",179,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",179,null]],"paths":[[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"Rasterizer"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[3,"Rect"],[3,"Capabilities"],[3,"AdapterInfo"],[4,"ShaderSet"],[4,"Primitive"],[4,"IndexType"],[4,"SubmissionError"],[3,"Info"],[4,"Role"],[4,"CreationError"],[3,"Raw"],[4,"ClearColor"],[8,"Buffer"],[3,"AccessInfo"],[3,"AccessGuard"],[3,"AccessGuardBuffers"],[3,"AccessGuardBuffersChain"],[4,"DummyResources"],[3,"DummyFence"],[3,"DummyMapping"],[3,"DummyDevice"],[3,"DummyCommandBuffer"],[4,"ResourceViewError"],[4,"TargetViewError"],[4,"CombinedError"],[8,"Factory"],[3,"Swizzle"],[3,"Format"],[3,"U8Norm"],[3,"I8Norm"],[3,"U16Norm"],[3,"I16Norm"],[3,"F16"],[4,"ChannelType"],[4,"SurfaceType"],[4,"ChannelSource"],[8,"SurfaceTyped"],[8,"ChannelTyped"],[8,"Formatted"],[4,"Int"],[4,"Uint"],[4,"Inorm"],[4,"Unorm"],[4,"Float"],[4,"Srgb"],[4,"R4_G4"],[4,"R4_G4_B4_A4"],[4,"R5_G5_B5_A1"],[4,"R5_G6_B5"],[4,"R8"],[4,"R8_G8"],[4,"R8_G8_B8_A8"],[4,"R10_G10_B10_A2"],[4,"R11_G11_B10"],[4,"R16"],[4,"R16_G16"],[4,"R16_G16_B16"],[4,"R16_G16_B16_A16"],[4,"R32"],[4,"R32_G32"],[4,"R32_G32_B32"],[4,"R32_G32_B32_A32"],[4,"B8_G8_R8_A8"],[4,"D16"],[4,"D24"],[4,"D24_S8"],[4,"D32"],[3,"RawBuffer"],[3,"Buffer"],[3,"Shader"],[3,"Program"],[3,"RawPipelineState"],[3,"RawTexture"],[3,"Texture"],[3,"RawShaderResourceView"],[3,"ShaderResourceView"],[3,"RawUnorderedAccessView"],[3,"UnorderedAccessView"],[3,"RawRenderTargetView"],[3,"RawDepthStencilView"],[3,"RenderTargetView"],[3,"DepthStencilView"],[3,"Sampler"],[3,"Fence"],[3,"Manager"],[4,"Error"],[3,"Reader"],[3,"Writer"],[4,"Usage"],[3,"Access"],[3,"Bind"],[3,"ColorInfo"],[3,"DepthStencilInfo"],[3,"Element"],[3,"VertexBufferDesc"],[3,"Descriptor"],[3,"VertexBufferSet"],[3,"ConstantBufferParam"],[3,"ResourceViewParam"],[3,"UnorderedViewParam"],[3,"SamplerParam"],[3,"PixelTargetSet"],[3,"CreationError"],[3,"SamplerType"],[3,"AttributeVar"],[3,"ConstVar"],[3,"ConstantBufferVar"],[3,"TextureVar"],[3,"UnorderedVar"],[3,"SamplerVar"],[3,"OutputVar"],[3,"ProgramInfo"],[4,"IsArray"],[4,"IsComparison"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"TextureType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[4,"UniformValue"],[4,"CompatibilityError"],[4,"CreateShaderError"],[8,"BaseTyped"],[8,"Formatted"],[3,"Usage"],[3,"Program"],[3,"CreateProgramError"],[3,"ImageInfoCommon"],[3,"TextureCopyRegion"],[3,"PackedColor"],[3,"SamplerInfo"],[3,"Info"],[3,"ResourceDesc"],[3,"RenderDesc"],[3,"DepthStencilDesc"],[4,"CreationError"],[4,"LayerError"],[4,"AaMode"],[4,"FilterMethod"],[4,"CubeFace"],[4,"Kind"],[4,"Mipmap"],[4,"WrapMode"],[3,"Raw"],[6,"RawImageInfo"],[3,"Lod"],[3,"DepthStencilFlags"],[8,"Resources"],[8,"Device"],[8,"Adapter"],[8,"QueueFamily"],[8,"Surface"],[8,"SwapChain"],[3,"VertexShader"],[3,"HullShader"],[3,"DomainShader"],[3,"GeometryShader"],[3,"PixelShader"],[3,"Frame"],[3,"MultiSample"],[3,"Mirror"],[3,"ColorMask"]]};
searchIndex["gif"] = {"doc":"GIF en- and decoding library Build Status","items":[[3,"Frame","gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",0,null],[12,"dispose","","Disposal method.",0,null],[12,"transparent","","Transparent index (if available).",0,null],[12,"needs_user_input","","True if the frame needs user input do be displayed.",0,null],[12,"top","","Offset from the top border of the canvas.",0,null],[12,"left","","Offset from the left border of the canvas.",0,null],[12,"width","","Width of the frame.",0,null],[12,"height","","Height of the frame.",0,null],[12,"interlaced","","True if the image is interlaced.",0,null],[12,"palette","","Frame local color palette if available.",0,null],[12,"buffer","","Buffer containing the image data. Only indices unless configured differently.",0,null],[3,"StreamingDecoder","","GIF decoder which supports streaming",null,null],[3,"MemoryLimit","","Memory limit in bytes. `MemoryLimit::Some(0)` means that there is no memory limit set.",null,null],[12,"0","","",1,null],[3,"Reader","","GIF decoder",null,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[4,"Block","","Known GIF block types",null,null],[13,"Image","","Image block.",2,null],[13,"Extension","","Extension block.",2,null],[13,"Trailer","","Image trailer.",2,null],[4,"Extension","","Known GIF extensions",null,null],[13,"Text","","Text extension.",3,null],[13,"Control","","Control extension.",3,null],[13,"Comment","","Comment extension.",3,null],[13,"Application","","Application extension.",3,null],[4,"DisposalMethod","","Disposal method",null,null],[13,"Any","","StreamingDecoder is not required to take any action.",4,null],[13,"Keep","","Do not dispose.",4,null],[13,"Background","","Restore to background color.",4,null],[13,"Previous","","Restore to previous.",4,null],[4,"Decoded","","Indicates whether a certain object has been decoded",null,null],[13,"Nothing","","Decoded nothing.",5,null],[13,"GlobalPalette","","Global palette.",5,null],[13,"BackgroundColor","","Index of the background color in the global palette.",5,null],[13,"Trailer","","Decoded the image trailer.",5,null],[13,"BlockStart","","The start of a block.",5,null],[13,"SubBlockFinished","","Decoded a sub-block. More sub-block are available.",5,null],[13,"BlockFinished","","Decoded the last (or only) sub-block of a block.",5,null],[13,"Frame","","Decoded all information of the next frame. The returned frame does not any image data.",5,null],[13,"Data","","Decoded some data of the current frame.",5,null],[13,"DataEnd","","No more data available the current frame.",5,null],[4,"DecodingError","","Decoding error.",null,null],[13,"Format","","Returned if the image is found to be malformed.",6,null],[13,"Internal","","Internal (logic) error.",6,null],[13,"Io","","Wraps `std::io::Error`.",6,null],[4,"ColorOutput","","Output mode for the image data",null,null],[13,"RGBA","","The decoder expands the image data to 32bit RGBA. This affects:",7,null],[13,"Indexed","","The decoder returns the raw indexed data.",7,null],[4,"Extensions","","Configures how extensions should be handled",null,null],[13,"Save","","Saves all extention data",8,null],[13,"Skip","","Skips the data of unknown extensions and extracts the data from known ones",8,null],[4,"ExtensionData","","Extension data.",null,null],[13,"Control","","Control extension. Use `ExtensionData::new_control_ext` to construct.",9,null],[12,"flags","gif::ExtensionData","Flags.",9,null],[12,"delay","","Frame delay.",9,null],[12,"trns","","Transparent index.",9,null],[13,"Repetitions","gif","Sets the number of repetitions",9,null],[4,"Repeat","","Number of repetitions",null,null],[13,"Finite","","Finite number of repetitions",10,null],[13,"Infinite","","Infinite number of repetitions",10,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"disposalmethod"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"disposalmethod"}],"output":{"name":"bool"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",4,{"inputs":[{"name":"u8"}],"output":{"generics":["disposalmethod"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",2,{"inputs":[{"name":"u8"}],"output":{"generics":["block"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"extension"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"extension"}],"output":{"name":"bool"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",3,{"inputs":[{"name":"u8"}],"output":{"generics":["extension"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"frame"}}],[11,"from_rgba","","Creates a frame from pixels in RGBA format.",0,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",0,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"extensions"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",8,{"inputs":[{"name":"self"},{"name":"streamingdecoder"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new streaming decoder",11,{"inputs":[],"output":{"name":"streamingdecoder"}}],[11,"update","","Updates the internal state of the decoder. ",11,null],[11,"last_ext","","Returns the data of the last extension that has been decoded.",11,null],[11,"current_frame_mut","","Current frame info as a mutable ref.",11,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"current_frame","","Current frame info as a ref.",11,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"width","","Width of the image",11,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",11,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"coloroutput"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",7,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",1,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":null}],[11,"new","","Creates a new decoder builder",12,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads the logical screen descriptor including the global color palette",12,{"inputs":[{"name":"self"}],"output":{"generics":["reader","decodingerror"],"name":"result"}}],[11,"next_frame_info","","Returns the next frame info",13,{"inputs":[{"name":"self"}],"output":{"generics":["option","decodingerror"],"name":"result"}}],[11,"read_next_frame","","Reads the next frame from the image.",13,{"inputs":[{"name":"self"}],"output":{"generics":["option","decodingerror"],"name":"result"}}],[11,"read_into_buffer","","Reads the data of the current frame into a pre-allocated buffer.",13,null],[11,"fill_buffer","","Reads data of the current frame into a pre-allocated buffer until the buffer has been filled completely.",13,null],[11,"buffer_size","","Output buffer size",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"line_length","","Line length of the current frame",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"palette","","Returns the color palette relevant for the current (next) frame",13,{"inputs":[{"name":"self"}],"output":{"generics":["decodingerror"],"name":"result"}}],[11,"global_palette","","The global color palette",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"width","","Width of the image",13,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",13,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"bg_color","","Index of the background color in the global palette",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"set_param","","",10,null],[11,"new_control_ext","","Constructor for control extension data.",9,{"inputs":[{"name":"u16"},{"name":"disposalmethod"},{"name":"bool"},{"generics":["u8"],"name":"option"}],"output":{"name":"extensiondata"}}],[11,"new","","Creates a new encoder.",14,null],[11,"write_global_palette","","Writes the global color palette.",14,null],[11,"write_frame","","Writes a frame to the image.",14,{"inputs":[{"name":"self"},{"name":"frame"}],"output":{"name":"result"}}],[11,"write_extension","","Writes an extension to the image.",14,{"inputs":[{"name":"self"},{"name":"extensiondata"}],"output":{"name":"result"}}],[11,"write_raw_extension","","Writes a raw extension to the image.",14,null],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[8,"SetParameter","","Implemented for objects that have parameters.",null,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null],[8,"Parameter","","Configuration parameter trait.",null,null],[16,"Result","","Result type of `set_param`.",16,null],[10,"set_param","","Sets `self` as a parameter of `Object`.",16,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null]],"paths":[[3,"Frame"],[3,"MemoryLimit"],[4,"Block"],[4,"Extension"],[4,"DisposalMethod"],[4,"Decoded"],[4,"DecodingError"],[4,"ColorOutput"],[4,"Extensions"],[4,"ExtensionData"],[4,"Repeat"],[3,"StreamingDecoder"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[8,"SetParameter"],[8,"Parameter"]]};
searchIndex["image"] = {"doc":"This crate provides native rust implementations of image encoders and decoders and basic image manipulation functions.","items":[[3,"Luma","image","Grayscale colors",null,null],[12,"data","","",0,null],[3,"LumaA","","Grayscale colors + alpha channel",null,null],[12,"data","","",1,null],[3,"Rgb","","RGB colors",null,null],[12,"data","","",2,null],[3,"Rgba","","RGB colors + alpha channel",null,null],[12,"data","","",3,null],[3,"SubImage","","A View into another image",null,null],[3,"Pixels","","Immutable pixel iterator",null,null],[3,"MutPixels","","Mutable pixel iterator",null,null],[3,"ImageBuffer","","Generic image buffer",null,null],[3,"Frame","","A single animation frame",null,null],[3,"Frames","","Holds the frames of the animated image",null,null],[4,"ColorType","","An enumeration over supported color types and their bit depths",null,null],[13,"Gray","","Pixel is grayscale",4,null],[13,"RGB","","Pixel contains R, G and B channels",4,null],[13,"Palette","","Pixel is an index into a color palette",4,null],[13,"GrayA","","Pixel is grayscale with an alpha channel",4,null],[13,"RGBA","","Pixel is RGB with an alpha channel",4,null],[4,"ImageError","","An enumeration of Image errors",null,null],[13,"FormatError","","The Image is not formatted properly",5,null],[13,"DimensionError","","The Image's dimensions are either too small or too large",5,null],[13,"UnsupportedError","","The Decoder does not support this image format",5,null],[13,"UnsupportedColor","","The Decoder does not support this color type",5,null],[13,"NotEnoughData","","Not enough data was provided to the Decoder to decode the image",5,null],[13,"IoError","","An I/O Error occurred while decoding the image",5,null],[13,"ImageEnd","","The end of the image has been reached",5,null],[4,"DecodingResult","","Result of a decoding process",null,null],[13,"U8","","A vector of unsigned bytes",6,null],[13,"U16","","A vector of unsigned words",6,null],[4,"FilterType","","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",7,null],[13,"Triangle","","Linear Filter",7,null],[13,"CatmullRom","","Cubic Filter",7,null],[13,"Gaussian","","Gaussian Filter",7,null],[13,"Lanczos3","","Lanczos with window 3",7,null],[4,"ImageFormat","","An enumeration of supported image formats. Not all formats support both encoding and decoding.",null,null],[13,"PNG","","An Image in PNG Format",8,null],[13,"JPEG","","An Image in JPEG Format",8,null],[13,"GIF","","An Image in GIF Format",8,null],[13,"WEBP","","An Image in WEBP Format",8,null],[13,"PPM","","An Image in PPM Format",8,null],[13,"TIFF","","An Image in TIFF Format",8,null],[13,"TGA","","An Image in TGA Format",8,null],[13,"BMP","","An Image in BMP Format",8,null],[13,"ICO","","An Image in ICO Format",8,null],[13,"HDR","","An Image in Radiance HDR Format",8,null],[4,"DynamicImage","","A Dynamic Image",null,null],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",9,null],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",9,null],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",9,null],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",9,null],[5,"open","","Open the image located at the path specified. The image's format is determined from the path's file extension.",null,{"inputs":[{"name":"p"}],"output":{"generics":["dynamicimage"],"name":"imageresult"}}],[5,"load","","Create a new image from a Reader",null,{"inputs":[{"name":"r"},{"name":"imageformat"}],"output":{"generics":["dynamicimage"],"name":"imageresult"}}],[5,"load_from_memory","","Create a new image from a byte slice",null,null],[5,"load_from_memory_with_format","","Create a new image from a byte slice",null,null],[5,"guess_format","","Guess image format from memory block",null,null],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified.",null,null],[0,"math","","Mathematical helper functions and types.",null,null],[0,"utils","image::math","Shared mathematical utility functions.",null,null],[5,"clamp","image::math::utils","Cut value to be inside given range",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[0,"nq","image::math","NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See \"Kohonen neural networks for optimal colour quantization\" in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of the algorithm. See also  http://www.acm.org/~dekker/NEUQUANT.HTML",null,null],[3,"NeuQuant","image::math::nq","Neural network color quantizer",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data",10,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data",10,null],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",10,null],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",10,null],[0,"imageops","image","Image Processing Functions",null,null],[4,"FilterType","image::imageops","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",7,null],[13,"Triangle","","Linear Filter",7,null],[13,"CatmullRom","","Cubic Filter",7,null],[13,"Gaussian","","Gaussian Filter",7,null],[13,"Lanczos3","","Lanczos with window 3",7,null],[5,"rotate90","","Rotate an image 90 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"rotate180","","Rotate an image 180 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"rotate270","","Rotate an image 270 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"flip_horizontal","","Flip an image horizontally",null,{"inputs":[{"name":"i"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"flip_vertical","","Flip an image vertically",null,{"inputs":[{"name":"i"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image. `kernel` is an array of the filter weights of length 9.",null,null],[5,"resize","","Resize the supplied image to the specified dimensions. `nwidth` and `nheight` are the new dimensions. `filter` is the sampling filter to use.",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"blur","","Performs a Gaussian blur on the supplied image. `sigma` is a measure of how much to blur by.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"unsharpen","","Performs an unsharpen mask on the supplied image. `sigma` is the amount to blur the image by. `threshold` is the threshold for the difference between",null,{"inputs":[{"name":"i"},{"name":"f32"},{"name":"i32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"crop","","Return a mutable view into an image",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[5,"overlay","","Overlay an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[5,"replace","","Replace the contents of an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[0,"colorops","","Public only because of Rust bug: https://github.com/rust-lang/rust/issues/18241 Functions for altering and converting the color of pixelbufs",null,null],[3,"BiLevel","image::imageops::colorops","A bi-level color map",null,null],[5,"grayscale","","Convert the supplied image to grayscale",null,{"inputs":[{"name":"i"}],"output":{"generics":["luma","vec"],"name":"imagebuffer"}}],[5,"invert","","Invert each pixel within the supplied image. This function operates in place.",null,{"inputs":[{"name":"i"}],"output":null}],[5,"contrast","","Adjust the contrast of the supplied image. `contrast` is the amount to adjust the contrast by. Negative values decrease the contrast and positive values increase the contrast.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"brighten","","Brighten the supplied image. `value` is the amount to brighten each pixel by. Negative values decrease the brightness and positive values increase it.",null,{"inputs":[{"name":"i"},{"name":"i32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"huerotate","","Hue rotate the supplied image. `value` is the degrees to rotate each pixel by. 0 and 360 do nothing, the rest rotates by the given degree value. just like the css webkit filter hue-rotate(180)",null,{"inputs":[{"name":"i"},{"name":"i32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"dither","","Reduces the colors of the image using the supplied `color_map` while applying Floyd-Steinberg dithering to improve the visual conception",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":null}],[5,"index_colors","","Reduces the colors using the supplied `color_map` and returns an image of the indices",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":{"generics":["luma","vec"],"name":"imagebuffer"}}],[8,"ColorMap","","A color map",null,null],[16,"Color","","The color type on which the map operates on",11,null],[10,"index_of","","Returns the index of the closed match of `color` in the color map.",11,null],[10,"map_color","","Maps `color` to the closest color in the color map.",11,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bilevel"}}],[11,"index_of","","",12,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"usize"}}],[11,"map_color","","",12,{"inputs":[{"name":"self"},{"name":"luma"}],"output":null}],[11,"index_of","image::math::nq","",10,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"usize"}}],[11,"map_color","","",10,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[11,"clone","image","",7,{"inputs":[{"name":"self"}],"output":{"name":"filtertype"}}],[0,"webp","","Decoding of Webp Images",null,null],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder.",null,null],[11,"new","","Create a new WebpDecoder from the Reader `r`. This function takes ownership of the Reader.",13,{"inputs":[{"name":"r"}],"output":{"name":"webpdecoder"}}],[11,"dimensions","","",13,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",13,null],[11,"read_image","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[0,"vp8","","An implementation of the VP8 Video Codec",null,null],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame",null,null],[12,"width","","The width of the luma plane",14,null],[12,"height","","The height of the luma plane",14,null],[12,"ybuf","","The luma plane of the frame",14,null],[12,"keyframe","","Indicates whether this frame is a keyframe",14,null],[12,"for_display","","Indicates whether this frame is intended for display",14,null],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2 of the VP8 Specification",14,null],[3,"VP8Decoder","","VP8 Decoder",null,null],[11,"default","","",14,{"inputs":[],"output":{"name":"frame"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"new","","Create a new decoder. The reader must present a raw vp8 bitstream to the decoder",15,{"inputs":[{"name":"r"}],"output":{"name":"vp8decoder"}}],[11,"decode_frame","","Decodes the current frame and returns a reference to it",15,{"inputs":[{"name":"self"}],"output":{"generics":["frame"],"name":"result"}}],[0,"ppm","image","Encoding of portable pixmap Images",null,null],[3,"PPMEncoder","image::ppm","A representation of a PPM encoder.",null,null],[3,"PPMDecoder","","PPM decoder",null,null],[11,"new","","Create a new PPMEncoder from the Writer `w`. This function takes ownership of the Writer.",16,{"inputs":[{"name":"w"}],"output":{"name":"ppmencoder"}}],[11,"encode","","Encode the buffer `im` as a PPM image. `width` and `height` are the dimensions of the buffer. `color` is the buffers ColorType.",16,null],[11,"new","","Create a new decoder that decodes from the stream `r`",17,{"inputs":[{"name":"r"}],"output":{"generics":["ppmdecoder"],"name":"imageresult"}}],[11,"dimensions","","",17,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",17,null],[11,"read_image","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[0,"png","image","Decoding and Encoding of PNG Images",null,null],[3,"PNGDecoder","image::png","PNG decoder",null,null],[3,"PNGEncoder","","PNG encoder",null,null],[11,"new","","Creates a new decoder that decodes from the stream `r`",18,{"inputs":[{"name":"r"}],"output":{"name":"pngdecoder"}}],[11,"dimensions","","",18,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",18,null],[11,"read_image","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to `w`",19,{"inputs":[{"name":"w"}],"output":{"name":"pngencoder"}}],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`",19,null],[11,"from","image","",4,null],[11,"from","","",5,{"inputs":[{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"ico","","Decoding and Encoding of ICO files",null,null],[3,"ICODecoder","image::ico","An ico decoder",null,null],[3,"ICOEncoder","","ICO encoder",null,null],[11,"new","","Create a new decoder that decodes from the stream `r`",20,{"inputs":[{"name":"r"}],"output":{"generics":["icodecoder"],"name":"imageresult"}}],[11,"dimensions","","",20,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",20,null],[11,"read_image","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to `w`.",21,{"inputs":[{"name":"w"}],"output":{"name":"icoencoder"}}],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.  The dimensions of the image must be between 1 and 256 (inclusive) or an error will be returned.",21,null],[0,"jpeg","image","Decoding and Encoding of JPEG Images",null,null],[3,"JPEGDecoder","image::jpeg","JPEG decoder",null,null],[3,"JPEGEncoder","","The representation of a JPEG encoder",null,null],[11,"new","","Create a new encoder that writes its output to `w`",22,{"inputs":[{"name":"w"}],"output":{"name":"jpegencoder"}}],[11,"new_with_quality","","Create a new encoder that writes its output to `w`, and has the quality parameter `quality` with a value in the range 1-100 where 1 is the worst and 100 is the best.",22,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"name":"jpegencoder"}}],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`",22,null],[11,"new","","Create a new decoder that decodes from the stream `r`",23,{"inputs":[{"name":"r"}],"output":{"name":"jpegdecoder"}}],[11,"dimensions","","",23,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",23,null],[11,"read_image","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"from","image","",4,{"inputs":[{"name":"pixelformat"}],"output":{"name":"colortype"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"imageerror"}}],[0,"gif","","Decoding of GIF Images",null,null],[3,"Frame","image::gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",24,null],[12,"dispose","","Disposal method.",24,null],[12,"transparent","","Transparent index (if available).",24,null],[12,"needs_user_input","","True if the frame needs user input do be displayed.",24,null],[12,"top","","Offset from the top border of the canvas.",24,null],[12,"left","","Offset from the left border of the canvas.",24,null],[12,"width","","Width of the frame.",24,null],[12,"height","","Height of the frame.",24,null],[12,"interlaced","","True if the image is interlaced.",24,null],[12,"palette","","Frame local color palette if available.",24,null],[12,"buffer","","Buffer containing the image data. Only indices unless configured differently.",24,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[11,"new","","Creates a new decoder that decodes the input steam `r`",25,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"dimensions","","",25,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",25,null],[11,"read_image","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"new","","Creates a new GIF encoder.",26,{"inputs":[{"name":"w"}],"output":{"name":"encoder"}}],[11,"encode","","Encodes a frame.",26,{"inputs":[{"name":"self"},{"name":"frame"}],"output":{"name":"imageresult"}}],[11,"from","image","",5,{"inputs":[{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"tiff","","Decoding and Encoding of TIFF Images",null,null],[3,"TIFFDecoder","image::tiff","The representation of a TIFF decoder",null,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new decoder that decodes from the stream `r`",27,{"inputs":[{"name":"r"}],"output":{"generics":["tiffdecoder"],"name":"imageresult"}}],[11,"init","","Initializes the decoder.",27,{"inputs":[{"name":"self"}],"output":{"generics":["tiffdecoder"],"name":"imageresult"}}],[11,"next_image","","Reads in the next image. If there is no further image in the TIFF file a format error is returned. To determine whether there are more images call `TIFFDecoder::more_images` instead.",27,{"inputs":[{"name":"self"}],"output":{"generics":["tiffdecoder"],"name":"imageresult"}}],[11,"more_images","","Returns `true` if there is at least one more image available.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"byte_order","","Returns the byte_order",27,{"inputs":[{"name":"self"}],"output":{"name":"byteorder"}}],[11,"read_short","","Reads a TIFF short value",27,{"inputs":[{"name":"self"}],"output":{"generics":["u16","error"],"name":"result"}}],[11,"read_long","","Reads a TIFF long value",27,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"read_offset","","Reads a TIFF IFA offset/value field",27,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"goto_offset","","Moves the cursor to the specified offset",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"dimensions","","",27,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",27,null],[11,"read_image","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[0,"tga","image","Decoding of TGA Images",null,null],[3,"TGADecoder","image::tga","The representation of a TGA decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream `r`",28,{"inputs":[{"name":"r"}],"output":{"name":"tgadecoder"}}],[11,"dimensions","","",28,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",28,null],[11,"read_image","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[0,"bmp","image","Decoding and Encoding of BMP Images",null,null],[3,"BMPEncoder","image::bmp","The representation of a BMP encoder.",null,null],[3,"BMPDecoder","","A bmp decoder",null,null],[11,"new","","Create a new encoder that writes its output to `w`.",29,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.",29,null],[11,"new","","Create a new decoder that decodes from the stream `r`",30,{"inputs":[{"name":"r"}],"output":{"name":"bmpdecoder"}}],[11,"dimensions","","",30,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",30,null],[11,"read_image","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[0,"hdr","image","Decoding of Radiance HDR Images",null,null],[3,"HDRAdapter","image::hdr","Adapter to conform to `ImageDecoder` trait",null,null],[3,"HDRDecoder","","An Radiance HDR decoder",null,null],[3,"RGBE8Pixel","","Refer to wikipedia",null,null],[12,"c","","Color components",31,null],[12,"e","","Exponent",31,null],[3,"HDRImageDecoderIterator","","Scanline buffered pixel by pixel iterator",null,null],[3,"HDRMetadata","","Metadata for Radiance HDR image",null,null],[12,"width","","Width of decoded image. It could be either scanline length,  or scanline count, depending on image orientation. ",32,null],[12,"height","","Height of decoded image. It depends on orientation too.",32,null],[12,"orientation","","Orientation matrix. For standart orientation it is ((1,0),(0,1)) - left to right, top to bottom. First pair tells how resulting pixel coordinates change along a scanline. Second pair tells how they change from one scanline to the next.",32,null],[12,"exposure","","Divide color values by exposure to get to get physical radiance in watts/steradian/m^2 Image may not contain physical data, even if this field is set. ",32,null],[12,"color_correction","","Divide color values by corresponing tuple member (r, g, b) to get to get physical radiance in watts/steradian/m^2 Image may not contain physical data, even if this field is set. ",32,null],[12,"pixel_aspect_ratio","","Pixel height divided by pixel width",32,null],[12,"custom_attributes","","All lines contained in image header are put here. Ordering of lines is preserved. Lines in the form \"key=value\" are represented as (\"key\", \"value\"). All other lines are (\"\", \"line\")",32,null],[3,"HDREncoder","","Radiance HDR encoder",null,null],[5,"rgbe8","","Creates `RGBE8Pixel` from components",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"rgbe8pixel"}}],[5,"read_raw_file","","Helper function for reading raw 3-channel f32 images",null,{"inputs":[{"name":"p"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_rgbe8","","Converts `Rgb<f32>` into `RGBE8Pixel`",null,{"inputs":[{"generics":["f32"],"name":"rgb"}],"output":{"name":"rgbe8pixel"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates adapter ",33,{"inputs":[{"name":"r"}],"output":{"generics":["hdradapter"],"name":"imageresult"}}],[11,"new_nonstrict","","Allows reading old Radiance HDR images",33,{"inputs":[{"name":"r"}],"output":{"generics":["hdradapter"],"name":"imageresult"}}],[11,"dimensions","","",33,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",33,null],[11,"read_image","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"rgbe8pixel"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"rgbe8pixel"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"rgbe8pixel"}],"output":{"name":"bool"}}],[11,"to_hdr","","Converts `RGBE8Pixel` into `Rgb<f32>` linearly    ",31,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"rgb"}}],[11,"to_ldr","","Converts `RGBE8Pixel` into `Rgb<T>` with scale=1 and gamma=2.2  ",31,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_ldr_scale_gamma","","Converts RGBE8Pixel into Rgb using provided scale and gamma",31,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":{"name":"rgb"}}],[11,"new","","Reads Radiance HDR image header from stream `r` if the header is valid, creates HDRDecoder  strict mode is enabled",34,{"inputs":[{"name":"r"}],"output":{"generics":["hdrdecoder"],"name":"imageresult"}}],[11,"with_strictness","","Reads Radiance HDR image header from stream `reader`, if the header is valid, creates `HDRDecoder`.",34,{"inputs":[{"name":"r"},{"name":"bool"}],"output":{"generics":["hdrdecoder"],"name":"imageresult"}}],[11,"metadata","","Returns file metadata. Refer to `HDRMetadata` for details.",34,{"inputs":[{"name":"self"}],"output":{"name":"hdrmetadata"}}],[11,"read_image_native","","Consumes decoder and returns a vector of RGBE8 pixels",34,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"imageresult"}}],[11,"read_image_transform","","Consumes decoder and returns a vector of tranformed pixels",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["vec"],"name":"imageresult"}}],[11,"read_image_ldr","","Consumes decoder and returns a vector of Rgb pixels. scale = 1, gamma = 2.2",34,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"imageresult"}}],[11,"read_image_hdr","","Consumes decoder and returns a vector of Rgb pixels.",34,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"imageresult"}}],[11,"into_iter","","",34,null],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"hdrmetadata"}}],[11,"new","","Creates encoder",36,{"inputs":[{"name":"w"}],"output":{"name":"hdrencoder"}}],[11,"encode","","Encodes the image `data` that has dimensions `width` and `height`",36,null],[17,"SIGNATURE","","Radiance HDR file signature",null,null],[11,"fmt","image","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"imageerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"imageformat"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new subimage",39,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",39,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"change_bounds","","Change the coordinates of this subimage.",39,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"to_image","","Convert this subimage to an ImageBuffer",39,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[11,"dimensions","","",39,null],[11,"bounds","","",39,null],[11,"get_pixel","","",39,null],[11,"put_pixel","","",39,null],[11,"blend_pixel","","DEPRECATED: This method will be removed. Blend the pixel directly instead.",39,null],[11,"get_pixel_mut","","",39,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey pixels with transparency.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"to_rgb","","Returns a copy of this image as an RGB image.",9,{"inputs":[{"name":"self"}],"output":{"name":"rgbimage"}}],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",9,{"inputs":[{"name":"self"}],"output":{"name":"rgbaimage"}}],[11,"to_luma","","Returns a copy of this image as a Luma image.",9,{"inputs":[{"name":"self"}],"output":{"name":"grayimage"}}],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",9,{"inputs":[{"name":"self"}],"output":{"name":"grayalphaimage"}}],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"as_rgb8","","Return a reference to an 8bit RGB image",9,{"inputs":[{"name":"self"}],"output":{"generics":["rgbimage"],"name":"option"}}],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",9,{"inputs":[{"name":"self"}],"output":{"generics":["rgbimage"],"name":"option"}}],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",9,{"inputs":[{"name":"self"}],"output":{"generics":["rgbaimage"],"name":"option"}}],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",9,{"inputs":[{"name":"self"}],"output":{"generics":["rgbaimage"],"name":"option"}}],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",9,{"inputs":[{"name":"self"}],"output":{"generics":["grayimage"],"name":"option"}}],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",9,{"inputs":[{"name":"self"}],"output":{"generics":["grayimage"],"name":"option"}}],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",9,{"inputs":[{"name":"self"}],"output":{"generics":["grayalphaimage"],"name":"option"}}],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",9,{"inputs":[{"name":"self"}],"output":{"generics":["grayalphaimage"],"name":"option"}}],[11,"raw_pixels","","Return this image's pixels as a byte vector.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"color","","Return this image's color type.",9,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"grayscale","","Return a grayscale version of this image.",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"invert","","Invert the colors of this image. This method operates inplace.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"resize","","Resize this image using the specified filter algorithm. Returns a new image. The image's aspect ratio is preserved. The image is scaled to the maximum possible size that fits within the bounds specified by `nwidth` and `nheight`.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"resize_exact","","Resize this image using the specified filter algorithm. Returns a new image. Does not preserve aspect ratio. `nwidth` and `nheight` are the new image's dimensions",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"blur","","Performs a Gaussian blur on this image. `sigma` is a measure of how much to blur by.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"unsharpen","","Performs an unsharpen mask on this image. `sigma` is the amount to blur the image by. `threshold` is a control of how much to sharpen.",9,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",9,null],[11,"adjust_contrast","","Adjust the contrast of this image. `contrast` is the amount to adjust the contrast by. Negative values decrease the contrast and positive values increase the contrast.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"brighten","","Brighten the pixels of this image. `value` is the amount to brighten each pixel by. Negative values decrease the brightness and positive values increase it.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"huerotate","","Hue rotate the supplied image. `value` is the degrees to rotate each pixel by. 0 and 360 do nothing, the rest rotates by the given degree value. just like the css webkit filter hue-rotate(180)",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"flipv","","Flip this image vertically",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"fliph","","Flip this image horizontally",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"rotate90","","Rotate this image 90 degrees clockwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"rotate180","","Rotate this image 180 degrees clockwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"rotate270","","Rotate this image 270 degrees clockwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"save","","Encode this image and write it to `w`",9,{"inputs":[{"name":"self"},{"name":"w"},{"name":"imageformat"}],"output":{"name":"imageresult"}}],[11,"dimensions","","",9,null],[11,"bounds","","",9,null],[11,"get_pixel","","",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["u8"],"name":"rgba"}}],[11,"put_pixel","","",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"generics":["u8"],"name":"rgba"}],"output":null}],[11,"blend_pixel","","DEPRECATED: Use iterator `pixels_mut` to blend the pixels directly.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"generics":["u8"],"name":"rgba"}],"output":null}],[11,"get_pixel_mut","","DEPRECATED: Do not use is function: It is unimplemented!",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"channel_count","","",2,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",2,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",2,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",2,null],[11,"channels_mut","","",2,null],[11,"channels4","","",2,null],[11,"from_channels","","",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"from_slice","","",2,null],[11,"from_slice_mut","","",2,null],[11,"to_rgb","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",2,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",2,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",2,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"rgb"}}],[11,"apply_with_alpha","","",2,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",2,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply2","","",2,{"inputs":[{"name":"self"},{"name":"rgb"},{"name":"f"}],"output":null}],[11,"invert","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",2,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":null}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"channel_count","","",0,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",0,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",0,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",0,null],[11,"channels_mut","","",0,null],[11,"channels4","","",0,null],[11,"from_channels","","",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"luma"}}],[11,"from_slice","","",0,null],[11,"from_slice_mut","","",0,null],[11,"to_rgb","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",0,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",0,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"luma"}}],[11,"apply_with_alpha","","",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",0,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply2","","",0,{"inputs":[{"name":"self"},{"name":"luma"},{"name":"f"}],"output":null}],[11,"invert","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",0,{"inputs":[{"name":"self"},{"name":"luma"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"channel_count","","",3,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",3,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",3,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",3,null],[11,"channels_mut","","",3,null],[11,"channels4","","",3,null],[11,"from_channels","","",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgba"}}],[11,"from_slice","","",3,null],[11,"from_slice_mut","","",3,null],[11,"to_rgb","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",3,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",3,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply","","",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",3,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"rgba"}}],[11,"apply_with_alpha","","",3,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",3,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply2","","",3,{"inputs":[{"name":"self"},{"name":"rgba"},{"name":"f"}],"output":null}],[11,"invert","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",3,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"channel_count","","",1,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",1,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",1,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",1,null],[11,"channels_mut","","",1,null],[11,"channels4","","",1,null],[11,"from_channels","","",1,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"lumaa"}}],[11,"from_slice","","",1,null],[11,"from_slice_mut","","",1,null],[11,"to_rgb","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",1,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",1,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",1,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"lumaa"}}],[11,"apply_with_alpha","","",1,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",1,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply2","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"},{"name":"f"}],"output":null}],[11,"invert","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw","","Contructs a buffer from a generic container (for example a `Vec` or a slice)",40,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"container"}],"output":{"generics":["imagebuffer"],"name":"option"}}],[11,"into_raw","","Returns the underlying raw buffer",40,{"inputs":[{"name":"self"}],"output":{"name":"container"}}],[11,"dimensions","","The width and height of this image.",40,null],[11,"width","","The width of this image.",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"pixels","","Returns an iterator over the pixels of this image.",40,{"inputs":[{"name":"self"}],"output":{"name":"pixels"}}],[11,"enumerate_pixels","","Enumerates over the pixels of the image. The iterator yields the coordinates of each pixel along with a reference to them.",40,{"inputs":[{"name":"self"}],"output":{"name":"enumeratepixels"}}],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",40,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",40,{"inputs":[{"name":"self"}],"output":{"name":"pixelsmut"}}],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image.",40,{"inputs":[{"name":"self"}],"output":{"name":"enumeratepixelsmut"}}],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",40,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","Puts a pixel at location `(x, y)`",40,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"save","","Saves the buffer to a file at the path specified.",40,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"result"}}],[11,"deref","","",40,null],[11,"deref_mut","","",40,null],[11,"index","","",40,null],[11,"index_mut","","",40,null],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",40,null],[11,"bounds","","",40,null],[11,"get_pixel","","",40,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"get_pixel_mut","","",40,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y), ignoring bounds checking.",40,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","",40,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y), ignoring bounds checking.",40,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",40,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"new","","Creates a new image buffer based on a `Vec<P::Subpixel>`.",40,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",40,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function. The arguments to the function are the pixel's x and y coordinates.",40,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[11,"from_vec","","Creates an image buffer out of an existing buffer. Returns None if the buffer is not big enough.",40,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":{"generics":["imagebuffer"],"name":"option"}}],[11,"into_vec","","Consumes the image buffer and returns the underlying data as an owned buffer",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"convert","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[11,"new","","Contructs a new frame iterator",41,{"inputs":[{"generics":["frame"],"name":"vec"}],"output":{"name":"frames"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"new","","Contructs a new frame",42,{"inputs":[{"name":"rgbaimage"}],"output":{"name":"frame"}}],[11,"from_parts","","Contructs a new frame",42,{"inputs":[{"name":"rgbaimage"},{"name":"u32"},{"name":"u32"},{"generics":["u16"],"name":"ratio"}],"output":{"name":"frame"}}],[11,"delay","","Delay of this frame",42,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"ratio"}}],[11,"buffer","","Returns the image buffer",42,{"inputs":[{"name":"self"}],"output":{"name":"rgbaimage"}}],[11,"into_buffer","","Returns the image buffer",42,{"inputs":[{"name":"self"}],"output":{"name":"rgbaimage"}}],[11,"left","","Returns the x offset",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"top","","Returns the y offset",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["frame"],"name":"option"}}],[6,"ImageResult","","Result of an image decoding/encoding process",null,null],[6,"RgbImage","","Sendable Rgb image buffer",null,null],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer",null,null],[6,"GrayImage","","Sendable grayscale image buffer",null,null],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer",null,null],[8,"ImageDecoder","","The trait that all decoders implement",null,null],[10,"dimensions","","Returns a tuple containing the width and height of the image",43,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[10,"colortype","","Returns the color type of the image e.g. RGB(8) (8bit RGB)",43,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[10,"row_len","","Returns the length in bytes of one decoded row of the image",43,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[10,"read_scanline","","Reads one row from the image into `buf` and returns the row index",43,null],[10,"read_image","","Decodes the entire image and return it as a Vector",43,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"is_animated","","Returns true if the image is animated",43,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",43,{"inputs":[{"name":"self"}],"output":{"generics":["frames"],"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle starting from `x` and `y` and having `length` and `width`",43,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["vec"],"name":"imageresult"}}],[8,"GenericImage","","A trait for manipulating images.",null,null],[16,"Pixel","","The type of pixel.",44,null],[10,"dimensions","","The width and height of this image.",44,null],[11,"width","","The width of this image.",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"bounds","","The bounding rectangle of this image.",44,null],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",44,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"get_pixel","","Returns the pixel located at (x, y)",44,null],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",44,null],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",44,null],[10,"put_pixel","","Put a pixel at location (x, y)",44,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",44,null],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",44,null],[11,"pixels","","Returns an Iterator over the pixels of this image. The iterator yields the coordinates of each pixel along with their value",44,{"inputs":[{"name":"self"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",44,{"inputs":[{"name":"self"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",44,{"inputs":[{"name":"self"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",44,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[8,"Pixel","","A generalized pixel.",null,null],[16,"Subpixel","","The underlying subpixel type.",45,null],[10,"channel_count","","Returns the number of channels of this pixel type.",45,{"inputs":[],"output":{"name":"u8"}}],[10,"channels","","Returns the components as a slice.",45,null],[10,"channels_mut","","Returns the components as a mutable slice",45,null],[10,"color_model","","Returns a string that can help to interprete the meaning each channel See gimp babl.",45,{"inputs":[],"output":{"name":"str"}}],[10,"color_type","","Returns the ColorType for this pixel format",45,{"inputs":[],"output":{"name":"colortype"}}],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel has less than 4 channels the remainder is filled with the maximum value",45,null],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d. If the pixel does not contain 4 channels the extra are ignored.",45,null],[10,"from_slice","","Returns a view into a slice.",45,null],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",45,null],[10,"to_rgb","","Convert this pixel to RGB",45,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",45,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[10,"to_luma","","Convert this pixel to luma",45,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",45,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[10,"map","","Apply the function `f` to each channel of this pixel.",45,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply","","Apply the function `f` to each channel of this pixel.",45,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"map_with_alpha","","Apply the function `f` to each channel except the alpha channel. Apply the function `g` to the alpha channel.",45,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"self"}}],[10,"apply_with_alpha","","Apply the function `f` to each channel except the alpha channel. Apply the function `g` to the alpha channel. Works in-place.",45,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[10,"map2","","Apply the function `f` to each channel of this pixel and `other` pairwise.",45,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply2","","Apply the function `f` to each channel of this pixel and `other` pairwise. Works in-place.",45,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":null}],[10,"invert","","Invert this pixel",45,{"inputs":[{"name":"self"}],"output":null}],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",45,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[8,"ConvertBuffer","","Provides color conversions for whole image buffers.",null,null],[10,"convert","","Converts `self` to a buffer of type T",46,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Primitive","","Primitive trait from old stdlib",null,null],[11,"from_rgba","image::gif","Creates a frame from pixels in RGBA format.",24,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",24,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"frame"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"is_animated","image","Returns true if the image is animated",43,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",43,{"inputs":[{"name":"self"}],"output":{"generics":["frames"],"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle starting from `x` and `y` and having `length` and `width`",43,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["vec"],"name":"imageresult"}}],[11,"width","","The width of this image.",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",44,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",44,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",44,null],[11,"pixels","","Returns an Iterator over the pixels of this image. The iterator yields the coordinates of each pixel along with their value",44,{"inputs":[{"name":"self"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",44,{"inputs":[{"name":"self"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",44,{"inputs":[{"name":"self"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",44,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"expand_palette","","Expands a color palette by re-using the existing buffer. Assumes 8 bit per pixel. Uses an optionally transparent index to adjust it's alpha value accordingly.",47,null]],"paths":[[3,"Luma"],[3,"LumaA"],[3,"Rgb"],[3,"Rgba"],[4,"ColorType"],[4,"ImageError"],[4,"DecodingResult"],[4,"FilterType"],[4,"ImageFormat"],[4,"DynamicImage"],[3,"NeuQuant"],[8,"ColorMap"],[3,"BiLevel"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[3,"PPMEncoder"],[3,"PPMDecoder"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ICODecoder"],[3,"ICOEncoder"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[3,"Frame"],[3,"Decoder"],[3,"Encoder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"BMPEncoder"],[3,"BMPDecoder"],[3,"RGBE8Pixel"],[3,"HDRMetadata"],[3,"HDRAdapter"],[3,"HDRDecoder"],[3,"HDRImageDecoderIterator"],[3,"HDREncoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"ImageDecoder"],[8,"GenericImage"],[8,"Pixel"],[8,"ConvertBuffer"],[6,"GrayImage"]]};
searchIndex["inflate"] = {"doc":"A DEFLATE decoder written in rust.","items":[[3,"InflateWriter","inflate","A DEFLATE decoder.",null,null],[3,"InflateStream","","",null,null],[5,"inflate_bytes","","Decompress the given slice of DEFLATE compressed data.",null,null],[5,"inflate_bytes_zlib","","Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data.",null,null],[11,"new","","",0,{"inputs":[{"name":"w"}],"output":{"name":"inflatewriter"}}],[11,"from_zlib","","",0,{"inputs":[{"name":"w"}],"output":{"name":"inflatewriter"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a new stream for decoding raw deflate encoded data.",1,{"inputs":[],"output":{"name":"inflatestream"}}],[11,"from_zlib","","Create a new stream for decoding deflate encoded data with a zlib header and footer",1,{"inputs":[],"output":{"name":"inflatestream"}}],[11,"update","","Try to uncompress/decode the data in `data`.",1,null]],"paths":[[3,"InflateWriter"],[3,"InflateStream"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[4,"Diff","","A type returned by the `diff_with` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",null,null],[13,"NoElements","","Empty iterator",2,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,null],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",null,null],[13,"First","","This is the first element.",3,null],[13,"Middle","","This is neither the first nor the last element.",3,null],[13,"Last","","This is the last element.",3,null],[13,"Only","","This is the only element.",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`. Contains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted, only yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted, only yielding a value from the parameter iterator.",4,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",5,null],[13,"Done","","Fold is complete and will return this value",5,null],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",null,{"inputs":[{"name":"i"}],"output":{"name":"constuples"}}],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"generics":["diff"],"name":"option"}}],[5,"kmerge_by","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"kmergeby"}}],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",null,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"repeatn"}}],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",null,{"inputs":[{"name":"f"}],"output":{"name":"repeatcall"}}],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"iterate"}}],[5,"multizip","","An iterator that generalizes .zip() and allows running multiple iterators in lockstep.",null,{"inputs":[{"name":"u"}],"output":{"name":"zip"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"put_back","","Create an iterator where you can put back a single item",null,{"inputs":[{"name":"i"}],"output":{"name":"putback"}}],[5,"put_back_n","","Create an iterator where you can put back multiple values to the front of the iteration.",null,{"inputs":[{"name":"i"}],"output":{"name":"putbackn"}}],[5,"multipeek","","An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.",null,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators using the ordering function.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"rciter","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",null,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[5,"enumerate","","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"cloned","","Create an iterator that clones each element from &T to T",null,{"inputs":[{"name":"i"}],"output":{"name":"cloned"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[5,"equal","","Return `true` if both iterators produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same semantics as equal(a, b).",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[0,"structs","","The concrete iterator types.",null,null],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",null,null],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","See `multipeek()` for more information.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",null,null],[3,"Combinations","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"IntoChunks","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupBy","","`GroupBy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order. If all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"KMergeBy","","An iterator adaptor that merges an abitrary number of base iterators according to an ordering function.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",null,null],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",null,null],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",6,null],[3,"RepeatN","","An iterator that produces n repetitions of an element.",null,null],[3,"RepeatCall","","See `repeat_call` for more information.",null,null],[3,"Unfold","","See `unfold` for more information.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",7,null],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"TupleBuffer","","An iterator over a incomplete tuple.",null,null],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",null,null],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",null,null],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","See `multizip` for more information.",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"multipeek"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reset_peek","","Reset the peeking “cursor”",8,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn't advance itself. `.peek()` can be called multiple times, to peek further ahead.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"interleave"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"interleaveshortest"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"putback"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_value","","put back value `value` (builder method)",11,null],[11,"into_parts","","Split the `PutBack` into its parts.",11,null],[11,"put_back","","Put back a single value to the front of the iterator.",11,null],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"all","","",11,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"bool"}}],[11,"fold","","",11,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"putbackn"}}],[11,"put_back","","Puts x in front of the iterator. The values are yielded in order of the most recently put back values first.",12,null],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"batching"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"step"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"fold","","",19,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"uniqueby"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"intersperse"}}],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"kmerge"}}],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"clone","itertools","",2,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools::structs","",38,{"inputs":[{"name":"self"}],"output":{"name":"padusing"}}],[11,"next","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peeking_next","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"peeking_next","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"rciter"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",40,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"next_back","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unfold"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"iterate"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next","","",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"next","","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"next","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",45,{"inputs":[{"name":"self"}],"output":{"name":"tuplebuffer"}}],[11,"next","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools","",3,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"into_inner","","Return the inner value.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","itertools::structs","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"zipeq"}}],[11,"next","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ziplongest"}}],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools","",4,{"inputs":[{"name":"self"}],"output":{"name":"eitherorboth"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","itertools::structs","",50,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"new","","Deprecated: renamed to multizip",50,{"inputs":[{"name":"u"}],"output":{"name":"zip"}}],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",null,null],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both run out.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",52,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"zipeq"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Return an iterable that can group iterator elements. Consecutive elements that map to the same key (“runs”), are assigned to the same group.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"group_by_lazy","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"chunks","","Return an iterable that can chunk the iterator.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"intochunks"}}],[11,"chunks_lazy","","",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"intochunks"}}],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",52,{"inputs":[{"name":"self"}],"output":{"name":"tuplewindows"}}],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",52,{"inputs":[{"name":"self"}],"output":{"name":"tuples"}}],[11,"tee","","Split into an iterator pair that both yield all elements from the original iterator.",52,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"step"}}],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mapresults"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",52,{"inputs":[{"name":"self"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by merging them in ascending order.",52,{"inputs":[{"name":"self"}],"output":{"name":"kmerge"}}],[11,"kmerge_by","","Return an iterator adaptor that flattens an iterator of iterators by merging them according to the given closure.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"kmergeby"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"product"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",52,{"inputs":[{"name":"self"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration. Duplicates are detected using hash and equality.",52,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and  takes items while the closure `accept` returns `true`.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"peekingtakewhile"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",52,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",52,{"inputs":[{"name":"self"}],"output":{"name":"tuplecombinations"}}],[11,"combinations","","Return an iterator adaptor that iterates over the `n`-length combinations of the elements from an iterator.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"combinations"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",52,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",52,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",52,{"inputs":[{"name":"self"}],"output":{"name":"withposition"}}],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",52,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`, for convenience.",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"format"}}],[11,"format_default","","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"format"}}],[11,"format_with","","Format all iterator elements, separated by `sep`.",52,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"formatwith"}}],[11,"fold_results","","Fold `Result` values from an iterator.",52,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",52,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",52,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"vec"}}],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",52,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",52,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip","","Create an iterator running multiple iterators in lockstep.",null,null],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"deref_mut","","",0,null],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"either"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref","","",0,null],[11,"extend","","",0,null],[11,"read","","",0,null],[11,"read_to_end","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"fill_buf","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"consume","","",0,null],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"RcIter"],[3,"Unfold"],[3,"MultiPeek"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Combinations"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"MapResults"],[3,"ConsTuples"],[3,"Format"],[3,"FormatWith"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"KMerge"],[3,"KMergeBy"],[3,"PadUsing"],[3,"PeekingTakeWhile"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["jpeg_decoder"] = {"doc":"This crate contains a JPEG decoder.","items":[[3,"Decoder","jpeg_decoder","JPEG decoder",null,null],[3,"ImageInfo","","Represents metadata of an image.",null,null],[12,"width","","The width of the image, in pixels.",0,null],[12,"height","","The height of the image, in pixels.",0,null],[12,"pixel_format","","The pixel format of the image.",0,null],[4,"PixelFormat","","An enumeration over combinations of color spaces and bit depths a pixel can have.",null,null],[13,"L8","","Luminance (grayscale), 8 bits",1,null],[13,"RGB24","","RGB, 8 bits per channel",1,null],[13,"CMYK32","","CMYK, 8 bits per channel",1,null],[4,"Error","","Errors that can occur while decoding a JPEG image.",null,null],[13,"Format","","The image is not formatted properly. The string contains detailed information about the error.",2,null],[13,"Unsupported","","The image makes use of a JPEG feature not (currently) supported by this library.",2,null],[13,"Io","","An I/O error occurred while decoding the image.",2,null],[13,"Internal","","An internal error occurred while decoding the image.",2,null],[4,"UnsupportedFeature","","An enumeration over JPEG features (currently) unsupported by this library.",null,null],[13,"Hierarchical","","Hierarchical JPEG.",3,null],[13,"Lossless","","Lossless JPEG.",3,null],[13,"ArithmeticEntropyCoding","","JPEG using arithmetic entropy coding instead of Huffman coding.",3,null],[13,"SamplePrecision","","Sample precision in bits. 8 bit sample precision is what is currently supported.",3,null],[13,"ComponentCount","","Number of components in an image. 1, 3 and 4 components are currently supported.",3,null],[13,"DNL","","An image can specify a zero height in the frame header and use the DNL (Define Number of Lines) marker at the end of the first scan to define the number of lines in the frame.",3,null],[13,"SubsamplingRatio","","Subsampling ratio.",3,null],[13,"NonIntegerSubsamplingRatio","","A subsampling ratio not representable as an integer.",3,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"pixelformat"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"imageinfo"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Decoder` using the reader `reader`.",4,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"info","","Returns metadata about the image.",4,{"inputs":[{"name":"self"}],"output":{"generics":["imageinfo"],"name":"option"}}],[11,"read_info","","Tries to read metadata from the image without decoding it.",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"decode","","Decodes the image and returns the decoded pixels if successful.",4,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"recverror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"senderror"}],"output":{"name":"error"}}]],"paths":[[3,"ImageInfo"],[4,"PixelFormat"],[4,"Error"],[4,"UnsupportedFeature"],[3,"Decoder"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"dirent","","",null,null],[12,"d_ino","","",35,null],[12,"d_off","","",35,null],[12,"d_reclen","","",35,null],[12,"d_type","","",35,null],[12,"d_name","","",35,null],[3,"dirent64","","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",37,null],[12,"rlim_max","","",37,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",39,null],[12,"ifa_name","","",39,null],[12,"ifa_flags","","",39,null],[12,"ifa_addr","","",39,null],[12,"ifa_netmask","","",39,null],[12,"ifa_ifu","","",39,null],[12,"ifa_data","","",39,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",40,null],[12,"pw_passwd","","",40,null],[12,"pw_uid","","",40,null],[12,"pw_gid","","",40,null],[12,"pw_gecos","","",40,null],[12,"pw_dir","","",40,null],[12,"pw_shell","","",40,null],[3,"spwd","","",null,null],[12,"sp_namp","","",41,null],[12,"sp_pwdp","","",41,null],[12,"sp_lstchg","","",41,null],[12,"sp_min","","",41,null],[12,"sp_max","","",41,null],[12,"sp_warn","","",41,null],[12,"sp_inact","","",41,null],[12,"sp_expire","","",41,null],[12,"sp_flag","","",41,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",42,null],[12,"f_frsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_favail","","",42,null],[12,"f_fsid","","",42,null],[12,"f_flag","","",42,null],[12,"f_namemax","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"ucred","","",null,null],[12,"pid","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",69,null],[12,"mnt_dir","","",69,null],[12,"mnt_type","","",69,null],[12,"mnt_opts","","",69,null],[12,"mnt_freq","","",69,null],[12,"mnt_passno","","",69,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",70,null],[12,"aio_lio_opcode","","",70,null],[12,"aio_reqprio","","",70,null],[12,"aio_buf","","",70,null],[12,"aio_nbytes","","",70,null],[12,"aio_sigevent","","",70,null],[12,"aio_offset","","",70,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",71,null],[12,"e_exit","","",71,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",72,null],[12,"tv_usec","","",72,null],[3,"utmpx","","",null,null],[12,"ut_type","","",73,null],[12,"ut_pid","","",73,null],[12,"ut_line","","",73,null],[12,"ut_id","","",73,null],[12,"ut_user","","",73,null],[12,"ut_host","","",73,null],[12,"ut_exit","","",73,null],[12,"ut_session","","",73,null],[12,"ut_tv","","",73,null],[12,"ut_addr_v6","","",73,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",74,null],[12,"sa_mask","","",74,null],[12,"sa_flags","","",74,null],[12,"sa_restorer","","",74,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",75,null],[12,"ss_flags","","",75,null],[12,"ss_size","","",75,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",76,null],[12,"si_errno","","",76,null],[12,"si_code","","",76,null],[12,"_pad","","",76,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",77,null],[12,"gl_pathv","","",77,null],[12,"gl_offs","","",77,null],[12,"gl_flags","","",77,null],[3,"statfs","","",null,null],[12,"f_type","","",78,null],[12,"f_bsize","","",78,null],[12,"f_blocks","","",78,null],[12,"f_bfree","","",78,null],[12,"f_bavail","","",78,null],[12,"f_files","","",78,null],[12,"f_ffree","","",78,null],[12,"f_fsid","","",78,null],[12,"f_namelen","","",78,null],[12,"f_frsize","","",78,null],[3,"msghdr","","",null,null],[12,"msg_name","","",79,null],[12,"msg_namelen","","",79,null],[12,"msg_iov","","",79,null],[12,"msg_iovlen","","",79,null],[12,"msg_control","","",79,null],[12,"msg_controllen","","",79,null],[12,"msg_flags","","",79,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",80,null],[12,"cmsg_level","","",80,null],[12,"cmsg_type","","",80,null],[3,"termios","","",null,null],[12,"c_iflag","","",81,null],[12,"c_oflag","","",81,null],[12,"c_cflag","","",81,null],[12,"c_lflag","","",81,null],[12,"c_line","","",81,null],[12,"c_cc","","",81,null],[12,"c_ispeed","","",81,null],[12,"c_ospeed","","",81,null],[3,"flock","","",null,null],[12,"l_type","","",82,null],[12,"l_whence","","",82,null],[12,"l_start","","",82,null],[12,"l_len","","",82,null],[12,"l_pid","","",82,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",83,null],[12,"loads","","",83,null],[12,"totalram","","",83,null],[12,"freeram","","",83,null],[12,"sharedram","","",83,null],[12,"bufferram","","",83,null],[12,"totalswap","","",83,null],[12,"freeswap","","",83,null],[12,"procs","","",83,null],[12,"pad","","",83,null],[12,"totalhigh","","",83,null],[12,"freehigh","","",83,null],[12,"mem_unit","","",83,null],[12,"_f","","",83,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",84,null],[12,"msg_stime","","",84,null],[12,"msg_rtime","","",84,null],[12,"msg_ctime","","",84,null],[12,"msg_qnum","","",84,null],[12,"msg_qbytes","","",84,null],[12,"msg_lspid","","",84,null],[12,"msg_lrpid","","",84,null],[3,"stat","","",null,null],[12,"st_dev","","",85,null],[12,"st_ino","","",85,null],[12,"st_nlink","","",85,null],[12,"st_mode","","",85,null],[12,"st_uid","","",85,null],[12,"st_gid","","",85,null],[12,"st_rdev","","",85,null],[12,"st_size","","",85,null],[12,"st_blksize","","",85,null],[12,"st_blocks","","",85,null],[12,"st_atime","","",85,null],[12,"st_atime_nsec","","",85,null],[12,"st_mtime","","",85,null],[12,"st_mtime_nsec","","",85,null],[12,"st_ctime","","",85,null],[12,"st_ctime_nsec","","",85,null],[3,"stat64","","",null,null],[12,"st_dev","","",86,null],[12,"st_ino","","",86,null],[12,"st_nlink","","",86,null],[12,"st_mode","","",86,null],[12,"st_uid","","",86,null],[12,"st_gid","","",86,null],[12,"st_rdev","","",86,null],[12,"st_size","","",86,null],[12,"st_blksize","","",86,null],[12,"st_blocks","","",86,null],[12,"st_atime","","",86,null],[12,"st_atime_nsec","","",86,null],[12,"st_mtime","","",86,null],[12,"st_mtime_nsec","","",86,null],[12,"st_ctime","","",86,null],[12,"st_ctime_nsec","","",86,null],[3,"statfs64","","",null,null],[12,"f_type","","",87,null],[12,"f_bsize","","",87,null],[12,"f_blocks","","",87,null],[12,"f_bfree","","",87,null],[12,"f_bavail","","",87,null],[12,"f_files","","",87,null],[12,"f_ffree","","",87,null],[12,"f_fsid","","",87,null],[12,"f_namelen","","",87,null],[12,"f_frsize","","",87,null],[12,"f_flags","","",87,null],[12,"f_spare","","",87,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",88,null],[12,"f_frsize","","",88,null],[12,"f_blocks","","",88,null],[12,"f_bfree","","",88,null],[12,"f_bavail","","",88,null],[12,"f_files","","",88,null],[12,"f_ffree","","",88,null],[12,"f_favail","","",88,null],[12,"f_fsid","","",88,null],[12,"f_flag","","",88,null],[12,"f_namemax","","",88,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",89,null],[12,"exponent","","",89,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",90,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",91,null],[12,"swd","","",91,null],[12,"ftw","","",91,null],[12,"fop","","",91,null],[12,"rip","","",91,null],[12,"rdp","","",91,null],[12,"mxcsr","","",91,null],[12,"mxcr_mask","","",91,null],[12,"_st","","",91,null],[12,"_xmm","","",91,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",92,null],[12,"swd","","",92,null],[12,"ftw","","",92,null],[12,"fop","","",92,null],[12,"rip","","",92,null],[12,"rdp","","",92,null],[12,"mxcsr","","",92,null],[12,"mxcr_mask","","",92,null],[12,"st_space","","",92,null],[12,"xmm_space","","",92,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",93,null],[12,"r14","","",93,null],[12,"r13","","",93,null],[12,"r12","","",93,null],[12,"rbp","","",93,null],[12,"rbx","","",93,null],[12,"r11","","",93,null],[12,"r10","","",93,null],[12,"r9","","",93,null],[12,"r8","","",93,null],[12,"rax","","",93,null],[12,"rcx","","",93,null],[12,"rdx","","",93,null],[12,"rsi","","",93,null],[12,"rdi","","",93,null],[12,"orig_rax","","",93,null],[12,"rip","","",93,null],[12,"cs","","",93,null],[12,"eflags","","",93,null],[12,"rsp","","",93,null],[12,"ss","","",93,null],[12,"fs_base","","",93,null],[12,"gs_base","","",93,null],[12,"ds","","",93,null],[12,"es","","",93,null],[12,"fs","","",93,null],[12,"gs","","",93,null],[3,"user","","",null,null],[12,"regs","","",94,null],[12,"u_fpvalid","","",94,null],[12,"i387","","",94,null],[12,"u_tsize","","",94,null],[12,"u_dsize","","",94,null],[12,"u_ssize","","",94,null],[12,"start_code","","",94,null],[12,"start_stack","","",94,null],[12,"signal","","",94,null],[12,"u_ar0","","",94,null],[12,"u_fpstate","","",94,null],[12,"magic","","",94,null],[12,"u_comm","","",94,null],[12,"u_debugreg","","",94,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",95,null],[12,"fpregs","","",95,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",96,null],[12,"uc_link","","",96,null],[12,"uc_stack","","",96,null],[12,"uc_mcontext","","",96,null],[12,"uc_sigmask","","",96,null],[3,"ipc_perm","","",null,null],[12,"__key","","",97,null],[12,"uid","","",97,null],[12,"gid","","",97,null],[12,"cuid","","",97,null],[12,"cgid","","",97,null],[12,"mode","","",97,null],[12,"__seq","","",97,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",98,null],[12,"shm_segsz","","",98,null],[12,"shm_atime","","",98,null],[12,"shm_dtime","","",98,null],[12,"shm_ctime","","",98,null],[12,"shm_cpid","","",98,null],[12,"shm_lpid","","",98,null],[12,"shm_nattch","","",98,null],[3,"termios2","","",null,null],[12,"c_iflag","","",99,null],[12,"c_oflag","","",99,null],[12,"c_cflag","","",99,null],[12,"c_lflag","","",99,null],[12,"c_line","","",99,null],[12,"c_cc","","",99,null],[12,"c_ispeed","","",99,null],[12,"c_ospeed","","",99,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"termios2"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"dl_phdr_info"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"elf32_phdr"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"elf64_phdr"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"mntent"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["libloading"] = {"doc":"A memory-safer wrapper around system dynamic library loading primitives.","items":[[3,"Library","libloading","A loaded dynamic library.",null,null],[3,"Symbol","","Symbol from a library.",null,null],[0,"os","","Unsafe, platform specific bindings to dynamic library loading facilities.",null,null],[0,"unix","libloading::os","UNIX implementation of dynamic library loading.",null,null],[3,"Library","libloading::os::unix","A platform-specific equivalent of the cross-platform `Library`.",null,null],[3,"Symbol","","Symbol from a library.",null,null],[11,"new","","Find and load a shared library (module).",0,{"inputs":[{"name":"p"}],"output":{"generics":["library"],"name":"result"}}],[11,"this","","Load the dynamic libraries linked into main program.",0,{"inputs":[],"output":{"name":"library"}}],[11,"open","","Find and load a shared library (module).",0,{"inputs":[{"name":"option"},{"name":"c_int"}],"output":{"generics":["library"],"name":"result"}}],[11,"get","","Get a pointer to function or static variable by symbol name.",0,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lift_option","","Lift Option out of the symbol.",1,{"inputs":[{"name":"self"}],"output":{"generics":["symbol"],"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"windows","libloading::os","Windows implementation of dynamic library loading.",null,null],[0,"changelog","libloading","Project changelog",null,null],[0,"r0_4_3","libloading::changelog","Release 0.4.3 (2017-12-07)",null,null],[0,"r0_4_2","","Release 0.4.2 (2017-09-24)",null,null],[0,"r0_4_1","","Release 0.4.1 (2017-08-29)",null,null],[0,"r0_4_0","","Release 0.4.0 (2017-05-01)",null,null],[0,"r0_3_4","","Release 0.3.4 (2017-03-25)",null,null],[0,"r0_3_3","","Release 0.3.3 (2017-03-25)",null,null],[0,"r0_3_2","","Release 0.3.2 (2017-02-10)",null,null],[0,"r0_3_1","","Release 0.3.1 (2016-10-01)",null,null],[0,"r0_3_0","","Release 0.3.0 (2016-07-27)",null,null],[6,"Result","libloading","",null,null],[11,"new","","Find and load a dynamic library.",2,{"inputs":[{"name":"p"}],"output":{"generics":["library"],"name":"result"}}],[11,"get","","Get a pointer to function or static variable by symbol name.",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"library"}],"output":{"name":"library"}}],[11,"from","libloading::os::unix","",0,{"inputs":[{"name":"library"}],"output":{"name":"library"}}],[11,"into_raw","libloading","Extract the wrapped `os::platform::Symbol`.",3,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"from_raw","","Wrap the `os::platform::Symbol` into this safe wrapper.",3,{"inputs":[{"name":"symbol"},{"name":"l"}],"output":{"name":"symbol"}}],[11,"lift_option","","Lift Option out of the symbol.",3,{"inputs":[{"name":"self"}],"output":{"generics":["symbol"],"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Library"],[3,"Symbol"],[3,"Library"],[3,"Symbol"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["box","shutdownloggererror"],"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["shutdownloggererror"],"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["loglevel"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["loglevelfilter"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["loglevel"],"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["lzw"] = {"doc":"LZW decoder and encoder","items":[[3,"Decoder","lzw","Decoder for a LZW compressed stream (this algorithm is used for GIF files).",null,null],[3,"DecoderEarlyChange","","Decoder for a LZW compressed stream using an “early change” algorithm (used in TIFF files).",null,null],[3,"Encoder","","LZW encoder using the algorithm of GIF files.",null,null],[3,"LsbReader","","Reads bits from a byte stream, LSB first.",null,null],[3,"LsbWriter","","Writes bits to a byte stream, LSB first.",null,null],[3,"MsbReader","","Reads bits from a byte stream, MSB first.",null,null],[3,"MsbWriter","","Writes bits to a byte stream, MSB first.",null,null],[4,"Bits","","Containes either the consumed bytes and reconstructed bits or only the consumed bytes if the supplied buffer was not bit enough",null,null],[13,"Some","","Consumed bytes, reconstructed bits",0,null],[13,"None","","Consumed bytes",0,null],[5,"encode","","Convenience function that reads and compresses all bytes from `R`.",null,{"inputs":[{"name":"r"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder. ",1,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoder"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder. ",2,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoderearlychange"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",2,null],[11,"new","","Creates a new LZW encoder.",3,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"generics":["encoder"],"name":"result"}}],[11,"encode_bytes","","Compresses `bytes` and writes the result into the writer.",3,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",4,{"inputs":[],"output":{"name":"lsbreader"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",5,{"inputs":[],"output":{"name":"msbreader"}}],[11,"read_bits","","",4,null],[11,"read_bits","","",5,null],[11,"new","","Creates a new bit reader",6,{"inputs":[{"name":"w"}],"output":{"name":"lsbwriter"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",7,{"inputs":[{"name":"w"}],"output":{"name":"msbwriter"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_bits","","",6,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_bits","","",7,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[8,"BitReader","","A bit reader.",null,null],[10,"read_bits","","Returns the next `n` bits.",8,null],[8,"BitWriter","","A bit writer.",null,null],[10,"write_bits","","Writes the next `n` bits.",9,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}]],"paths":[[4,"Bits"],[3,"Decoder"],[3,"DecoderEarlyChange"],[3,"Encoder"],[3,"LsbReader"],[3,"MsbReader"],[3,"LsbWriter"],[3,"MsbWriter"],[8,"BitReader"],[8,"BitWriter"]]};
searchIndex["matrixmultiply"] = {"doc":"General matrix multiplication for f32, f64 matrices.","items":[[5,"sgemm","matrixmultiply","General matrix multiplication (f32)",null,null],[5,"dgemm","","General matrix multiplication (f64)",null,null]],"paths":[]};
searchIndex["nalgebra"] = {"doc":"nalgebra","items":[[8,"Real","nalgebra","Trait shared by all reals.",null,null],[10,"floor","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","",0,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","",0,null],[10,"exp_m1","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pi","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"two_pi","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_2","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_3","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_4","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_6","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_8","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"frac_1_pi","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_pi","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_sqrt_pi","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"e","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"log2_e","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"log10_e","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"ln_2","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"ln_10","","",0,{"inputs":[],"output":{"name":"self"}}],[3,"Id","","The universal identity element wrt. a given operator, usually noted `Id` with a context-dependent subscript.",null,null],[5,"id","","Gets the ubiquitous multiplicative identity element.",null,{"inputs":[],"output":{"name":"id"}}],[5,"one","","Gets the multiplicative identity element.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Gets the additive identity element.",null,{"inputs":[],"output":{"name":"t"}}],[5,"origin","","Gets the origin of the given point.",null,{"inputs":[],"output":{"name":"p"}}],[5,"dimension","","The dimension of the given algebraic entity seen as a vector space.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"wrap","","Wraps `val` into the range `[min, max]` using modular arithmetics.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"clamp","","Returns a reference to the input value clamped to the interval `[min, max]`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Same as `cmp::max`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"min","","Same as `cmp::min`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"abs","","The absolute value of `a`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"inf","","Returns the infimum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"sup","","Returns the supremum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"inf_sup","","Returns simultaneously the infimum and supremum of `a` and `b`.",null,null],[5,"partial_cmp","","Compare `a` and `b` using a partial ordering relation.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[5,"partial_lt","","Returns `true` iff `a` and `b` are comparable and `a < b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_le","","Returns `true` iff `a` and `b` are comparable and `a <= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_gt","","Returns `true` iff `a` and `b` are comparable and `a > b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_ge","","Returns `true` iff `a` and `b` are comparable and `a >= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_min","","Return the minimum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_max","","Return the maximum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_sort2","","Sorts two values in increasing order using a partial ordering.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"try_inverse","","Tries to gets an inverted copy of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"option"}}],[5,"inverse","","Computes the multiplicative inverse of an (always invertible) algebraic entity.",null,{"inputs":[{"name":"m"}],"output":{"name":"m"}}],[5,"dot","","Computes the dot product of two vectors.",null,null],[5,"angle","","Computes the smallest angle between two vectors.",null,null],[5,"norm","","Computes the L2 (euclidean) norm of a vector.",null,null],[5,"norm_squared","","Computes the squared L2 (euclidean) norm of the vector `v`.",null,null],[5,"normalize","","Computes the normalized version of the vector `v`.",null,{"inputs":[{"name":"v"}],"output":{"name":"v"}}],[5,"try_normalize","","Computes the normalized version of the vector `v` or returns `None` if its norm is smaller than `min_norm`.",null,null],[5,"center","","The center of two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"distance","","The distance between two points.",null,null],[5,"distance_squared","","The squared distance between two points.",null,null],[5,"convert","","Converts an object from one type to an equivalent or more general one.",null,{"inputs":[{"name":"from"}],"output":{"name":"to"}}],[5,"try_convert","","Attempts to convert an object to a more specific one.",null,{"inputs":[{"name":"from"}],"output":{"name":"option"}}],[5,"is_convertible","","Indicates if `::try_convert` will succeed without actually performing the conversion.",null,{"inputs":[{"name":"from"}],"output":{"name":"bool"}}],[5,"convert_unchecked","","Use with care! Same as `try_convert` but without any property checks.",null,{"inputs":[{"name":"from"}],"output":{"name":"to"}}],[5,"convert_ref","","Converts an object from one type to an equivalent or more general one.",null,{"inputs":[{"name":"from"}],"output":{"name":"to"}}],[5,"try_convert_ref","","Attempts to convert an object to a more specific one.",null,{"inputs":[{"name":"from"}],"output":{"name":"option"}}],[5,"convert_ref_unchecked","","Use with care! Same as `try_convert` but without any property checks.",null,{"inputs":[{"name":"from"}],"output":{"name":"to"}}],[0,"core","","[Reexported at the root of this crate.] Data structures for vector and matrix computations.",null,null],[3,"Matrix","nalgebra::core","The most generic column-major matrix (and vector) type.",null,null],[12,"data","","The data storage that contains all the matrix components and informations about its number of rows and column (if needed).",1,null],[3,"Unit","","A wrapper that ensures the undelying algebraic entity has a unit norm.",null,null],[3,"SliceStorage","","A matrix data storage for a matrix slice. Only contains an internal reference to another matrix data storage.",null,null],[3,"SliceStorageMut","","A mutable matrix data storage for mutable matrix slice. Only contains an internal mutable reference to another matrix data storage.",null,null],[3,"MatrixArray","","A array-based statically sized matrix data storage.",null,null],[3,"MatrixVec","","A Vec-based matrix data storage. It may be dynamically-sized.",null,null],[0,"dimension","","Traits and tags for identifying the dimension of all algebraic entities.",null,null],[3,"Dynamic","nalgebra::core::dimension","Dim of dynamically-sized algebraic entities.",null,null],[3,"U1","","",null,null],[3,"U0","","",null,null],[3,"U2","","",null,null],[3,"U3","","",null,null],[3,"U4","","",null,null],[3,"U5","","",null,null],[3,"U6","","",null,null],[3,"U7","","",null,null],[3,"U8","","",null,null],[3,"U9","","",null,null],[3,"U10","","",null,null],[3,"U11","","",null,null],[3,"U12","","",null,null],[3,"U13","","",null,null],[3,"U14","","",null,null],[3,"U15","","",null,null],[3,"U16","","",null,null],[3,"U17","","",null,null],[3,"U18","","",null,null],[3,"U19","","",null,null],[3,"U20","","",null,null],[3,"U21","","",null,null],[3,"U22","","",null,null],[3,"U23","","",null,null],[3,"U24","","",null,null],[3,"U25","","",null,null],[3,"U26","","",null,null],[3,"U27","","",null,null],[3,"U28","","",null,null],[3,"U29","","",null,null],[3,"U30","","",null,null],[3,"U31","","",null,null],[3,"U32","","",null,null],[3,"U33","","",null,null],[3,"U34","","",null,null],[3,"U35","","",null,null],[3,"U36","","",null,null],[3,"U37","","",null,null],[3,"U38","","",null,null],[3,"U39","","",null,null],[3,"U40","","",null,null],[3,"U41","","",null,null],[3,"U42","","",null,null],[3,"U43","","",null,null],[3,"U44","","",null,null],[3,"U45","","",null,null],[3,"U46","","",null,null],[3,"U47","","",null,null],[3,"U48","","",null,null],[3,"U49","","",null,null],[3,"U50","","",null,null],[3,"U51","","",null,null],[3,"U52","","",null,null],[3,"U53","","",null,null],[3,"U54","","",null,null],[3,"U55","","",null,null],[3,"U56","","",null,null],[3,"U57","","",null,null],[3,"U58","","",null,null],[3,"U59","","",null,null],[3,"U60","","",null,null],[3,"U61","","",null,null],[3,"U62","","",null,null],[3,"U63","","",null,null],[3,"U64","","",null,null],[3,"U65","","",null,null],[3,"U66","","",null,null],[3,"U67","","",null,null],[3,"U68","","",null,null],[3,"U69","","",null,null],[3,"U70","","",null,null],[3,"U71","","",null,null],[3,"U72","","",null,null],[3,"U73","","",null,null],[3,"U74","","",null,null],[3,"U75","","",null,null],[3,"U76","","",null,null],[3,"U77","","",null,null],[3,"U78","","",null,null],[3,"U79","","",null,null],[3,"U80","","",null,null],[3,"U81","","",null,null],[3,"U82","","",null,null],[3,"U83","","",null,null],[3,"U84","","",null,null],[3,"U85","","",null,null],[3,"U86","","",null,null],[3,"U87","","",null,null],[3,"U88","","",null,null],[3,"U89","","",null,null],[3,"U90","","",null,null],[3,"U91","","",null,null],[3,"U92","","",null,null],[3,"U93","","",null,null],[3,"U94","","",null,null],[3,"U95","","",null,null],[3,"U96","","",null,null],[3,"U97","","",null,null],[3,"U98","","",null,null],[3,"U99","","",null,null],[3,"U100","","",null,null],[3,"U101","","",null,null],[3,"U102","","",null,null],[3,"U103","","",null,null],[3,"U104","","",null,null],[3,"U105","","",null,null],[3,"U106","","",null,null],[3,"U107","","",null,null],[3,"U108","","",null,null],[3,"U109","","",null,null],[3,"U110","","",null,null],[3,"U111","","",null,null],[3,"U112","","",null,null],[3,"U113","","",null,null],[3,"U114","","",null,null],[3,"U115","","",null,null],[3,"U116","","",null,null],[3,"U117","","",null,null],[3,"U118","","",null,null],[3,"U119","","",null,null],[3,"U120","","",null,null],[3,"U121","","",null,null],[3,"U122","","",null,null],[3,"U123","","",null,null],[3,"U124","","",null,null],[3,"U125","","",null,null],[3,"U126","","",null,null],[3,"U127","","",null,null],[6,"DimSum","","",null,null],[6,"DimNameSum","","",null,null],[6,"DimProd","","",null,null],[6,"DimNameProd","","",null,null],[6,"DimDiff","","",null,null],[6,"DimNameDiff","","",null,null],[6,"DimQuot","","",null,null],[6,"DimNameQuot","","",null,null],[6,"DimMinimum","","",null,null],[6,"DimNameNimimum","","",null,null],[6,"DimMaximum","","",null,null],[6,"DimNameMaximum","","",null,null],[8,"IsDynamic","","Trait implemented by `Dynamic`.",null,null],[8,"IsNotStaticOne","","Trait implemented by `Dynamic` and type-level integers different from `U1`.",null,null],[8,"Dim","","Trait implemented by any type that can be used as a dimension. This includes type-level integers and `Dynamic` (for dimensions not known at compile-time).",null,null],[11,"is","","",2,{"inputs":[],"output":{"name":"bool"}}],[10,"try_to_usize","","Gets the compile-time value of `Self`. Returns `None` if it is not known, i.e., if `Self = Dynamic`.",2,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[10,"value","","Gets the run-time value of `self`. For type-level integers, this is the same as `Self::try_to_usize().unwrap()`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"from_usize","","Builds an instance of `Self` from a run-time value. Panics if `Self` is a type-level integer and `dim != Self::try_to_usize().unwrap()`.",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[8,"DimAdd","","",null,null],[16,"Output","","",3,null],[10,"add","","",3,null],[8,"DimNameAdd","","",null,null],[16,"Output","","",4,null],[10,"add","","",4,null],[8,"DimMul","","",null,null],[16,"Output","","",5,null],[10,"mul","","",5,null],[8,"DimNameMul","","",null,null],[16,"Output","","",6,null],[10,"mul","","",6,null],[8,"DimSub","","",null,null],[16,"Output","","",7,null],[10,"sub","","",7,null],[8,"DimNameSub","","",null,null],[16,"Output","","",8,null],[10,"sub","","",8,null],[8,"DimDiv","","",null,null],[16,"Output","","",9,null],[10,"div","","",9,null],[8,"DimNameDiv","","",null,null],[16,"Output","","",10,null],[10,"div","","",10,null],[8,"DimMin","","",null,null],[16,"Output","","",11,null],[10,"min","","",11,null],[8,"DimNameMin","","",null,null],[16,"Output","","",12,null],[10,"min","","",12,null],[8,"DimMax","","",null,null],[16,"Output","","",13,null],[10,"max","","",13,null],[8,"DimNameMax","","",null,null],[16,"Output","","",14,null],[10,"max","","",14,null],[8,"DimName","","Trait implemented exclusively by type-level integers.",null,null],[16,"Value","","",15,null],[10,"name","","The name of this dimension, i.e., the singleton `Self`.",15,{"inputs":[],"output":{"name":"self"}}],[11,"dim","","The value of this dimension.",15,{"inputs":[],"output":{"name":"usize"}}],[8,"NamedDim","","",null,null],[16,"Name","","",16,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"dynamic"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"dynamic"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"dynamic"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","A dynamic size equal to `value`.",17,{"inputs":[{"name":"usize"}],"output":{"name":"dynamic"}}],[11,"try_to_usize","","",17,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dynamic"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dynamic"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"min","","",17,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"max","","",17,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u1"}}],[11,"hash","","",18,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"u1"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",18,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",18,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u0"}}],[11,"hash","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"u0"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",19,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",19,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u2"}}],[11,"hash","","",20,null],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"u2"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",20,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",20,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",20,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u3"}}],[11,"hash","","",21,null],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"u3"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",21,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",21,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",21,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u4"}}],[11,"hash","","",22,null],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"u4"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",22,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",22,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",22,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u5"}}],[11,"hash","","",23,null],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"u5"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",23,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",23,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",23,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u6"}}],[11,"hash","","",24,null],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"u6"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",24,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",24,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",24,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u7"}}],[11,"hash","","",25,null],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"u7"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",25,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",25,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",25,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"hash","","",26,null],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",26,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",26,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",26,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u9"}}],[11,"hash","","",27,null],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"u9"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",27,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",27,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",27,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u10"}}],[11,"hash","","",28,null],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"u10"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",28,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",28,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",28,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u11"}}],[11,"hash","","",29,null],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"u11"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",29,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",29,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",29,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u12"}}],[11,"hash","","",30,null],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"u12"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",30,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",30,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",30,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u13"}}],[11,"hash","","",31,null],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"u13"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",31,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",31,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",31,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u14"}}],[11,"hash","","",32,null],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"u14"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",32,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",32,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",32,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u15"}}],[11,"hash","","",33,null],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"u15"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",33,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",33,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",33,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"hash","","",34,null],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",34,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",34,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",34,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u17"}}],[11,"hash","","",35,null],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"u17"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",35,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",35,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u18"}}],[11,"hash","","",36,null],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"u18"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",36,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",36,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",36,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u19"}}],[11,"hash","","",37,null],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"u19"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",37,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",37,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u20"}}],[11,"hash","","",38,null],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"u20"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",38,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",38,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",38,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"u21"}}],[11,"hash","","",39,null],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"u21"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",39,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",39,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"u22"}}],[11,"hash","","",40,null],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"u22"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",40,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",40,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",40,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u23"}}],[11,"hash","","",41,null],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"u23"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",41,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",41,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"u24"}}],[11,"hash","","",42,null],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"u24"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",42,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",42,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",42,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u25"}}],[11,"hash","","",43,null],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"u25"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",43,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",43,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u26"}}],[11,"hash","","",44,null],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"u26"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",44,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",44,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",44,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"u27"}}],[11,"hash","","",45,null],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"u27"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",45,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",45,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",45,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u28"}}],[11,"hash","","",46,null],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"u28"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",46,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",46,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",46,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u29"}}],[11,"hash","","",47,null],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"u29"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",47,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",47,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",47,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u30"}}],[11,"hash","","",48,null],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"u30"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",48,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",48,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",48,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"u31"}}],[11,"hash","","",49,null],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"u31"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",49,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",49,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",49,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hash","","",50,null],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",50,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",50,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",50,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u33"}}],[11,"hash","","",51,null],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"u33"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",51,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",51,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u34"}}],[11,"hash","","",52,null],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"u34"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",52,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",52,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",52,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"u35"}}],[11,"hash","","",53,null],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"u35"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",53,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",53,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",53,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u36"}}],[11,"hash","","",54,null],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"u36"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",54,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",54,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",54,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"u37"}}],[11,"hash","","",55,null],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"u37"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",55,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",55,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",55,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"u38"}}],[11,"hash","","",56,null],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"u38"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",56,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",56,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",56,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u39"}}],[11,"hash","","",57,null],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"u39"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",57,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",57,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"u40"}}],[11,"hash","","",58,null],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"u40"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",58,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",58,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",58,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"u41"}}],[11,"hash","","",59,null],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"u41"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",59,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",59,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",59,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"u42"}}],[11,"hash","","",60,null],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"u42"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",60,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",60,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",60,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u43"}}],[11,"hash","","",61,null],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"u43"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",61,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",61,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",61,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u44"}}],[11,"hash","","",62,null],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"u44"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",62,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",62,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",62,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u45"}}],[11,"hash","","",63,null],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"u45"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",63,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",63,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",63,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"u46"}}],[11,"hash","","",64,null],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"u46"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",64,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",64,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",64,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"u47"}}],[11,"hash","","",65,null],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"u47"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",65,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",65,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",65,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u48"}}],[11,"hash","","",66,null],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"u48"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",66,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",66,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",66,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"u49"}}],[11,"hash","","",67,null],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"u49"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",67,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",67,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",67,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",67,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u50"}}],[11,"hash","","",68,null],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"u50"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",68,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",68,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",68,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",68,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"u51"}}],[11,"hash","","",69,null],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"u51"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",69,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",69,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",69,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",69,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"u52"}}],[11,"hash","","",70,null],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"u52"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",70,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",70,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",70,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"u53"}}],[11,"hash","","",71,null],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"u53"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",71,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",71,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",71,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",71,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"u54"}}],[11,"hash","","",72,null],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"u54"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",72,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",72,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",72,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"u55"}}],[11,"hash","","",73,null],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"u55"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",73,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",73,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",73,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"u56"}}],[11,"hash","","",74,null],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"u56"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",74,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",74,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",74,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"u57"}}],[11,"hash","","",75,null],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"u57"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",75,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",75,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",75,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"u58"}}],[11,"hash","","",76,null],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"u58"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",76,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",76,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",76,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"u59"}}],[11,"hash","","",77,null],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"u59"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",77,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",77,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",77,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",77,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"u60"}}],[11,"hash","","",78,null],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"u60"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",78,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",78,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",78,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"u61"}}],[11,"hash","","",79,null],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"u61"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",79,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",79,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",79,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",79,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"u62"}}],[11,"hash","","",80,null],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"u62"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",80,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",80,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",80,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",80,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"u63"}}],[11,"hash","","",81,null],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"u63"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",81,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",81,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",81,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",81,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"hash","","",82,null],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",82,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",82,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",82,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"u65"}}],[11,"hash","","",83,null],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"u65"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",83,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",83,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",83,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u66"}}],[11,"hash","","",84,null],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"u66"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",84,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",84,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"u67"}}],[11,"hash","","",85,null],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"u67"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",85,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",85,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u68"}}],[11,"hash","","",86,null],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"u68"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",86,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",86,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",86,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"u69"}}],[11,"hash","","",87,null],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"u69"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",87,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",87,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",87,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"u70"}}],[11,"hash","","",88,null],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"u70"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",88,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",88,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",88,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",88,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u71"}}],[11,"hash","","",89,null],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"u71"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",89,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",89,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",89,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",89,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u72"}}],[11,"hash","","",90,null],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"u72"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",90,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",90,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",90,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",90,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"u73"}}],[11,"hash","","",91,null],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"u73"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",91,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",91,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",91,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",91,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"u74"}}],[11,"hash","","",92,null],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"u74"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",92,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",92,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",92,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",92,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"u75"}}],[11,"hash","","",93,null],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"u75"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",93,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",93,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",93,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"u76"}}],[11,"hash","","",94,null],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"u76"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",94,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",94,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",94,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"u77"}}],[11,"hash","","",95,null],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"u77"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",95,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",95,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",95,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"u78"}}],[11,"hash","","",96,null],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"u78"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",96,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",96,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",96,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",96,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"u79"}}],[11,"hash","","",97,null],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"u79"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",97,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",97,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",97,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"u80"}}],[11,"hash","","",98,null],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"u80"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",98,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",98,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"u81"}}],[11,"hash","","",99,null],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"u81"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",99,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",99,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",99,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"u82"}}],[11,"hash","","",100,null],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"u82"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",100,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",100,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",100,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",100,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"u83"}}],[11,"hash","","",101,null],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"u83"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",101,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",101,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",101,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",101,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"u84"}}],[11,"hash","","",102,null],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"u84"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",102,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",102,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",102,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"u85"}}],[11,"hash","","",103,null],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"u85"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",103,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",103,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",103,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"u86"}}],[11,"hash","","",104,null],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"u86"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",104,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",104,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",104,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"u87"}}],[11,"hash","","",105,null],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"u87"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",105,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",105,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",105,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"u88"}}],[11,"hash","","",106,null],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"u88"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",106,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",106,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",106,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",106,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"u89"}}],[11,"hash","","",107,null],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"u89"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",107,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",107,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",107,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",107,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"u90"}}],[11,"hash","","",108,null],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"u90"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",108,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",108,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",108,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"u91"}}],[11,"hash","","",109,null],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"u91"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",109,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",109,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",109,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"u92"}}],[11,"hash","","",110,null],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"u92"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",110,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",110,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",110,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",110,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"u93"}}],[11,"hash","","",111,null],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"u93"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",111,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",111,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",111,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",111,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"u94"}}],[11,"hash","","",112,null],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"u94"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",112,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",112,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",112,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",112,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"u95"}}],[11,"hash","","",113,null],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"u95"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",113,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",113,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",113,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",113,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"u96"}}],[11,"hash","","",114,null],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"u96"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",114,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",114,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",114,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"u97"}}],[11,"hash","","",115,null],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"u97"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",115,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",115,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",115,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",115,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"u98"}}],[11,"hash","","",116,null],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"u98"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",116,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",116,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",116,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",116,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"u99"}}],[11,"hash","","",117,null],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"u99"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",117,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",117,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",117,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",117,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"u100"}}],[11,"hash","","",118,null],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"u100"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",118,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",118,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",118,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",118,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"u101"}}],[11,"hash","","",119,null],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"u101"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",119,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",119,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",119,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",119,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"u102"}}],[11,"hash","","",120,null],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"u102"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",120,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",120,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",120,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",120,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"u103"}}],[11,"hash","","",121,null],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"u103"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",121,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",121,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",121,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"u104"}}],[11,"hash","","",122,null],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"u104"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",122,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",122,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",122,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",122,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"u105"}}],[11,"hash","","",123,null],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"u105"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",123,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",123,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",123,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",123,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"u106"}}],[11,"hash","","",124,null],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"u106"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",124,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",124,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",124,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",124,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"u107"}}],[11,"hash","","",125,null],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"u107"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",125,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",125,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",125,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",125,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"u108"}}],[11,"hash","","",126,null],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"u108"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",126,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",126,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",126,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",126,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"u109"}}],[11,"hash","","",127,null],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"u109"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",127,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",127,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",127,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",127,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"u110"}}],[11,"hash","","",128,null],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"u110"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",128,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",128,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",128,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",128,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"u111"}}],[11,"hash","","",129,null],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"u111"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",129,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",129,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",129,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",129,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"u112"}}],[11,"hash","","",130,null],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"u112"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",130,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",130,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",130,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",130,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"u113"}}],[11,"hash","","",131,null],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"u113"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",131,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",131,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",131,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",131,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"u114"}}],[11,"hash","","",132,null],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"u114"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",132,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",132,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",132,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",132,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"u115"}}],[11,"hash","","",133,null],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"u115"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",133,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",133,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",133,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",133,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"u116"}}],[11,"hash","","",134,null],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"u116"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",134,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",134,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",134,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",134,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u117"}}],[11,"hash","","",135,null],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"u117"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",135,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",135,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",135,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",135,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"u118"}}],[11,"hash","","",136,null],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"u118"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",136,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",136,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",136,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",136,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"u119"}}],[11,"hash","","",137,null],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"u119"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",137,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",137,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",137,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",137,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"u120"}}],[11,"hash","","",138,null],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"u120"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",138,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",138,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",138,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",138,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"u121"}}],[11,"hash","","",139,null],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"u121"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",139,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",139,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",139,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",139,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"u122"}}],[11,"hash","","",140,null],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"u122"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",140,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",140,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",140,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",140,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u123"}}],[11,"hash","","",141,null],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"u123"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",141,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",141,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",141,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",141,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u124"}}],[11,"hash","","",142,null],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"u124"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",142,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",142,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",142,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",142,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"u125"}}],[11,"hash","","",143,null],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"u125"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",143,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",143,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",143,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",143,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"u126"}}],[11,"hash","","",144,null],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"u126"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",144,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",144,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",144,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",144,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"u127"}}],[11,"hash","","",145,null],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"u127"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",145,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[11,"from_usize","","",145,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",145,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",145,{"inputs":[],"output":{"name":"self"}}],[0,"constraint","nalgebra::core","Compatibility constraints between matrix shapes, e.g., for addition or multiplication.",null,null],[3,"ShapeConstraint","nalgebra::core::constraint","A type used in `where` clauses for enforcing constraints.",null,null],[8,"AreMultipliable","","Constraints `C1` and `R2` to be equivalent.",null,null],[8,"DimEq","","Constraints `D1` and `D2` to be equivalent.",null,null],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",146,null],[8,"SameNumberOfRows","","Constraints `D1` and `D2` to be equivalent. They are both assumed to be the number of rows of a matrix.",null,null],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",147,null],[8,"SameNumberOfColumns","","Constraints `D1` and `D2` to be equivalent. They are both assumed to be the number of columns of a matrix.",null,null],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",148,null],[8,"SameDimension","","Constraints D1 and D2 to be equivalent, where they both designate dimensions of algebraic entities (e.g. square matrices).",null,null],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",149,null],[0,"allocator","nalgebra::core","Abstract definition of a matrix data storage allocator.",null,null],[6,"SameShapeR","nalgebra::core::allocator","The number of rows of the result of a componentwise operation on two matrices.",null,null],[6,"SameShapeC","","The number of columns of the result of a componentwise operation on two matrices.",null,null],[8,"Allocator","","A matrix allocator of a memory buffer that may contain `R::to_usize() * C::to_usize()` elements of type `N`.",null,null],[16,"Buffer","","The type of buffer this allocator can instanciate.",150,null],[10,"allocate_uninitialized","","Allocates a buffer with the given number of rows and columns without initializing its content.",150,null],[10,"allocate_from_iterator","","Allocates a buffer initialized with the content of the given iterator.",150,null],[8,"Reallocator","","A matrix reallocator. Changes the size of the memory buffer that initially contains (RFrom × CFrom) elements to a smaller or larger size (RTo, CTo).",null,null],[10,"reallocate_copy","","Reallocates a buffer of shape `(RTo, CTo)`, possibly reusing a previously allocated buffer `buf`. Data stored by `buf` are linearly copied to the output:",151,null],[8,"SameShapeAllocator","","Restricts the given number of rows and columns to be respectively the same.",null,null],[8,"SameShapeVectorAllocator","","Restricts the given number of rows to be equal.",null,null],[0,"storage","nalgebra::core","Abstract definition of a matrix data storage.",null,null],[6,"SameShapeStorage","nalgebra::core::storage","The data storage for the sum of two matrices with dimensions `(R1, C1)` and `(R2, C2)`.",null,null],[6,"Owned","","The owned data storage that can be allocated from `S`.",null,null],[6,"RStride","","The row-stride of the owned data storage for a buffer of dimension `(R, C)`.",null,null],[6,"CStride","","The column-stride of the owned data storage for a buffer of dimension `(R, C)`.",null,null],[8,"Storage","","The trait shared by all matrix data storage.",null,null],[16,"RStride","","The static stride of this storage's rows.",152,null],[16,"CStride","","The static stride of this storage's columns.",152,null],[10,"ptr","","The matrix data pointer.",152,null],[10,"shape","","The dimension of the matrix at run-time. Arr length of zero indicates the additive identity element of any dimension. Must be equal to `Self::dimension()` if it is not `None`.",152,null],[10,"strides","","The spacing between concecutive row elements and consecutive column elements.",152,null],[11,"linear_index","","Compute the index corresponding to the irow-th row and icol-th column of this matrix. The index must be such that the following holds:",152,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"get_address_unchecked_linear","","Gets the address of the i-th matrix component without performing bound-checking.",152,null],[11,"get_address_unchecked","","Gets the address of the i-th matrix component without performing bound-checking.",152,null],[11,"get_unchecked_linear","","Retrieves a reference to the i-th element without bound-checking.",152,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"get_unchecked","","Retrieves a reference to the i-th element without bound-checking.",152,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"n"}}],[10,"is_contiguous","","Indicates whether this data buffer stores its elements contiguously.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"as_slice","","Retrieves the data buffer as a contiguous slice.",152,null],[10,"into_owned","","Builds a matrix data storage that does not contain any reference.",152,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[10,"clone_owned","","Clones this data storage to one that does not contain any reference.",152,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[8,"StorageMut","","Trait implemented by matrix data storage that can provide a mutable access to its elements.",null,null],[10,"ptr_mut","","The matrix mutable data pointer.",153,null],[11,"get_address_unchecked_linear_mut","","Gets the mutable address of the i-th matrix component without performing bound-checking.",153,null],[11,"get_address_unchecked_mut","","Gets the mutable address of the i-th matrix component without performing bound-checking.",153,null],[11,"get_unchecked_linear_mut","","Retrieves a mutable reference to the i-th element without bound-checking.",153,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"get_unchecked_mut","","Retrieves a mutable reference to the element at `(irow, icol)` without bound-checking.",153,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"n"}}],[11,"swap_unchecked_linear","","Swaps two elements using their linear index without bound-checking.",153,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_unchecked","","Swaps two elements without bound-checking.",153,null],[10,"as_mut_slice","","Retrieves the mutable data buffer as a contiguous slice.",153,null],[8,"ContiguousStorage","","A matrix storage that is stored contiguously in memory.",null,null],[8,"ContiguousStorageMut","","A mutable matrix storage that is stored contiguously in memory.",null,null],[0,"coordinates","nalgebra::core","Structures to which matrices and vector can be auto-dereferenced (through `Deref`) to access components using their names. For example, if `v` is a 3D vector, one can write `v.z` instead of `v[2]`.",null,null],[3,"X","nalgebra::core::coordinates","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",154,null],[3,"XY","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",155,null],[12,"y","","",155,null],[3,"XYZ","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",156,null],[12,"y","","",156,null],[12,"z","","",156,null],[3,"XYZW","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",157,null],[12,"y","","",157,null],[12,"z","","",157,null],[12,"w","","",157,null],[3,"XYZWA","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",158,null],[12,"y","","",158,null],[12,"z","","",158,null],[12,"w","","",158,null],[12,"a","","",158,null],[3,"XYZWAB","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",159,null],[12,"y","","",159,null],[12,"z","","",159,null],[12,"w","","",159,null],[12,"a","","",159,null],[12,"b","","",159,null],[3,"IJKW","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"i","","",160,null],[12,"j","","",160,null],[12,"k","","",160,null],[12,"w","","",160,null],[3,"M2x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",161,null],[12,"m21","","",161,null],[12,"m12","","",161,null],[12,"m22","","",161,null],[3,"M2x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",162,null],[12,"m21","","",162,null],[12,"m12","","",162,null],[12,"m22","","",162,null],[12,"m13","","",162,null],[12,"m23","","",162,null],[3,"M2x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",163,null],[12,"m21","","",163,null],[12,"m12","","",163,null],[12,"m22","","",163,null],[12,"m13","","",163,null],[12,"m23","","",163,null],[12,"m14","","",163,null],[12,"m24","","",163,null],[3,"M2x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",164,null],[12,"m21","","",164,null],[12,"m12","","",164,null],[12,"m22","","",164,null],[12,"m13","","",164,null],[12,"m23","","",164,null],[12,"m14","","",164,null],[12,"m24","","",164,null],[12,"m15","","",164,null],[12,"m25","","",164,null],[3,"M2x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",165,null],[12,"m21","","",165,null],[12,"m12","","",165,null],[12,"m22","","",165,null],[12,"m13","","",165,null],[12,"m23","","",165,null],[12,"m14","","",165,null],[12,"m24","","",165,null],[12,"m15","","",165,null],[12,"m25","","",165,null],[12,"m16","","",165,null],[12,"m26","","",165,null],[3,"M3x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",166,null],[12,"m21","","",166,null],[12,"m31","","",166,null],[12,"m12","","",166,null],[12,"m22","","",166,null],[12,"m32","","",166,null],[3,"M3x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",167,null],[12,"m21","","",167,null],[12,"m31","","",167,null],[12,"m12","","",167,null],[12,"m22","","",167,null],[12,"m32","","",167,null],[12,"m13","","",167,null],[12,"m23","","",167,null],[12,"m33","","",167,null],[3,"M3x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",168,null],[12,"m21","","",168,null],[12,"m31","","",168,null],[12,"m12","","",168,null],[12,"m22","","",168,null],[12,"m32","","",168,null],[12,"m13","","",168,null],[12,"m23","","",168,null],[12,"m33","","",168,null],[12,"m14","","",168,null],[12,"m24","","",168,null],[12,"m34","","",168,null],[3,"M3x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",169,null],[12,"m21","","",169,null],[12,"m31","","",169,null],[12,"m12","","",169,null],[12,"m22","","",169,null],[12,"m32","","",169,null],[12,"m13","","",169,null],[12,"m23","","",169,null],[12,"m33","","",169,null],[12,"m14","","",169,null],[12,"m24","","",169,null],[12,"m34","","",169,null],[12,"m15","","",169,null],[12,"m25","","",169,null],[12,"m35","","",169,null],[3,"M3x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",170,null],[12,"m21","","",170,null],[12,"m31","","",170,null],[12,"m12","","",170,null],[12,"m22","","",170,null],[12,"m32","","",170,null],[12,"m13","","",170,null],[12,"m23","","",170,null],[12,"m33","","",170,null],[12,"m14","","",170,null],[12,"m24","","",170,null],[12,"m34","","",170,null],[12,"m15","","",170,null],[12,"m25","","",170,null],[12,"m35","","",170,null],[12,"m16","","",170,null],[12,"m26","","",170,null],[12,"m36","","",170,null],[3,"M4x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",171,null],[12,"m21","","",171,null],[12,"m31","","",171,null],[12,"m41","","",171,null],[12,"m12","","",171,null],[12,"m22","","",171,null],[12,"m32","","",171,null],[12,"m42","","",171,null],[3,"M4x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",172,null],[12,"m21","","",172,null],[12,"m31","","",172,null],[12,"m41","","",172,null],[12,"m12","","",172,null],[12,"m22","","",172,null],[12,"m32","","",172,null],[12,"m42","","",172,null],[12,"m13","","",172,null],[12,"m23","","",172,null],[12,"m33","","",172,null],[12,"m43","","",172,null],[3,"M4x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",173,null],[12,"m21","","",173,null],[12,"m31","","",173,null],[12,"m41","","",173,null],[12,"m12","","",173,null],[12,"m22","","",173,null],[12,"m32","","",173,null],[12,"m42","","",173,null],[12,"m13","","",173,null],[12,"m23","","",173,null],[12,"m33","","",173,null],[12,"m43","","",173,null],[12,"m14","","",173,null],[12,"m24","","",173,null],[12,"m34","","",173,null],[12,"m44","","",173,null],[3,"M4x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",174,null],[12,"m21","","",174,null],[12,"m31","","",174,null],[12,"m41","","",174,null],[12,"m12","","",174,null],[12,"m22","","",174,null],[12,"m32","","",174,null],[12,"m42","","",174,null],[12,"m13","","",174,null],[12,"m23","","",174,null],[12,"m33","","",174,null],[12,"m43","","",174,null],[12,"m14","","",174,null],[12,"m24","","",174,null],[12,"m34","","",174,null],[12,"m44","","",174,null],[12,"m15","","",174,null],[12,"m25","","",174,null],[12,"m35","","",174,null],[12,"m45","","",174,null],[3,"M4x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",175,null],[12,"m21","","",175,null],[12,"m31","","",175,null],[12,"m41","","",175,null],[12,"m12","","",175,null],[12,"m22","","",175,null],[12,"m32","","",175,null],[12,"m42","","",175,null],[12,"m13","","",175,null],[12,"m23","","",175,null],[12,"m33","","",175,null],[12,"m43","","",175,null],[12,"m14","","",175,null],[12,"m24","","",175,null],[12,"m34","","",175,null],[12,"m44","","",175,null],[12,"m15","","",175,null],[12,"m25","","",175,null],[12,"m35","","",175,null],[12,"m45","","",175,null],[12,"m16","","",175,null],[12,"m26","","",175,null],[12,"m36","","",175,null],[12,"m46","","",175,null],[3,"M5x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",176,null],[12,"m21","","",176,null],[12,"m31","","",176,null],[12,"m41","","",176,null],[12,"m51","","",176,null],[12,"m12","","",176,null],[12,"m22","","",176,null],[12,"m32","","",176,null],[12,"m42","","",176,null],[12,"m52","","",176,null],[3,"M5x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",177,null],[12,"m21","","",177,null],[12,"m31","","",177,null],[12,"m41","","",177,null],[12,"m51","","",177,null],[12,"m12","","",177,null],[12,"m22","","",177,null],[12,"m32","","",177,null],[12,"m42","","",177,null],[12,"m52","","",177,null],[12,"m13","","",177,null],[12,"m23","","",177,null],[12,"m33","","",177,null],[12,"m43","","",177,null],[12,"m53","","",177,null],[3,"M5x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",178,null],[12,"m21","","",178,null],[12,"m31","","",178,null],[12,"m41","","",178,null],[12,"m51","","",178,null],[12,"m12","","",178,null],[12,"m22","","",178,null],[12,"m32","","",178,null],[12,"m42","","",178,null],[12,"m52","","",178,null],[12,"m13","","",178,null],[12,"m23","","",178,null],[12,"m33","","",178,null],[12,"m43","","",178,null],[12,"m53","","",178,null],[12,"m14","","",178,null],[12,"m24","","",178,null],[12,"m34","","",178,null],[12,"m44","","",178,null],[12,"m54","","",178,null],[3,"M5x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",179,null],[12,"m21","","",179,null],[12,"m31","","",179,null],[12,"m41","","",179,null],[12,"m51","","",179,null],[12,"m12","","",179,null],[12,"m22","","",179,null],[12,"m32","","",179,null],[12,"m42","","",179,null],[12,"m52","","",179,null],[12,"m13","","",179,null],[12,"m23","","",179,null],[12,"m33","","",179,null],[12,"m43","","",179,null],[12,"m53","","",179,null],[12,"m14","","",179,null],[12,"m24","","",179,null],[12,"m34","","",179,null],[12,"m44","","",179,null],[12,"m54","","",179,null],[12,"m15","","",179,null],[12,"m25","","",179,null],[12,"m35","","",179,null],[12,"m45","","",179,null],[12,"m55","","",179,null],[3,"M5x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",180,null],[12,"m21","","",180,null],[12,"m31","","",180,null],[12,"m41","","",180,null],[12,"m51","","",180,null],[12,"m12","","",180,null],[12,"m22","","",180,null],[12,"m32","","",180,null],[12,"m42","","",180,null],[12,"m52","","",180,null],[12,"m13","","",180,null],[12,"m23","","",180,null],[12,"m33","","",180,null],[12,"m43","","",180,null],[12,"m53","","",180,null],[12,"m14","","",180,null],[12,"m24","","",180,null],[12,"m34","","",180,null],[12,"m44","","",180,null],[12,"m54","","",180,null],[12,"m15","","",180,null],[12,"m25","","",180,null],[12,"m35","","",180,null],[12,"m45","","",180,null],[12,"m55","","",180,null],[12,"m16","","",180,null],[12,"m26","","",180,null],[12,"m36","","",180,null],[12,"m46","","",180,null],[12,"m56","","",180,null],[3,"M6x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",181,null],[12,"m21","","",181,null],[12,"m31","","",181,null],[12,"m41","","",181,null],[12,"m51","","",181,null],[12,"m61","","",181,null],[12,"m12","","",181,null],[12,"m22","","",181,null],[12,"m32","","",181,null],[12,"m42","","",181,null],[12,"m52","","",181,null],[12,"m62","","",181,null],[3,"M6x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",182,null],[12,"m21","","",182,null],[12,"m31","","",182,null],[12,"m41","","",182,null],[12,"m51","","",182,null],[12,"m61","","",182,null],[12,"m12","","",182,null],[12,"m22","","",182,null],[12,"m32","","",182,null],[12,"m42","","",182,null],[12,"m52","","",182,null],[12,"m62","","",182,null],[12,"m13","","",182,null],[12,"m23","","",182,null],[12,"m33","","",182,null],[12,"m43","","",182,null],[12,"m53","","",182,null],[12,"m63","","",182,null],[3,"M6x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",183,null],[12,"m21","","",183,null],[12,"m31","","",183,null],[12,"m41","","",183,null],[12,"m51","","",183,null],[12,"m61","","",183,null],[12,"m12","","",183,null],[12,"m22","","",183,null],[12,"m32","","",183,null],[12,"m42","","",183,null],[12,"m52","","",183,null],[12,"m62","","",183,null],[12,"m13","","",183,null],[12,"m23","","",183,null],[12,"m33","","",183,null],[12,"m43","","",183,null],[12,"m53","","",183,null],[12,"m63","","",183,null],[12,"m14","","",183,null],[12,"m24","","",183,null],[12,"m34","","",183,null],[12,"m44","","",183,null],[12,"m54","","",183,null],[12,"m64","","",183,null],[3,"M6x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",184,null],[12,"m21","","",184,null],[12,"m31","","",184,null],[12,"m41","","",184,null],[12,"m51","","",184,null],[12,"m61","","",184,null],[12,"m12","","",184,null],[12,"m22","","",184,null],[12,"m32","","",184,null],[12,"m42","","",184,null],[12,"m52","","",184,null],[12,"m62","","",184,null],[12,"m13","","",184,null],[12,"m23","","",184,null],[12,"m33","","",184,null],[12,"m43","","",184,null],[12,"m53","","",184,null],[12,"m63","","",184,null],[12,"m14","","",184,null],[12,"m24","","",184,null],[12,"m34","","",184,null],[12,"m44","","",184,null],[12,"m54","","",184,null],[12,"m64","","",184,null],[12,"m15","","",184,null],[12,"m25","","",184,null],[12,"m35","","",184,null],[12,"m45","","",184,null],[12,"m55","","",184,null],[12,"m65","","",184,null],[3,"M6x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",185,null],[12,"m21","","",185,null],[12,"m31","","",185,null],[12,"m41","","",185,null],[12,"m51","","",185,null],[12,"m61","","",185,null],[12,"m12","","",185,null],[12,"m22","","",185,null],[12,"m32","","",185,null],[12,"m42","","",185,null],[12,"m52","","",185,null],[12,"m62","","",185,null],[12,"m13","","",185,null],[12,"m23","","",185,null],[12,"m33","","",185,null],[12,"m43","","",185,null],[12,"m53","","",185,null],[12,"m63","","",185,null],[12,"m14","","",185,null],[12,"m24","","",185,null],[12,"m34","","",185,null],[12,"m44","","",185,null],[12,"m54","","",185,null],[12,"m64","","",185,null],[12,"m15","","",185,null],[12,"m25","","",185,null],[12,"m35","","",185,null],[12,"m45","","",185,null],[12,"m55","","",185,null],[12,"m65","","",185,null],[12,"m16","","",185,null],[12,"m26","","",185,null],[12,"m36","","",185,null],[12,"m46","","",185,null],[12,"m56","","",185,null],[12,"m66","","",185,null],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"x"}}],[11,"hash","","",154,null],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"xy"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"xy"}],"output":{"name":"bool"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"xy"}}],[11,"hash","","",155,null],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"xyz"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"xyz"}],"output":{"name":"bool"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"xyz"}}],[11,"hash","","",156,null],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"xyzw"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"xyzw"}],"output":{"name":"bool"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"xyzw"}}],[11,"hash","","",157,null],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"xyzwa"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"xyzwa"}],"output":{"name":"bool"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"xyzwa"}}],[11,"hash","","",158,null],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"xyzwab"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"xyzwab"}],"output":{"name":"bool"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"xyzwab"}}],[11,"hash","","",159,null],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"ijkw"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"self"},{"name":"ijkw"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"ijkw"}}],[11,"hash","","",160,null],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"m2x2"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"m2x2"}],"output":{"name":"bool"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"m2x2"}}],[11,"hash","","",161,null],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"m2x3"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"self"},{"name":"m2x3"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"m2x3"}}],[11,"hash","","",162,null],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"m2x4"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"m2x4"}],"output":{"name":"bool"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"m2x4"}}],[11,"hash","","",163,null],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"m2x5"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"self"},{"name":"m2x5"}],"output":{"name":"bool"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"m2x5"}}],[11,"hash","","",164,null],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"m2x6"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"m2x6"}],"output":{"name":"bool"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"m2x6"}}],[11,"hash","","",165,null],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",166,{"inputs":[{"name":"self"},{"name":"m3x2"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"self"},{"name":"m3x2"}],"output":{"name":"bool"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"m3x2"}}],[11,"hash","","",166,null],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"m3x3"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"self"},{"name":"m3x3"}],"output":{"name":"bool"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"m3x3"}}],[11,"hash","","",167,null],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",168,{"inputs":[{"name":"self"},{"name":"m3x4"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"self"},{"name":"m3x4"}],"output":{"name":"bool"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"m3x4"}}],[11,"hash","","",168,null],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"m3x5"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"self"},{"name":"m3x5"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"m3x5"}}],[11,"hash","","",169,null],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",170,{"inputs":[{"name":"self"},{"name":"m3x6"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"self"},{"name":"m3x6"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"m3x6"}}],[11,"hash","","",170,null],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"m4x2"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"m4x2"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"m4x2"}}],[11,"hash","","",171,null],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"m4x3"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"self"},{"name":"m4x3"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"m4x3"}}],[11,"hash","","",172,null],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"m4x4"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"m4x4"}],"output":{"name":"bool"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"m4x4"}}],[11,"hash","","",173,null],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"m4x5"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"self"},{"name":"m4x5"}],"output":{"name":"bool"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"m4x5"}}],[11,"hash","","",174,null],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"m4x6"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"self"},{"name":"m4x6"}],"output":{"name":"bool"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"m4x6"}}],[11,"hash","","",175,null],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"m5x2"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"m5x2"}],"output":{"name":"bool"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"m5x2"}}],[11,"hash","","",176,null],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",177,{"inputs":[{"name":"self"},{"name":"m5x3"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"self"},{"name":"m5x3"}],"output":{"name":"bool"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"m5x3"}}],[11,"hash","","",177,null],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"m5x4"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"self"},{"name":"m5x4"}],"output":{"name":"bool"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"m5x4"}}],[11,"hash","","",178,null],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"m5x5"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"self"},{"name":"m5x5"}],"output":{"name":"bool"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"m5x5"}}],[11,"hash","","",179,null],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"m5x6"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"m5x6"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"m5x6"}}],[11,"hash","","",180,null],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",181,{"inputs":[{"name":"self"},{"name":"m6x2"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"self"},{"name":"m6x2"}],"output":{"name":"bool"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"m6x2"}}],[11,"hash","","",181,null],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",182,{"inputs":[{"name":"self"},{"name":"m6x3"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"self"},{"name":"m6x3"}],"output":{"name":"bool"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"m6x3"}}],[11,"hash","","",182,null],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"m6x4"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"self"},{"name":"m6x4"}],"output":{"name":"bool"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"m6x4"}}],[11,"hash","","",183,null],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"m6x5"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"self"},{"name":"m6x5"}],"output":{"name":"bool"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"m6x5"}}],[11,"hash","","",184,null],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"m6x6"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"self"},{"name":"m6x6"}],"output":{"name":"bool"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"m6x6"}}],[11,"hash","","",185,null],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","nalgebra::core","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index","","",1,null],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",1,null],[11,"neg","","",1,null],[11,"neg_mut","","Negates `self` in-place.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"add_to","","Equivalent to `self + rhs` but stores the result into `out` to avoid allocations.",1,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"add","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"sub_to","","Equivalent to `self + rhs` but stores the result into `out` to avoid allocations.",1,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"sub","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"mul","","",1,null],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",1,null],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"tr_mul","","Equivalent to `self.transpose() * rhs`.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixmn"}}],[11,"tr_mul_to","","Equivalent to `self.transpose() * rhs` but stores the result into `out` to avoid allocations.",1,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"mul_to","","Equivalent to `self * rhs` but stores the result into `out` to avoid allocations.",1,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"kronecker","","The kronecker product of two matrices (aka. tensor product of the corresponding linear maps).",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"generics":["dimprod","dimprod"],"name":"matrixmn"}}],[11,"add_scalar","","Adds a scalar to `self`.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrixmn"}}],[11,"add_scalar_mut","","Adds a scalar to `self` in-place.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"amax","","Returns the absolute value of the coefficient with the largest absolute value.",1,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"amin","","Returns the absolute value of the coefficient with the smallest absolute value.",1,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"iamax_full","","Computes the index of the matrix component with the largest absolute value.",1,null],[11,"dot","","The dot product between two matrices (seen as vectors).",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"n"}}],[11,"tr_dot","","The dot product between the transpose of `self` and `rhs`.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"n"}}],[11,"ger","","Computes `self = alpha * x * y.transpose() + beta * self`.",1,{"inputs":[{"name":"self"},{"name":"n"},{"name":"vector"},{"name":"vector"},{"name":"n"}],"output":null}],[11,"gemm","","Computes `self = alpha * a * b + beta * self`, where `a, b, self` are matrices. `alpha` and `beta` are scalar.",1,{"inputs":[{"name":"self"},{"name":"n"},{"name":"matrix"},{"name":"matrix"},{"name":"n"}],"output":null}],[11,"ger_symm","","Computes `self = alpha * x * y.transpose() + beta * self`, where `self` is a symmetric matrix.",1,{"inputs":[{"name":"self"},{"name":"n"},{"name":"vector"},{"name":"vector"},{"name":"n"}],"output":null}],[0,"iter","","Matrix iterators.",null,null],[3,"MatrixIter","nalgebra::core::iter","An iterator through a dense matrix with arbitrary strides matrix.",null,null],[3,"MatrixIterMut","","An iterator through a dense matrix with arbitrary strides matrix.",null,null],[11,"new","","Creates a new iterator for the given matrix storage.",186,{"inputs":[{"name":"s"}],"output":{"name":"matrixiter"}}],[11,"next","","",186,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",186,null],[11,"count","","",186,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",186,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Creates a new iterator for the given matrix storage.",187,{"inputs":[{"name":"s"}],"output":{"name":"matrixitermut"}}],[11,"next","","",187,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",187,null],[11,"count","","",187,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",187,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"default_allocator","nalgebra::core","The default matrix data storage allocator.",null,null],[3,"DefaultAllocator","nalgebra::core::default_allocator","An allocator based on `GenericArray` and `MatrixVec` for statically-sized and dynamically-sized matrices respectively.",null,null],[11,"allocate_uninitialized","","",188,null],[11,"allocate_from_iterator","","",188,null],[11,"allocate_uninitialized","","",188,null],[11,"allocate_from_iterator","","",188,null],[11,"allocate_uninitialized","","",188,null],[11,"allocate_from_iterator","","",188,null],[11,"reallocate_copy","","",188,null],[11,"reallocate_copy","","",188,{"inputs":[{"name":"dynamic"},{"name":"cto"},{"name":"matrixarray"}],"output":{"generics":["dynamic"],"name":"matrixvec"}}],[11,"reallocate_copy","","",188,{"inputs":[{"name":"rto"},{"name":"dynamic"},{"name":"matrixarray"}],"output":{"generics":["dynamic"],"name":"matrixvec"}}],[11,"reallocate_copy","","",188,{"inputs":[{"name":"dynamic"},{"name":"cto"},{"generics":["dynamic"],"name":"matrixvec"}],"output":{"generics":["dynamic"],"name":"matrixvec"}}],[11,"reallocate_copy","","",188,{"inputs":[{"name":"rto"},{"name":"dynamic"},{"generics":["dynamic"],"name":"matrixvec"}],"output":{"generics":["dynamic"],"name":"matrixvec"}}],[11,"reallocate_copy","","",188,{"inputs":[{"name":"dynamic"},{"name":"cto"},{"generics":["dynamic"],"name":"matrixvec"}],"output":{"generics":["dynamic"],"name":"matrixvec"}}],[11,"reallocate_copy","","",188,{"inputs":[{"name":"rto"},{"name":"dynamic"},{"generics":["dynamic"],"name":"matrixvec"}],"output":{"generics":["dynamic"],"name":"matrixvec"}}],[11,"hash","nalgebra::core","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"from_data_statically_unchecked","","Creates a new matrix with the given data without statically checking that the matrix dimension matches the storage dimension.",1,{"inputs":[{"name":"s"}],"output":{"name":"matrix"}}],[11,"from_data","","Creates a new matrix with the given data.",1,{"inputs":[{"name":"s"}],"output":{"name":"matrix"}}],[11,"len","","The total number of elements of this matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"shape","","The shape of this matrix returned as the tuple (number of rows, number of columns).",1,null],[11,"nrows","","The number of rows of this matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns of this matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"strides","","The strides (row stride, column stride) of this matrix.",1,null],[11,"iter","","Iterates through this matrix coordinates.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixiter"}}],[11,"vector_to_matrix_index","","Computes the row and column coordinates of the i-th element of this matrix seen as a vector.",1,null],[11,"get_unchecked","","Gets a reference to the element of this matrix at row `irow` and column `icol` without bound-checking.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"n"}}],[11,"relative_eq","","Tests whether `self` and `rhs` are equal up to a given epsilon.",1,null],[11,"eq","","Tests whether `self` and `rhs` are exactly equal.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"into_owned","","Moves this matrix into one that owns its data.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"into_owned_sum","","Moves this matrix into one that owns its data. The actual type of the result depends on matrix storage combination rules for addition.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixsum"}}],[11,"clone_owned","","Clones this matrix to one that owns its data.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"clone_owned_sum","","Clones this matrix into one that owns its data. The actual type of the result depends on matrix storage combination rules for addition.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixsum"}}],[11,"map","","Returns a matrix containing the result of `f` applied to each of its entries.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"matrixmn"}}],[11,"zip_map","","Returns a matrix containing the result of `f` applied to each entries of `self` and `rhs`.",1,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"f"}],"output":{"name":"matrixmn"}}],[11,"transpose_to","","Transposes `self` and store the result into `out`.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"transpose","","Transposes `self`.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"iter_mut","","Mutably iterates through this matrix coordinates.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixitermut"}}],[11,"get_unchecked_mut","","Gets a mutable reference to the i-th element of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"n"}}],[11,"swap_unchecked","","Swaps two entries without bound-checking.",1,null],[11,"swap","","Swaps two entries.",1,null],[11,"copy_from","","Fills this matrix with the content of another one. Both must have the same shape.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"tr_copy_from","","Fills this matrix with the content of the transpose another one.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"apply","","Replaces each component of `self` by the result of a closure `f` applied on it.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"as_slice","","Extracts a slice containing the entire matrix entries ordered column-by-columns.",1,null],[11,"as_mut_slice","","Extracts a mutable slice containing the entire matrix entries ordered column-by-columns.",1,null],[11,"transpose_mut","","Transposes the square matrix `self` in-place.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"conjugate_transpose_to","","Takes the conjugate and transposes `self` and store the result into `out`.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"conjugate_transpose","","The conjugate transposition of `self`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["complex"],"name":"matrixmn"}}],[11,"conjugate_transpose_mut","","Sets `self` to its conjugate transpose.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"default_epsilon","","",1,null],[11,"default_max_relative","","",1,null],[11,"default_max_ulps","","",1,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",1,null],[11,"ulps_eq","","",1,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"perp","","The perpendicular product between two 2D column vectors, i.e. `a.x * b.y - a.y * b.x`.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"n"}}],[11,"cross","","The 3D cross product between two vectors.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixcross"}}],[11,"angle","","The smallest angle between two vectors.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"n"}}],[11,"norm_squared","","The squared L2 norm of this vector.",1,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"norm","","The L2 norm of this matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","Returns a normalized version of this matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"try_normalize","","Returns a normalized version of this matrix unless its norm as smaller or equal to `eps`.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["matrixmn"],"name":"option"}}],[11,"normalize_mut","","Normalizes this matrix in-place and returns its norm.",1,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize_mut","","Normalizes this matrix in-place or does nothing if its norm is smaller or equal to `eps`.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"default_epsilon","","",189,null],[11,"default_max_relative","","",189,null],[11,"default_max_ulps","","",189,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",189,null],[11,"ulps_eq","","",189,null],[11,"is_empty","","Indicates if this is a square matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_square","","Indicates if this is a square matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_identity","","Indicated if this is the identity matrix within a relative error of `eps`.",1,null],[11,"is_orthogonal","","Checks that `Mᵀ × M = Id`.",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unchecked","","Create a new matrix slice without bound checking.",190,null],[11,"new_with_strides_unchecked","","Create a new matrix slice without bound checking.",190,null],[11,"from_raw_parts","","Create a new matrix slice without bound checking and from a raw pointer.",190,null],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unchecked","","Create a new matrix slice without bound checking.",191,null],[11,"new_with_strides_unchecked","","Create a new matrix slice without bound checking.",191,null],[11,"from_raw_parts","","Create a new matrix slice without bound checking and from a raw pointer.",191,null],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ptr","","",190,null],[11,"shape","","",190,null],[11,"strides","","",190,null],[11,"is_contiguous","","",190,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_owned","","",190,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",190,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"as_slice","","",190,null],[11,"ptr","","",191,null],[11,"shape","","",191,null],[11,"strides","","",191,null],[11,"is_contiguous","","",191,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_owned","","",191,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",191,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"as_slice","","",191,null],[11,"ptr_mut","","",191,null],[11,"as_mut_slice","","",191,null],[11,"row","","Returns a slice containing the i-th row of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u1"],"name":"matrixslice"}}],[11,"row_part","","Returns a slice containing the `n` first elements of the i-th row of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["u1","dynamic"],"name":"matrixslice"}}],[11,"rows","","Extracts from this matrix a set of consecutive rows.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["dynamic"],"name":"matrixslice"}}],[11,"rows_with_step","","Extracts from this matrix a set of consecutive rows regularly skipping `step` rows.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["dynamic","dynamic"],"name":"matrixslice"}}],[11,"fixed_rows","","Extracts a compile-time number of consecutive rows from this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_rows_with_step","","Extracts from this matrix a compile-time number of rows regularly skipping `step` rows.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["dynamic"],"name":"matrixslice"}}],[11,"rows_generic","","Extracts from this matrix `nrows` rows regularly skipping `step` rows. Both argument may or may not be values known at compile-time.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"rslice"}],"output":{"name":"matrixslice"}}],[11,"rows_generic_with_step","","Extracts from this matrix `nrows` rows regularly skipping `step` rows. Both argument may or may not be values known at compile-time.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"rslice"},{"name":"usize"}],"output":{"generics":["dynamic"],"name":"matrixslice"}}],[11,"column","","Returns a slice containing the i-th column of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u1"],"name":"matrixslice"}}],[11,"column_part","","Returns a slice containing the `n` first elements of the i-th column of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["dynamic","u1"],"name":"matrixslice"}}],[11,"columns","","Extracts from this matrix a set of consecutive columns.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["dynamic"],"name":"matrixslice"}}],[11,"columns_with_step","","Extracts from this matrix a set of consecutive columns regularly skipping `step` columns.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["dynamic","dynamic"],"name":"matrixslice"}}],[11,"fixed_columns","","Extracts a compile-time number of consecutive columns from this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_columns_with_step","","Extracts from this matrix a compile-time number of columns regularly skipping `step` columns.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["dynamic"],"name":"matrixslice"}}],[11,"columns_generic","","Extracts from this matrix `ncols` columns. The number of columns may or may not be known at compile-time.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"cslice"}],"output":{"name":"matrixslice"}}],[11,"columns_generic_with_step","","Extracts from this matrix `ncols` columns skipping `step` columns. Both argument may or may not be values known at compile-time.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"cslice"},{"name":"usize"}],"output":{"generics":["dynamic"],"name":"matrixslice"}}],[11,"slice","","Slices this matrix starting at its component `(irow, icol)` and with `(nrows, ncols)` consecutive elements.",1,null],[11,"slice_with_steps","","Slices this matrix starting at its component `(start.0, start.1)` and with `(shape.0, shape.1)` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",1,null],[11,"fixed_slice","","Slices this matrix starting at its component `(irow, icol)` and with `(R::dim(), CSlice::dim())` consecutive components.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_slice_with_steps","","Slices this matrix starting at its component `(start.0, start.1)` and with `(R::dim(), CSlice::dim())` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",1,null],[11,"generic_slice","","Creates a slice that may or may not have a fixed size and stride.",1,null],[11,"generic_slice_with_steps","","Creates a slice that may or may not have a fixed size and stride.",1,null],[11,"rows_range_pair","","Splits this NxM matrix into two parts delimited by two ranges.",1,null],[11,"columns_range_pair","","Splits this NxM matrix into two parts delimited by two ranges.",1,null],[11,"row_mut","","Returns a slice containing the i-th row of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u1"],"name":"matrixslicemut"}}],[11,"row_part_mut","","Returns a slice containing the `n` first elements of the i-th row of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["u1","dynamic"],"name":"matrixslicemut"}}],[11,"rows_mut","","Extracts from this matrix a set of consecutive rows.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["dynamic"],"name":"matrixslicemut"}}],[11,"rows_with_step_mut","","Extracts from this matrix a set of consecutive rows regularly skipping `step` rows.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["dynamic","dynamic"],"name":"matrixslicemut"}}],[11,"fixed_rows_mut","","Extracts a compile-time number of consecutive rows from this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_rows_with_step_mut","","Extracts from this matrix a compile-time number of rows regularly skipping `step` rows.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["dynamic"],"name":"matrixslicemut"}}],[11,"rows_generic_mut","","Extracts from this matrix `nrows` rows regularly skipping `step` rows. Both argument may or may not be values known at compile-time.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"rslice"}],"output":{"name":"matrixslicemut"}}],[11,"rows_generic_with_step_mut","","Extracts from this matrix `nrows` rows regularly skipping `step` rows. Both argument may or may not be values known at compile-time.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"rslice"},{"name":"usize"}],"output":{"generics":["dynamic"],"name":"matrixslicemut"}}],[11,"column_mut","","Returns a slice containing the i-th column of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u1"],"name":"matrixslicemut"}}],[11,"column_part_mut","","Returns a slice containing the `n` first elements of the i-th column of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["dynamic","u1"],"name":"matrixslicemut"}}],[11,"columns_mut","","Extracts from this matrix a set of consecutive columns.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["dynamic"],"name":"matrixslicemut"}}],[11,"columns_with_step_mut","","Extracts from this matrix a set of consecutive columns regularly skipping `step` columns.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["dynamic","dynamic"],"name":"matrixslicemut"}}],[11,"fixed_columns_mut","","Extracts a compile-time number of consecutive columns from this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_columns_with_step_mut","","Extracts from this matrix a compile-time number of columns regularly skipping `step` columns.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["dynamic"],"name":"matrixslicemut"}}],[11,"columns_generic_mut","","Extracts from this matrix `ncols` columns. The number of columns may or may not be known at compile-time.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"cslice"}],"output":{"name":"matrixslicemut"}}],[11,"columns_generic_with_step_mut","","Extracts from this matrix `ncols` columns skipping `step` columns. Both argument may or may not be values known at compile-time.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"cslice"},{"name":"usize"}],"output":{"generics":["dynamic"],"name":"matrixslicemut"}}],[11,"slice_mut","","Slices this matrix starting at its component `(irow, icol)` and with `(nrows, ncols)` consecutive elements.",1,null],[11,"slice_with_steps_mut","","Slices this matrix starting at its component `(start.0, start.1)` and with `(shape.0, shape.1)` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",1,null],[11,"fixed_slice_mut","","Slices this matrix starting at its component `(irow, icol)` and with `(R::dim(), CSlice::dim())` consecutive components.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_slice_with_steps_mut","","Slices this matrix starting at its component `(start.0, start.1)` and with `(R::dim(), CSlice::dim())` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",1,null],[11,"generic_slice_mut","","Creates a slice that may or may not have a fixed size and stride.",1,null],[11,"generic_slice_with_steps_mut","","Creates a slice that may or may not have a fixed size and stride.",1,null],[11,"rows_range_pair_mut","","Splits this NxM matrix into two parts delimited by two ranges.",1,null],[11,"columns_range_pair_mut","","Splits this NxM matrix into two parts delimited by two ranges.",1,null],[11,"slice_range","","Slices a sub-matrix containing the rows indexed by the range `rows` and the columns indexed by the range `cols`.",1,{"inputs":[{"name":"self"},{"name":"rowrange"},{"name":"colrange"}],"output":{"name":"matrixslice"}}],[11,"rows_range","","Slice containing all the rows indexed by the range `rows`.",1,{"inputs":[{"name":"self"},{"name":"rowrange"}],"output":{"name":"matrixslice"}}],[11,"columns_range","","Slice containing all the columns indexed by the range `rows`.",1,{"inputs":[{"name":"self"},{"name":"colrange"}],"output":{"name":"matrixslice"}}],[11,"slice_range_mut","","Slices a mutable sub-matrix containing the rows indexed by the range `rows` and the columns indexed by the range `cols`.",1,{"inputs":[{"name":"self"},{"name":"rowrange"},{"name":"colrange"}],"output":{"name":"matrixslicemut"}}],[11,"rows_range_mut","","Slice containing all the rows indexed by the range `rows`.",1,{"inputs":[{"name":"self"},{"name":"rowrange"}],"output":{"name":"matrixslicemut"}}],[11,"columns_range_mut","","Slice containing all the columns indexed by the range `cols`.",1,{"inputs":[{"name":"self"},{"name":"colrange"}],"output":{"name":"matrixslicemut"}}],[11,"hash","","",192,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"deref","","",192,null],[11,"deref_mut","","",192,null],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ptr","","",192,null],[11,"shape","","",192,null],[11,"strides","","",192,null],[11,"is_contiguous","","",192,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_owned","","",192,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",192,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"as_slice","","",192,null],[11,"ptr_mut","","",192,null],[11,"as_mut_slice","","",192,null],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"matrixvec"}}],[11,"eq","","",193,{"inputs":[{"name":"self"},{"name":"matrixvec"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"self"},{"name":"matrixvec"}],"output":{"name":"bool"}}],[11,"new","","Creates a new dynamic matrix data storage from the given vector and shape.",193,{"inputs":[{"name":"r"},{"name":"c"},{"name":"vec"}],"output":{"name":"matrixvec"}}],[11,"data","","The underlying data storage.",193,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"data_mut","","The underlying mutable data storage.",193,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the undelying mutable data storage and unrwaps it.",193,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"deref","","",193,null],[11,"ptr","","",193,null],[11,"shape","","",193,null],[11,"strides","","",193,null],[11,"is_contiguous","","",193,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_owned","","",193,{"inputs":[{"name":"self"}],"output":{"generics":["dynamic"],"name":"owned"}}],[11,"clone_owned","","",193,{"inputs":[{"name":"self"}],"output":{"generics":["dynamic"],"name":"owned"}}],[11,"as_slice","","",193,null],[11,"ptr","","",193,null],[11,"shape","","",193,null],[11,"strides","","",193,null],[11,"is_contiguous","","",193,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_owned","","",193,{"inputs":[{"name":"self"}],"output":{"generics":["dynamic"],"name":"owned"}}],[11,"clone_owned","","",193,{"inputs":[{"name":"self"}],"output":{"generics":["dynamic"],"name":"owned"}}],[11,"as_slice","","",193,null],[11,"ptr_mut","","",193,null],[11,"as_mut_slice","","",193,null],[11,"ptr_mut","","",193,null],[11,"as_mut_slice","","",193,null],[11,"eq","","",189,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"unit"}}],[11,"hash","","",189,null],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_normalize","","Normalize the given value and return it wrapped on a `Unit` structure.",189,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"try_new","","Attempts to normalize the given value and return it wrapped on a `Unit` structure.",189,null],[11,"new_and_get","","Normalize the given value and return it wrapped on a `Unit` structure and its norm.",189,null],[11,"try_new_and_get","","Normalize the given value and return it wrapped on a `Unit` structure and its norm.",189,null],[11,"renormalize","","Normalizes this value again. This is useful when repeated computations might cause a drift in the norm because of float inaccuracies.",189,null],[11,"new_unchecked","","Wraps the given value, assuming it is already normalized.",189,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"unwrap","","Retrieves the underlying value.",189,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut_unchecked","","Returns a mutable reference to the underlying value. This is `_unchecked` because modifying the underlying value in such a way that it no longer has unit length may lead to unexpected results.",189,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",189,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_superset","","",189,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_in_subset","","",189,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",189,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"neg","","",189,null],[11,"deref","","",189,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"abs","","Computes the componentwise absolute value.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"component_mul","","Componentwise matrix multiplication.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixsum"}}],[11,"component_mul_assign","","Mutable, componentwise matrix multiplication.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"component_mul_mut","","Mutable, componentwise matrix multiplication.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"component_div","","Componentwise matrix division.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixsum"}}],[11,"component_div_assign","","Mutable, componentwise matrix division.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"component_div_mut","","Mutable, componentwise matrix division.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"upper_triangle","","Extracts the upper triangular part of this matrix (including the diagonal).",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"lower_triangle","","Extracts the upper triangular part of this matrix (including the diagonal).",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"fill","","Sets all the elements of this matrix to `val`.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"fill_with_identity","","Fills `self` with the identity matrix.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fill_diagonal","","Sets all the diagonal elements of this matrix to `val`.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"fill_row","","Sets all the elements of the selected row to `val`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"fill_column","","Sets all the elements of the selected column to `val`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"set_diagonal","","Fills the diagonal of this matrix with the content of the given vector.",1,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"set_row","","Fills the selected row of this matrix with the content of the given vector.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"rowvector"}],"output":null}],[11,"set_column","","Fills the selected column of this matrix with the content of the given vector.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector"}],"output":null}],[11,"fill_lower_triangle","","Sets all the elements of the lower-triangular part of this matrix to `val`.",1,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":null}],[11,"fill_upper_triangle","","Sets all the elements of the lower-triangular part of this matrix to `val`.",1,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":null}],[11,"swap_rows","","Swaps two rows in-place.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_columns","","Swaps two columns in-place.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"fill_lower_triangle_with_upper_triangle","","Copies the upper-triangle of this matrix to its lower-triangular part.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fill_upper_triangle_with_lower_triangle","","Copies the upper-triangle of this matrix to its upper-triangular part.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"remove_column","","Removes the `i`-th column from this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["dimdiff"],"name":"matrixmn"}}],[11,"remove_fixed_columns","","Removes `D::dim()` consecutive columns from this matrix, starting with the `i`-th (included).",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["dimdiff"],"name":"matrixmn"}}],[11,"remove_columns","","Removes `n` consecutive columns from this matrix, starting with the `i`-th (included).",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["dynamic"],"name":"matrixmn"}}],[11,"remove_columns_generic","","Removes `nremove.value()` columns from this matrix, starting with the `i`-th (included).",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"d"}],"output":{"generics":["dimdiff"],"name":"matrixmn"}}],[11,"remove_row","","Removes the `i`-th row from this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["dimdiff"],"name":"matrixmn"}}],[11,"remove_fixed_rows","","Removes `D::dim()` consecutive rows from this matrix, starting with the `i`-th (included).",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["dimdiff"],"name":"matrixmn"}}],[11,"remove_rows","","Removes `n` consecutive rows from this matrix, starting with the `i`-th (included).",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["dynamic"],"name":"matrixmn"}}],[11,"remove_rows_generic","","Removes `nremove.value()` rows from this matrix, starting with the `i`-th (included).",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"d"}],"output":{"generics":["dimdiff"],"name":"matrixmn"}}],[11,"insert_column","","Inserts a column filled with `val` at the `i-th` position.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":{"generics":["dimsum"],"name":"matrixmn"}}],[11,"insert_fixed_columns","","Inserts `D::dim()` columns filled with `val` starting at the `i-th` position.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":{"generics":["dimsum"],"name":"matrixmn"}}],[11,"insert_columns","","Inserts `n` columns filled with `val` starting at the `i-th` position.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"generics":["dynamic"],"name":"matrixmn"}}],[11,"insert_columns_generic_uninitialized","","Inserts `ninsert.value()` columns starting at the `i-th` place of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"d"}],"output":{"generics":["dimsum"],"name":"matrixmn"}}],[11,"insert_row","","Inserts a row filled with `val` at the `i-th` position.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":{"generics":["dimsum"],"name":"matrixmn"}}],[11,"insert_fixed_rows","","Inserts `D::dim()` rows filled with `val` starting at the `i-th` position.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":{"generics":["dimsum"],"name":"matrixmn"}}],[11,"insert_rows","","Inserts `n` rows filled with `val` starting at the `i-th` position.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"generics":["dynamic"],"name":"matrixmn"}}],[11,"insert_rows_generic_uninitialized","","Inserts `ninsert.value()` rows at the `i-th` place of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"d"}],"output":{"generics":["dimsum"],"name":"matrixmn"}}],[11,"resize","","Resizes this matrix so that it contains `new_nrows` rows and `new_ncols` columns.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix"}}],[11,"fixed_resize","","Resizes this matrix so that it contains `R2::value()` rows and `C2::value()` columns.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrixmn"}}],[11,"resize_generic","","Resizes `self` such that it has dimensions `new_nrows × now_ncols`.",1,{"inputs":[{"name":"self"},{"name":"r2"},{"name":"c2"},{"name":"n"}],"output":{"name":"matrixmn"}}],[6,"SquareMatrix","","A square matrix.",null,null],[6,"Vector","","A matrix with one column and `D` rows.",null,null],[6,"RowVector","","A matrix with one row and `D` columns .",null,null],[6,"MatrixSum","","The type of the result of a matrix sum.",null,null],[6,"VectorSum","","The type of the result of a matrix sum.",null,null],[6,"MatrixCross","","The type of the result of a matrix cross product.",null,null],[6,"MatrixNM","","A staticaly sized column-major matrix with `R` rows and `C` columns.",null,null],[6,"MatrixMN","","A staticaly sized column-major matrix with `R` rows and `C` columns.",null,null],[6,"MatrixN","","A staticaly sized column-major square matrix with `D` rows and columns.",null,null],[6,"DMatrix","","A dynamically sized column-major matrix.",null,null],[6,"Matrix1","","A stack-allocated, column-major, 1x1 square matrix.",null,null],[6,"Matrix2","","A stack-allocated, column-major, 2x2 square matrix.",null,null],[6,"Matrix3","","A stack-allocated, column-major, 3x3 square matrix.",null,null],[6,"Matrix4","","A stack-allocated, column-major, 4x4 square matrix.",null,null],[6,"Matrix5","","A stack-allocated, column-major, 5x5 square matrix.",null,null],[6,"Matrix6","","A stack-allocated, column-major, 6x6 square matrix.",null,null],[6,"Matrix1x2","","A stack-allocated, column-major, 1x2 square matrix.",null,null],[6,"Matrix1x3","","A stack-allocated, column-major, 1x3 square matrix.",null,null],[6,"Matrix1x4","","A stack-allocated, column-major, 1x4 square matrix.",null,null],[6,"Matrix1x5","","A stack-allocated, column-major, 1x5 square matrix.",null,null],[6,"Matrix1x6","","A stack-allocated, column-major, 1x6 square matrix.",null,null],[6,"Matrix2x3","","A stack-allocated, column-major, 2x3 square matrix.",null,null],[6,"Matrix2x4","","A stack-allocated, column-major, 2x4 square matrix.",null,null],[6,"Matrix2x5","","A stack-allocated, column-major, 2x5 square matrix.",null,null],[6,"Matrix2x6","","A stack-allocated, column-major, 2x6 square matrix.",null,null],[6,"Matrix3x4","","A stack-allocated, column-major, 3x4 square matrix.",null,null],[6,"Matrix3x5","","A stack-allocated, column-major, 3x5 square matrix.",null,null],[6,"Matrix3x6","","A stack-allocated, column-major, 3x6 square matrix.",null,null],[6,"Matrix4x5","","A stack-allocated, column-major, 4x5 square matrix.",null,null],[6,"Matrix4x6","","A stack-allocated, column-major, 4x6 square matrix.",null,null],[6,"Matrix5x6","","A stack-allocated, column-major, 5x6 square matrix.",null,null],[6,"Matrix2x1","","A stack-allocated, column-major, 2x1 square matrix.",null,null],[6,"Matrix3x1","","A stack-allocated, column-major, 3x1 square matrix.",null,null],[6,"Matrix4x1","","A stack-allocated, column-major, 4x1 square matrix.",null,null],[6,"Matrix5x1","","A stack-allocated, column-major, 5x1 square matrix.",null,null],[6,"Matrix6x1","","A stack-allocated, column-major, 6x1 square matrix.",null,null],[6,"Matrix3x2","","A stack-allocated, column-major, 3x2 square matrix.",null,null],[6,"Matrix4x2","","A stack-allocated, column-major, 4x2 square matrix.",null,null],[6,"Matrix5x2","","A stack-allocated, column-major, 5x2 square matrix.",null,null],[6,"Matrix6x2","","A stack-allocated, column-major, 6x2 square matrix.",null,null],[6,"Matrix4x3","","A stack-allocated, column-major, 4x3 square matrix.",null,null],[6,"Matrix5x3","","A stack-allocated, column-major, 5x3 square matrix.",null,null],[6,"Matrix6x3","","A stack-allocated, column-major, 6x3 square matrix.",null,null],[6,"Matrix5x4","","A stack-allocated, column-major, 5x4 square matrix.",null,null],[6,"Matrix6x4","","A stack-allocated, column-major, 6x4 square matrix.",null,null],[6,"Matrix6x5","","A stack-allocated, column-major, 6x5 square matrix.",null,null],[6,"DVector","","A dynamically sized column vector.",null,null],[6,"VectorN","","A statically sized D-dimensional column vector.",null,null],[6,"Vector1","","A stack-allocated, 1-dimensional column vector.",null,null],[6,"Vector2","","A stack-allocated, 2-dimensional column vector.",null,null],[6,"Vector3","","A stack-allocated, 3-dimensional column vector.",null,null],[6,"Vector4","","A stack-allocated, 4-dimensional column vector.",null,null],[6,"Vector5","","A stack-allocated, 5-dimensional column vector.",null,null],[6,"Vector6","","A stack-allocated, 6-dimensional column vector.",null,null],[6,"RowDVector","","A dynamically sized row vector.",null,null],[6,"RowVectorN","","A statically sized D-dimensional row vector.",null,null],[6,"RowVector1","","A stack-allocated, 1-dimensional row vector.",null,null],[6,"RowVector2","","A stack-allocated, 2-dimensional row vector.",null,null],[6,"RowVector3","","A stack-allocated, 3-dimensional row vector.",null,null],[6,"RowVector4","","A stack-allocated, 4-dimensional row vector.",null,null],[6,"RowVector5","","A stack-allocated, 5-dimensional row vector.",null,null],[6,"RowVector6","","A stack-allocated, 6-dimensional row vector.",null,null],[6,"MatrixSlice","","A matrix slice.",null,null],[6,"MatrixSliceMut","","A matrix slice.",null,null],[8,"Scalar","","The basic scalar type for all structures of `nalgebra`.",null,null],[11,"is","","Tests if `Self` the the same as the type `T`",194,{"inputs":[],"output":{"name":"bool"}}],[8,"SliceRange","","A range with a size that may be known at compile-time.",null,null],[16,"Size","","Type of the range size. May be a type-level integer.",195,null],[10,"begin","","The start index of the range.",195,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"usize"}}],[10,"end","","The index immediatly after the last index inside of the range.",195,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"usize"}}],[10,"size","","The number of elements of the range, i.e., `self.end - self.begin`.",195,null],[0,"linalg","nalgebra","[Reexported at the root of this crate.] Factorization of real matrices.",null,null],[3,"PermutationSequence","nalgebra::linalg","A sequence of row or column permutations.",null,null],[3,"QR","","The QR decomposition of a general matrix.",null,null],[3,"Hessenberg","","Hessenberg decomposition of a general matrix.",null,null],[3,"Bidiagonal","","The bidiagonalization of a general matrix.",null,null],[12,"diagonal","","The diagonal elements of the decomposed matrix.",196,null],[12,"off_diagonal","","The off-diagonal elements of the decomposed matrix.",196,null],[3,"Cholesky","","The Cholesky decomposion of a symmetric-definite-positive matrix.",null,null],[3,"LU","","LU decomposition with partial (row) pivoting.",null,null],[3,"FullPivLU","","LU decomposition with full row and column pivoting.",null,null],[3,"RealSchur","","Real Schur decomposition of a square matrix.",null,null],[3,"SVD","","Singular Value Decomposition of a general matrix.",null,null],[12,"u","","The left-singular vectors `U` of this SVD.",197,null],[12,"v_t","","The right-singular vectors `V^t` of this SVD.",197,null],[12,"singular_values","","The singular values of this SVD.",197,null],[3,"SymmetricTridiagonal","","Tridiagonalization of a symmetric matrix.",null,null],[3,"SymmetricEigen","","Eigendecomposition of a symmetric matrix.",null,null],[12,"eigenvectors","","The eigenvectors of the decomposed matrix.",198,null],[12,"eigenvalues","","The unsorted eigenvalues of the decomposed matrix.",198,null],[5,"try_invert_to","","Performs a LU decomposition to overwrite `out` with the inverse of `matrix`.",null,{"inputs":[{"name":"matrixn"},{"name":"matrix"}],"output":{"name":"bool"}}],[5,"wilkinson_shift","","Computes the wilkinson shift, i.e., the 2x2 symmetric matrix eigenvalue to its tailing component `tnn`.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[11,"solve_lower_triangular","nalgebra::linalg::solve","Computes the solution of the linear system `self . x = b` where `x` is the unknown and only the lower-triangular part of `self` (including the diagonal) is concidered not-zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"generics":["matrixmn"],"name":"option"}}],[11,"solve_upper_triangular","","Computes the solution of the linear system `self . x = b` where `x` is the unknown and only the upper-triangular part of `self` (including the diagonal) is concidered not-zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"generics":["matrixmn"],"name":"option"}}],[11,"solve_lower_triangular_mut","","Solves the linear system `self . x = b` where `x` is the unknown and only the lower-triangular part of `self` (including the diagonal) is concidered not-zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"solve_lower_triangular_with_diag_mut","","Solves the linear system `self . x = b` where `x` is the unknown and only the lower-triangular part of `self` is concidered not-zero. The diagonal is never read as it is assumed to be equal to `diag`. Returns `false` and does not modify its inputs if `diag` is zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"n"}],"output":{"name":"bool"}}],[11,"solve_upper_triangular_mut","","Solves the linear system `self . x = b` where `x` is the unknown and only the upper-triangular part of `self` (including the diagonal) is concidered not-zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"tr_solve_lower_triangular","","Computes the solution of the linear system `self.transpose() . x = b` where `x` is the unknown and only the lower-triangular part of `self` (including the diagonal) is concidered not-zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"generics":["matrixmn"],"name":"option"}}],[11,"tr_solve_upper_triangular","","Computes the solution of the linear system `self.transpose() . x = b` where `x` is the unknown and only the upper-triangular part of `self` (including the diagonal) is concidered not-zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"generics":["matrixmn"],"name":"option"}}],[11,"tr_solve_lower_triangular_mut","","Solves the linear system `self.transpose() . x = b` where `x` is the unknown and only the lower-triangular part of `self` (including the diagonal) is concidered not-zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"tr_solve_upper_triangular_mut","","Solves the linear system `self.transpose() . x = b` where `x` is the unknown and only the upper-triangular part of `self` (including the diagonal) is concidered not-zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"determinant","nalgebra::linalg::determinant","Computes the matrix determinant.",199,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_inverse","nalgebra::linalg::inverse","Attempts to invert this matrix.",199,{"inputs":[{"name":"self"}],"output":{"generics":["matrixn"],"name":"option"}}],[11,"try_inverse_mut","","Attempts to invert this matrix in-place. Returns `false` and leaves `self` untouched if inversion fails.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"householder","nalgebra::linalg","Construction of householder elementary reflections.",null,null],[0,"givens","","Construction of givens rotations.",null,null],[5,"cancel_y","nalgebra::linalg::givens","Computes the rotation `R` required such that the `y` component of `R * v` is zero.",null,{"inputs":[{"name":"vector"}],"output":{"name":"option"}}],[5,"cancel_x","","Computes the rotation `R` required such that the `x` component of `R * v` is zero.",null,{"inputs":[{"name":"vector"}],"output":{"name":"option"}}],[0,"balancing","nalgebra::linalg","Functions for balancing a matrix.",null,null],[5,"balance_parlett_reinsch","nalgebra::linalg::balancing","Applies in-place a modified Parlett and Reinsch matrix balancing with 2-norm to the matrix `m` and returns the corresponding diagonal transformation.",null,{"inputs":[{"name":"matrixn"}],"output":{"name":"vectorn"}}],[5,"unbalance","","Computes in-place `D * m * D.inverse()`, where `D` is the matrix with diagonal `d`.",null,{"inputs":[{"name":"matrixn"},{"name":"vectorn"}],"output":null}],[11,"clone","nalgebra::linalg","",200,{"inputs":[{"name":"self"}],"output":{"name":"permutationsequence"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new statically-allocated sequence of `D` identity permutations.",200,{"inputs":[],"output":{"name":"self"}}],[11,"identity","","Creates a new dynamically-allocated sequence of `n` identity permutations.",200,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"identity_generic","","Creates a new sequence of D identity permutations.",200,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"append_permutation","","Adds the interchange of the row (or column) `i` with the row (or column) `i2` to this sequence of permutations.",200,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"permute_rows","","Applies this sequence of permutations to the rows of `rhs`.",200,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"inv_permute_rows","","Applies this sequence of permutations in reverse to the rows of `rhs`.",200,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"permute_columns","","Applies this sequence of permutations to the columns of `rhs`.",200,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"inv_permute_columns","","Applies this sequence of permutations in reverse to the columns of `rhs`.",200,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"len","","The number of non-identity permutations applied by this sequence.",200,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"determinant","","The determinant of the matrix corresponding to this permutation.",200,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"qr"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the QR decomposition using householder reflections.",201,{"inputs":[{"name":"matrixmn"}],"output":{"name":"self"}}],[11,"r","","Retrieves the upper trapezoidal submatrix `R` of this decomposition.",201,{"inputs":[{"name":"self"}],"output":{"generics":["dimminimum"],"name":"matrixmn"}}],[11,"unpack_r","","Retrieves the upper trapezoidal submatrix `R` of this decomposition.",201,{"inputs":[{"name":"self"}],"output":{"generics":["dimminimum"],"name":"matrixmn"}}],[11,"q","","Computes the orthogonal matrix `Q` of this decomposition.",201,{"inputs":[{"name":"self"}],"output":{"generics":["dimminimum"],"name":"matrixmn"}}],[11,"unpack","","Unpacks this decomposition into its two matrix factors.",201,null],[11,"q_tr_mul","","Multiplies the provided matrix by the transpose of the `Q` matrix of this decomposition.",201,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"solve","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",201,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"generics":["matrixmn"],"name":"option"}}],[11,"solve_mut","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",201,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"try_inverse","","Computes the inverse of the decomposed matrix.",201,{"inputs":[{"name":"self"}],"output":{"generics":["matrixn"],"name":"option"}}],[11,"is_invertible","","Indicates if the decomposed matrix is invertible.",201,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"qr","nalgebra::core","Computes the QR decomposition of this matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"qr"}}],[11,"clone","nalgebra::linalg","",202,{"inputs":[{"name":"self"}],"output":{"name":"hessenberg"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the Hessenberg decomposition using householder reflections.",202,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"new_with_workspace","","Computes the Hessenberg decomposition using householder reflections.",202,{"inputs":[{"name":"matrixn"},{"name":"vectorn"}],"output":{"name":"self"}}],[11,"unpack","","Retrieves `(q, h)` with `q` the orthogonal matrix of this decomposition and `h` the hessenberg matrix.",202,null],[11,"unpack_h","","Retrieves the upper trapezoidal submatrix `H` of this decomposition.",202,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"h","","Retrieves the upper trapezoidal submatrix `H` of this decomposition.",202,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"q","","Computes the orthogonal matrix `Q` of this decomposition.",202,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"hessenberg","nalgebra::linalg::hessenberg","Computes the Hessenberg decomposition of this matrix using householder reflections.",199,{"inputs":[{"name":"self"}],"output":{"name":"hessenberg"}}],[11,"clone","nalgebra::linalg","",196,{"inputs":[{"name":"self"}],"output":{"name":"bidiagonal"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the Bidiagonal decomposition using householder reflections.",196,{"inputs":[{"name":"matrixmn"}],"output":{"name":"self"}}],[11,"is_upper_diagonal","","Indicates whether this decomposition contains an upper-diagonal matrix.",196,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unpack","","Unpacks this decomposition into its three matrix factors `(U, D, V^t)`.",196,null],[11,"d","","Retrieves the upper trapezoidal submatrix `R` of this decomposition.",196,{"inputs":[{"name":"self"}],"output":{"generics":["dimminimum"],"name":"matrixn"}}],[11,"u","","Computes the orthogonal matrix `U` of this `U * D * V` decomposition.",196,{"inputs":[{"name":"self"}],"output":{"generics":["dimminimum"],"name":"matrixmn"}}],[11,"v_t","","Computes the orthogonal matrix `V` of this `U * D * V` decomposition.",196,{"inputs":[{"name":"self"}],"output":{"generics":["dimminimum"],"name":"matrixmn"}}],[11,"diagonal","","The diagonal part of this decomposed matrix.",196,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"off_diagonal","","The off-diagonal part of this decomposed matrix.",196,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"bidiagonalize","nalgebra::core","Computes the bidiagonalization using householder reflections.",1,{"inputs":[{"name":"self"}],"output":{"name":"bidiagonal"}}],[11,"clone","nalgebra::linalg","",203,{"inputs":[{"name":"self"}],"output":{"name":"symmetrictridiagonal"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the tridiagonalization of the symmetric matrix `m`.",203,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"unpack","","Retrieve the orthogonal transformation, diagonal, and off diagonal elements of this decomposition.",203,null],[11,"unpack_tridiagonal","","Retrieve the diagonal, and off diagonal elements of this decomposition.",203,null],[11,"diagonal","","The diagonal components of this decomposition.",203,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"off_diagonal","","The off-diagonal components of this decomposition.",203,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"q","","Computes the orthogonal matrix `Q` of this decomposition.",203,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"recompose","","Recomputes the original symmetric matrix.",203,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"symmetric_tridiagonalize","nalgebra::linalg::symmetric_tridiagonal","Computes the tridiagonalization of this symmetric matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"symmetrictridiagonal"}}],[11,"clone","nalgebra::linalg","",204,{"inputs":[{"name":"self"}],"output":{"name":"cholesky"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Attempts to compute the Cholesky decomposition of `matrix`.",204,{"inputs":[{"name":"matrixn"}],"output":{"name":"option"}}],[11,"unpack","","Retrieves the lower-triangular factor of the Cholesky decomposition with its strictly upper-triangular part filled with zeros.",204,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"unpack_dirty","","Retrieves the lower-triangular factor of the Cholesky decomposition, without zeroing-out its strict upper-triangular part.",204,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"l","","Retrieves the lower-triangular factor of the Cholesky decomposition with its strictly uppen-triangular part filled with zeros.",204,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"l_dirty","","Retrieves the lower-triangular factor of the Cholesky decomposition, without zeroing-out its strict upper-triangular part.",204,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"solve_mut","","Solves the system `self * x = b` where `self` is the decomposed matrix and `x` the unknown.",204,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"solve","","Returns the solution of the system `self * x = b` where `self` is the decomposed matrix and `x` the unknown.",204,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixmn"}}],[11,"inverse","","Computes the inverse of the decomposed matrix.",204,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"cholesky","nalgebra::linalg::cholesky","Attempts to compute the Cholesky decomposition of this matrix.",199,{"inputs":[{"name":"self"}],"output":{"generics":["cholesky"],"name":"option"}}],[11,"clone","nalgebra::linalg","",205,{"inputs":[{"name":"self"}],"output":{"name":"lu"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the LU decomposition with partial (row) pivoting of `matrix`.",205,{"inputs":[{"name":"matrixmn"}],"output":{"name":"self"}}],[11,"l","","The lower triangular matrix of this decomposition.",205,{"inputs":[{"name":"self"}],"output":{"generics":["dimminimum"],"name":"matrixmn"}}],[11,"l_unpack","","The lower triangular matrix of this decomposition.",205,{"inputs":[{"name":"self"}],"output":{"generics":["dimminimum"],"name":"matrixmn"}}],[11,"u","","The upper triangular matrix of this decomposition.",205,{"inputs":[{"name":"self"}],"output":{"generics":["dimminimum"],"name":"matrixmn"}}],[11,"p","","The row permutations of this decomposition.",205,{"inputs":[{"name":"self"}],"output":{"name":"permutationsequence"}}],[11,"unpack","","The row permutations and two triangular matrices of this decomposition: `(P, L, U)`.",205,null],[11,"solve","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",205,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"generics":["matrixmn"],"name":"option"}}],[11,"solve_mut","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",205,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"try_inverse","","Computes the inverse of the decomposed matrix.",205,{"inputs":[{"name":"self"}],"output":{"generics":["matrixn"],"name":"option"}}],[11,"try_inverse_to","","Computes the inverse of the decomposed matrix and outputs the result to `out`.",205,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"determinant","","Computes the determinant of the decomposed matrix.",205,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"is_invertible","","Indicates if the decomposed matrix is invertible.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lu","nalgebra::core","Computes the LU decomposition with partial (row) pivoting of `matrix`.",1,{"inputs":[{"name":"self"}],"output":{"name":"lu"}}],[11,"clone","nalgebra::linalg","",206,{"inputs":[{"name":"self"}],"output":{"name":"fullpivlu"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the LU decomposition with full pivoting of `matrix`.",206,{"inputs":[{"name":"matrixmn"}],"output":{"name":"self"}}],[11,"l","","The lower triangular matrix of this decomposition.",206,{"inputs":[{"name":"self"}],"output":{"generics":["dimminimum"],"name":"matrixmn"}}],[11,"u","","The upper triangular matrix of this decomposition.",206,{"inputs":[{"name":"self"}],"output":{"generics":["dimminimum"],"name":"matrixmn"}}],[11,"p","","The row permutations of this decomposition.",206,{"inputs":[{"name":"self"}],"output":{"name":"permutationsequence"}}],[11,"q","","The column permutations of this decomposition.",206,{"inputs":[{"name":"self"}],"output":{"name":"permutationsequence"}}],[11,"unpack","","The two matrices of this decomposition and the row and column permutations: `(P, L, U, Q)`.",206,null],[11,"solve","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",206,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"generics":["matrixmn"],"name":"option"}}],[11,"solve_mut","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",206,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"try_inverse","","Computes the inverse of the decomposed matrix.",206,{"inputs":[{"name":"self"}],"output":{"generics":["matrixn"],"name":"option"}}],[11,"is_invertible","","Indicates if the decomposed matrix is invertible.",206,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"determinant","","Computes the determinant of the decomposed matrix.",206,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"full_piv_lu","nalgebra::core","Computes the LU decomposition with full pivoting of `matrix`.",1,{"inputs":[{"name":"self"}],"output":{"name":"fullpivlu"}}],[11,"clone","nalgebra::linalg","",207,{"inputs":[{"name":"self"}],"output":{"name":"realschur"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the Schur decomposition of a square matrix.",207,{"inputs":[{"name":"matrixn"}],"output":{"name":"realschur"}}],[11,"try_new","","Attempts to compute the Schur decomposition of a square matrix.",207,{"inputs":[{"name":"matrixn"},{"name":"n"},{"name":"usize"}],"output":{"generics":["realschur"],"name":"option"}}],[11,"unpack","","Retrieves the unitary matrix `Q` and the upper-quasitriangular matrix `T` such that the decomposed matrix equals `Q * T * Q.transpose()`.",207,null],[11,"eigenvalues","","Computes the real eigenvalues of the decomposed matrix.",207,{"inputs":[{"name":"self"}],"output":{"generics":["vectorn"],"name":"option"}}],[11,"complex_eigenvalues","","Computes the complex eigenvalues of the decomposed matrix.",207,{"inputs":[{"name":"self"}],"output":{"generics":["complex"],"name":"vectorn"}}],[11,"real_schur","nalgebra::linalg::schur","Computes the Schur decomposition of a square matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"realschur"}}],[11,"try_real_schur","","Attempts to compute the Schur decomposition of a square matrix.",199,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["realschur"],"name":"option"}}],[11,"eigenvalues","","Computes the eigenvalues of this matrix.",199,{"inputs":[{"name":"self"}],"output":{"generics":["vectorn"],"name":"option"}}],[11,"complex_eigenvalues","","Computes the eigenvalues of this matrix.",199,{"inputs":[{"name":"self"}],"output":{"generics":["complex"],"name":"vectorn"}}],[11,"clone","nalgebra::linalg","",197,{"inputs":[{"name":"self"}],"output":{"name":"svd"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the Singular Value Decomposition of `matrix` using implicit shift.",197,{"inputs":[{"name":"matrixmn"},{"name":"bool"},{"name":"bool"}],"output":{"name":"self"}}],[11,"try_new","","Attempts to compute the Singular Value Decomposition of `matrix` using implicit shift.",197,{"inputs":[{"name":"matrixmn"},{"name":"bool"},{"name":"bool"},{"name":"n"},{"name":"usize"}],"output":{"name":"option"}}],[11,"rank","","Computes the rank of the decomposed matrix, i.e., the number of singular values greater than `eps`.",197,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"usize"}}],[11,"recompose","","Rebuild the original matrix.",197,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"pseudo_inverse","","Computes the pseudo-inverse of the decomposed matrix.",197,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrixmn"}}],[11,"solve","","Solves the system `self * x = b` where `self` is the decomposed matrix and `x` the unknown.",197,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"n"}],"output":{"name":"matrixmn"}}],[11,"svd","nalgebra::core","Computes the Singular Value Decomposition using implicit shift.",1,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"svd"}}],[11,"try_svd","","Attempts to compute the Singular Value Decomposition of `matrix` using implicit shift.",1,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"n"},{"name":"usize"}],"output":{"generics":["svd"],"name":"option"}}],[11,"singular_values","","Computes the singular values of this matrix.",1,{"inputs":[{"name":"self"}],"output":{"generics":["dimminimum"],"name":"vectorn"}}],[11,"rank","","Computes the rank of this matrix.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"usize"}}],[11,"pseudo_inverse","","Computes the pseudo-inverse of this matrix.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrixmn"}}],[11,"clone","nalgebra::linalg","",198,{"inputs":[{"name":"self"}],"output":{"name":"symmetriceigen"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the eigendecomposition of the given symmetric matrix.",198,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"try_new","","Computes the eigendecomposition of the given symmetric matrix with user-specified convergence parameters.",198,{"inputs":[{"name":"matrixn"},{"name":"n"},{"name":"usize"}],"output":{"name":"option"}}],[11,"recompose","","Rebuild the original matrix.",198,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"symmetric_eigen","nalgebra::linalg::symmetric_eigen","Computes the eigendecomposition of this symmetric matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"symmetriceigen"}}],[11,"try_symmetric_eigen","","Computes the eigendecomposition of the given symmetric matrix with user-specified convergence parameters.",199,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["symmetriceigen"],"name":"option"}}],[11,"symmetric_eigenvalues","","Computes the eigenvalues of this symmetric matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[0,"geometry","nalgebra","[Reexported at the root of this crate.] Data structures for points and usual transformations (rotations, isometries, etc.)",null,null],[3,"Point","nalgebra::geometry","A point in a n-dimensional euclidean space.",null,null],[12,"coords","","The coordinates of this point, i.e., the shift from the origin.",208,null],[3,"Rotation","","A rotation matrix.",null,null],[3,"Quaternion","","A quaternion. See the type alias `UnitQuaternion = Unit<Quaternion>` for a quaternion that may be used as a rotation.",null,null],[12,"coords","","This quaternion as a 4D vector of coordinates in the `[ x, y, z, w ]` storage order.",209,null],[3,"Translation","","A translation.",null,null],[12,"vector","","The translation coordinates, i.e., how much is added to a point's coordinates when it is translated.",210,null],[3,"Isometry","","A direct isometry, i.e., a rotation followed by a translation.",null,null],[12,"rotation","","The pure rotational part of this isometry.",211,null],[12,"translation","","The pure translational part of this isometry.",211,null],[3,"Similarity","","A similarity, i.e., an uniform scaling, followed by a rotation, followed by a translation.",null,null],[12,"isometry","","The part of this similarity that does not include the scaling factor.",212,null],[3,"Transform","","A transformation matrix in homogeneous coordinates.",null,null],[3,"Reflection","","A reflection wrt. a plane.",null,null],[3,"Orthographic3","","A 3D orthographic projection stored as an homogeneous 4x4 matrix.",null,null],[3,"Perspective3","","A 3D perspective projection stored as an homogeneous 4x4 matrix.",null,null],[4,"TGeneral","","Tag representing the most general (not necessarily inversible) `Transform` type.",null,null],[4,"TProjective","","Tag representing the most general inversible `Transform` type.",null,null],[4,"TAffine","","Tag representing an affine `Transform`. Its bottom-row is equal to `(0, 0 ... 0, 1)`.",null,null],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",208,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","Clones this point into one that owns its data.",208,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"to_homogeneous","","Converts this point into a vector in homogeneous coordinates, i.e., appends a `1` at the end of it.",208,{"inputs":[{"name":"self"}],"output":{"generics":["dimnamesum"],"name":"vectorn"}}],[11,"from_coordinates","","Creates a new point with the given coordinates.",208,{"inputs":[{"name":"vectorn"}],"output":{"name":"point"}}],[11,"len","","The dimension of this point.",208,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"stride","","The stride of this point. This is the number of buffer element separating each component of this point.",208,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Iterates through this point coordinates.",208,{"inputs":[{"name":"self"}],"output":{"generics":["u1"],"name":"matrixiter"}}],[11,"get_unchecked","","Gets a reference to i-th element of this point without bound-checking.",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"iter_mut","","Mutably iterates through this point coordinates.",208,{"inputs":[{"name":"self"}],"output":{"generics":["u1"],"name":"matrixitermut"}}],[11,"get_unchecked_mut","","Gets a mutable reference to i-th element of this point without bound-checking.",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"swap_unchecked","","Swaps two entries without bound-checking.",208,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"default_epsilon","","",208,null],[11,"default_max_relative","","",208,null],[11,"default_max_ulps","","",208,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",208,null],[11,"ulps_eq","","",208,null],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_uninitialized","","Creates a new point with uninitialized coordinates.",208,{"inputs":[],"output":{"name":"self"}}],[11,"origin","","Creates a new point with all coordinates equal to zero.",208,{"inputs":[],"output":{"name":"self"}}],[11,"from_homogeneous","","Creates a new point from its homogeneous vector representation.",208,{"inputs":[{"generics":["dimnamesum"],"name":"vectorn"}],"output":{"name":"option"}}],[11,"max_value","","",208,{"inputs":[],"output":{"name":"self"}}],[11,"min_value","","",208,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",208,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",208,{"inputs":[{"name":"n"}],"output":{"generics":["u1"],"name":"point"}}],[11,"new","","Initializes this matrix from its components.",208,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"generics":["u2"],"name":"point"}}],[11,"new","","Initializes this matrix from its components.",208,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"generics":["u3"],"name":"point"}}],[11,"new","","Initializes this matrix from its components.",208,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"generics":["u4"],"name":"point"}}],[11,"new","","Initializes this matrix from its components.",208,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"generics":["u5"],"name":"point"}}],[11,"new","","Initializes this matrix from its components.",208,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"generics":["u6"],"name":"point"}}],[11,"index","","",208,null],[11,"index_mut","","",208,null],[11,"neg","","",208,null],[11,"sub","","",208,null],[11,"sub","","",208,null],[11,"sub","","",208,null],[11,"sub","","",208,null],[11,"add","","",208,null],[11,"add","","",208,null],[11,"add_assign","","",208,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"add_assign","","",208,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"sub_assign","","",208,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"sub_assign","","",208,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"mul","nalgebra::core","",1,null],[11,"mul","","",1,null],[11,"mul","nalgebra::geometry","",208,null],[11,"mul_assign","","",208,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",208,null],[11,"div_assign","","",208,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"origin","","",208,{"inputs":[],"output":{"name":"self"}}],[11,"coordinates","","",208,null],[11,"from_coordinates","","",208,null],[11,"scale_by","","",208,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"meet","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"join","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"meet_join","","",208,null],[11,"to_superset","","",208,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"is_in_subset","","",208,{"inputs":[{"name":"point"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",208,{"inputs":[{"name":"point"}],"output":{"name":"self"}}],[11,"to_superset","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["dimnamesum"],"name":"vectorn"}}],[11,"is_in_subset","","",208,{"inputs":[{"name":"vectorn"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",208,{"inputs":[{"name":"vectorn"}],"output":{"name":"self"}}],[11,"deref","","",208,null],[11,"deref_mut","","",208,null],[11,"deref","","",208,null],[11,"deref_mut","","",208,null],[11,"deref","","",208,null],[11,"deref_mut","","",208,null],[11,"deref","","",208,null],[11,"deref_mut","","",208,null],[11,"deref","","",208,null],[11,"deref_mut","","",208,null],[11,"deref","","",208,null],[11,"deref_mut","","",208,null],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",213,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"matrix","","A reference to the underlying matrix representation of this rotation.",213,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"matrix_mut","","A mutable reference to the underlying matrix representation of this rotation.",213,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"unwrap","","Unwraps the underlying matrix.",213,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"to_homogeneous","","Converts this rotation into its equivalent homogeneous transformation matrix.",213,{"inputs":[{"name":"self"}],"output":{"generics":["dimnamesum"],"name":"matrixn"}}],[11,"from_matrix_unchecked","","Creates a new rotation from the given square matrix.",213,{"inputs":[{"name":"matrixn"}],"output":{"name":"rotation"}}],[11,"transpose","","Transposes `self`.",213,{"inputs":[{"name":"self"}],"output":{"name":"rotation"}}],[11,"inverse","","Inverts `self`.",213,{"inputs":[{"name":"self"}],"output":{"name":"rotation"}}],[11,"transpose_mut","","Transposes `self` in-place.",213,{"inputs":[{"name":"self"}],"output":null}],[11,"inverse_mut","","Inverts `self` in-place.",213,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",213,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",213,null],[11,"default_max_relative","","",213,null],[11,"default_max_ulps","","",213,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",213,null],[11,"ulps_eq","","",213,null],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new square identity rotation of the given `dimension`.",213,{"inputs":[],"output":{"name":"rotation"}}],[11,"one","","",213,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",213,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"div","","",213,null],[11,"div","","",213,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"mul","nalgebra::core","",1,null],[11,"mul","","",1,null],[11,"div","","",1,null],[11,"div","","",1,null],[11,"mul","nalgebra::geometry","",213,null],[11,"mul","","",213,null],[11,"mul_assign","","",213,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"mul_assign","","",213,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",213,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",213,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"mul_assign","nalgebra::geometry::rotation_ops","",214,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"mul_assign","","",214,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",214,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",214,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"identity","nalgebra::geometry","",213,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",213,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",213,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",213,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",213,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"transform_vector","","",213,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"inverse_transform_point","","",213,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"inverse_transform_vector","","",213,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"decompose","","",213,null],[11,"append_translation","","",213,null],[11,"prepend_translation","","",213,null],[11,"append_rotation","","",213,null],[11,"prepend_rotation","","",213,null],[11,"append_scaling","","",213,null],[11,"prepend_scaling","","",213,null],[11,"translation","","",213,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"rotation","","",213,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scaling","","",213,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"powf","","",213,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"rotation_between","","",213,{"inputs":[{"name":"vectorn"},{"name":"vectorn"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","",213,{"inputs":[{"name":"vectorn"},{"name":"vectorn"},{"name":"n"}],"output":{"name":"option"}}],[11,"to_superset","","",213,{"inputs":[{"name":"self"}],"output":{"name":"rotation"}}],[11,"is_in_subset","","",213,{"inputs":[{"name":"rotation"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",213,{"inputs":[{"name":"rotation"}],"output":{"name":"self"}}],[11,"to_superset","","",213,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[11,"is_in_subset","","",213,{"inputs":[{"name":"isometry"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",213,{"inputs":[{"name":"isometry"}],"output":{"name":"self"}}],[11,"to_superset","","",213,{"inputs":[{"name":"self"}],"output":{"name":"similarity"}}],[11,"is_in_subset","","",213,{"inputs":[{"name":"similarity"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",213,{"inputs":[{"name":"similarity"}],"output":{"name":"self"}}],[11,"to_superset","","",213,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"is_in_subset","","",213,{"inputs":[{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",213,{"inputs":[{"name":"transform"}],"output":{"name":"self"}}],[11,"to_superset","","",213,{"inputs":[{"name":"self"}],"output":{"generics":["dimnamesum"],"name":"matrixn"}}],[11,"is_in_subset","","",213,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",213,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",209,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_owned","","Moves this unit quaternion into one that owns its data.",209,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"clone_owned","","Clones this unit quaternion into one that owns its data.",209,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"normalize","","Normalizes this quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"conjugate","","Compute the conjugate of this quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"try_inverse","","Inverts this quaternion if it is not zero.",209,{"inputs":[{"name":"self"}],"output":{"generics":["quaternion"],"name":"option"}}],[11,"lerp","","Linear interpolation between two quaternion.",209,{"inputs":[{"name":"self"},{"name":"quaternion"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"vector","","The vector part `(i, j, k)` of this quaternion.",209,{"inputs":[{"name":"self"}],"output":{"generics":["u3","u1","rstride","cstride"],"name":"matrixslice"}}],[11,"scalar","","The scalar part `w` of this quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"as_vector","","Reinterprets this quaternion as a 4D vector.",209,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"norm","","The norm of this quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"norm_squared","","The squared norm of this quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"polar_decomposition","","The polar decomposition of this quaternion.",209,null],[11,"exp","","Compute the exponential of a quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"ln","","Compute the natural logarithm of a quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"powf","","Raise the quaternion to a given floating power.",209,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"as_vector_mut","","Transforms this quaternion into its 4D vector form (Vector part, Scalar part).",209,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"vector_mut","","The mutable vector part `(i, j, k)` of this quaternion.",209,{"inputs":[{"name":"self"}],"output":{"generics":["u3","u1","rstride","cstride"],"name":"matrixslicemut"}}],[11,"conjugate_mut","","Replaces this quaternion by its conjugate.",209,{"inputs":[{"name":"self"}],"output":null}],[11,"try_inverse_mut","","Inverts this quaternion in-place if it is not zero.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"normalize_mut","","Normalizes this quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"default_epsilon","","",209,null],[11,"default_max_relative","","",209,null],[11,"default_max_ulps","","",209,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",209,null],[11,"ulps_eq","","",209,null],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_vector","","Creates a quaternion from a 4D vector. The quaternion scalar part corresponds to the `w` vector component.",209,{"inputs":[{"name":"vector4"}],"output":{"name":"self"}}],[11,"new","","Creates a new quaternion from its individual components. Note that the arguments order does not follow the storage order.",209,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_parts","","Creates a new quaternion from its scalar and vector parts. Note that the arguments order does not follow the storage order.",209,{"inputs":[{"name":"n"},{"generics":["u3"],"name":"vector"}],"output":{"name":"self"}}],[11,"from_polar_decomposition","","Creates a new quaternion from its polar decomposition.",209,{"inputs":[{"name":"n"},{"name":"n"},{"generics":["vector"],"name":"unit"}],"output":{"name":"self"}}],[11,"identity","","The quaternion multiplicative identity.",209,{"inputs":[],"output":{"name":"self"}}],[11,"one","","",209,{"inputs":[],"output":{"name":"self"}}],[11,"zero","","",209,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"rand","","",209,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"index","","",209,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",209,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"add","","",209,null],[11,"add","","",209,null],[11,"sub","","",209,null],[11,"sub","","",209,null],[11,"mul","","",209,null],[11,"mul","","",209,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"div","","",213,null],[11,"div","","",213,null],[11,"mul","","",209,null],[11,"mul_assign","","",209,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",209,null],[11,"div_assign","","",209,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"neg","","",209,null],[11,"add_assign","","",209,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"add_assign","","",209,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"sub_assign","","",209,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"sub_assign","","",209,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"mul_assign","","",209,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"mul_assign","","",209,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"identity","","",209,{"inputs":[],"output":{"name":"self"}}],[11,"identity","","",209,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",209,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"operate","","",209,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","",209,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"multiply_by","","",209,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"dimension","","",209,{"inputs":[],"output":{"name":"usize"}}],[11,"canonical_basis_element","","",209,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"dot","","",209,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"component_unchecked","","",209,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"component_unchecked_mut","","",209,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"norm_squared","","",209,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"norm","","",209,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",209,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"normalize_mut","","",209,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",209,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",209,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"to_superset","","",209,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"is_in_subset","","",209,{"inputs":[{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",209,{"inputs":[{"name":"quaternion"}],"output":{"name":"self"}}],[11,"deref","","",209,null],[11,"deref_mut","","",209,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"div","","",213,null],[11,"div","","",213,null],[11,"mul_assign","","",213,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"mul_assign","","",213,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"div_assign","","",213,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"div_assign","","",213,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",210,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_vector","","Creates a new translation from the given vector.",210,{"inputs":[{"name":"vectorn"}],"output":{"name":"translation"}}],[11,"inverse","","Inverts `self`.",210,{"inputs":[{"name":"self"}],"output":{"name":"translation"}}],[11,"to_homogeneous","","Converts this translation into its equivalent homogeneous transformation matrix.",210,{"inputs":[{"name":"self"}],"output":{"generics":["dimnamesum"],"name":"matrixn"}}],[11,"inverse_mut","","Inverts `self` in-place.",210,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"translation"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",210,null],[11,"default_max_relative","","",210,null],[11,"default_max_ulps","","",210,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",210,null],[11,"ulps_eq","","",210,null],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new square identity rotation of the given `dimension`.",210,{"inputs":[],"output":{"name":"translation"}}],[11,"one","","",210,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",210,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",210,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",210,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",210,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",210,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",210,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",210,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"mul","","",210,null],[11,"mul","","",210,null],[11,"div","","",210,null],[11,"div","","",210,null],[11,"mul","","",210,null],[11,"mul","","",210,null],[11,"mul_assign","","",210,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"mul_assign","","",210,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"div_assign","","",210,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"div_assign","","",210,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"identity","","",210,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",210,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",210,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",210,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",210,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"transform_vector","","",210,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"inverse_transform_point","","",210,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"inverse_transform_vector","","",210,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"decompose","","",210,null],[11,"append_translation","","",210,null],[11,"prepend_translation","","",210,null],[11,"append_rotation","","",210,null],[11,"prepend_rotation","","",210,null],[11,"append_scaling","","",210,null],[11,"prepend_scaling","","",210,null],[11,"translation","","",210,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"rotation","","",210,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"scaling","","",210,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"to_vector","","",210,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"from_vector","","",210,{"inputs":[{"name":"vectorn"}],"output":{"name":"option"}}],[11,"powf","","",210,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"translation_between","","",210,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"option"}}],[11,"to_superset","","",210,{"inputs":[{"name":"self"}],"output":{"name":"translation"}}],[11,"is_in_subset","","",210,{"inputs":[{"name":"translation"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",210,{"inputs":[{"name":"translation"}],"output":{"name":"self"}}],[11,"to_superset","","",210,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[11,"is_in_subset","","",210,{"inputs":[{"name":"isometry"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",210,{"inputs":[{"name":"isometry"}],"output":{"name":"self"}}],[11,"to_superset","","",210,{"inputs":[{"name":"self"}],"output":{"name":"similarity"}}],[11,"is_in_subset","","",210,{"inputs":[{"name":"similarity"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",210,{"inputs":[{"name":"similarity"}],"output":{"name":"self"}}],[11,"to_superset","","",210,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"is_in_subset","","",210,{"inputs":[{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",210,{"inputs":[{"name":"transform"}],"output":{"name":"self"}}],[11,"to_superset","","",210,{"inputs":[{"name":"self"}],"output":{"generics":["dimnamesum"],"name":"matrixn"}}],[11,"is_in_subset","","",210,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",210,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",211,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_parts","","Creates a new isometry from its rotational and translational parts.",211,{"inputs":[{"name":"translation"},{"name":"r"}],"output":{"name":"isometry"}}],[11,"inverse","","Inverts `self`.",211,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[11,"inverse_mut","","Inverts `self`.",211,{"inputs":[{"name":"self"}],"output":null}],[11,"append_translation_mut","","Appends to `self` the given translation in-place.",211,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"append_rotation_mut","","Appends to `self` the given rotation in-place.",211,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"append_rotation_wrt_point_mut","","Appends in-place to `self` a rotation centered at the point `p`, i.e., the rotation that lets `p` invariant.",211,{"inputs":[{"name":"self"},{"name":"r"},{"name":"point"}],"output":null}],[11,"append_rotation_wrt_center_mut","","Appends in-place to `self` a rotation centered at the point with coordinates `self.translation`.",211,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"to_homogeneous","","Converts this isometry into its equivalent homogeneous transformation matrix.",211,{"inputs":[{"name":"self"}],"output":{"generics":["dimnamesum"],"name":"matrixn"}}],[11,"eq","","",211,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",211,null],[11,"default_max_relative","","",211,null],[11,"default_max_ulps","","",211,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",211,null],[11,"ulps_eq","","",211,null],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new identity isometry.",211,{"inputs":[],"output":{"name":"self"}}],[11,"rotation_wrt_point","","The isometry that applies the rotation `r` with its axis passing through the point `p`. This effectively lets `p` invariant.",211,{"inputs":[{"name":"r"},{"name":"point"}],"output":{"name":"self"}}],[11,"one","","Creates a new identity isometry.",211,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",211,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"new","","Creates a new isometry from a translation and a rotation angle.",211,{"inputs":[{"name":"vector2"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new isometry from a translation and a rotation angle.",211,{"inputs":[{"name":"vector2"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new isometry from a translation and a rotation axis-angle.",211,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the point `eye` and looking toward `target`.",211,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",211,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",211,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"new","","Creates a new isometry from a translation and a rotation axis-angle.",211,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the point `eye` and looking toward `target`.",211,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",211,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",211,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"div","","",211,null],[11,"div","","",211,null],[11,"mul_assign","","",211,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"mul_assign","","",211,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"mul_assign","","",211,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"mul_assign","","",211,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"div_assign","","",211,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"div_assign","","",211,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"mul_assign","","",211,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"mul_assign","","",211,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"div_assign","","",211,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"div_assign","","",211,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"div","","",211,null],[11,"div","","",211,null],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"mul","","",210,null],[11,"mul","","",210,null],[11,"mul","","",210,null],[11,"mul","","",210,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"div","","",213,null],[11,"div","","",213,null],[11,"identity","","",211,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",211,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",211,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",211,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",211,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"transform_vector","","",211,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"inverse_transform_point","","",211,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"inverse_transform_vector","","",211,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"decompose","","",211,null],[11,"append_translation","","",211,null],[11,"prepend_translation","","",211,null],[11,"append_rotation","","",211,null],[11,"prepend_rotation","","",211,null],[11,"append_scaling","","",211,null],[11,"prepend_scaling","","",211,null],[11,"append_rotation_wrt_point","","",211,null],[11,"translation","","",211,{"inputs":[{"name":"self"}],"output":{"name":"translation"}}],[11,"rotation","","",211,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"scaling","","",211,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"to_superset","","",211,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[11,"is_in_subset","","",211,{"inputs":[{"name":"isometry"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",211,{"inputs":[{"name":"isometry"}],"output":{"name":"self"}}],[11,"to_superset","","",211,{"inputs":[{"name":"self"}],"output":{"name":"similarity"}}],[11,"is_in_subset","","",211,{"inputs":[{"name":"similarity"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",211,{"inputs":[{"name":"similarity"}],"output":{"name":"self"}}],[11,"to_superset","","",211,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"is_in_subset","","",211,{"inputs":[{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",211,{"inputs":[{"name":"transform"}],"output":{"name":"self"}}],[11,"to_superset","","",211,{"inputs":[{"name":"self"}],"output":{"generics":["dimnamesum"],"name":"matrixn"}}],[11,"is_in_subset","","",211,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",211,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",212,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_parts","","Creates a new similarity from its rotational and translational parts.",212,{"inputs":[{"name":"translation"},{"name":"r"},{"name":"n"}],"output":{"name":"similarity"}}],[11,"from_isometry","","Creates a new similarity from its rotational and translational parts.",212,{"inputs":[{"name":"isometry"},{"name":"n"}],"output":{"name":"similarity"}}],[11,"from_scaling","","Creates a new similarity that applies only a scaling factor.",212,{"inputs":[{"name":"n"}],"output":{"name":"similarity"}}],[11,"inverse","","Inverts `self`.",212,{"inputs":[{"name":"self"}],"output":{"name":"similarity"}}],[11,"inverse_mut","","Inverts `self` in-place.",212,{"inputs":[{"name":"self"}],"output":null}],[11,"set_scaling","","The scaling factor of this similarity transformation.",212,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"scaling","","The scaling factor of this similarity transformation.",212,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"prepend_scaling","","The similarity transformation that applies a scaling factor `scaling` before `self`.",212,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"append_scaling","","The similarity transformation that applies a scaling factor `scaling` after `self`.",212,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"prepend_scaling_mut","","Sets `self` to the similarity transformation that applies a scaling factor `scaling` before `self`.",212,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"append_scaling_mut","","Sets `self` to the similarity transformation that applies a scaling factor `scaling` after `self`.",212,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"append_translation_mut","","Appends to `self` the given translation in-place.",212,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"append_rotation_mut","","Appends to `self` the given rotation in-place.",212,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"append_rotation_wrt_point_mut","","Appends in-place to `self` a rotation centered at the point `p`, i.e., the rotation that lets `p` invariant.",212,{"inputs":[{"name":"self"},{"name":"r"},{"name":"point"}],"output":null}],[11,"append_rotation_wrt_center_mut","","Appends in-place to `self` a rotation centered at the point with coordinates `self.translation`.",212,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"to_homogeneous","","Converts this similarity into its equivalent homogeneous transformation matrix.",212,{"inputs":[{"name":"self"}],"output":{"generics":["dimnamesum"],"name":"matrixn"}}],[11,"eq","","",212,{"inputs":[{"name":"self"},{"name":"similarity"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",212,null],[11,"default_max_relative","","",212,null],[11,"default_max_ulps","","",212,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",212,null],[11,"ulps_eq","","",212,null],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new identity similarity.",212,{"inputs":[],"output":{"name":"self"}}],[11,"one","","Creates a new identity similarity.",212,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",212,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"rotation_wrt_point","","The similarity that applies tha scaling factor `scaling`, followed by the rotation `r` with its axis passing through the point `p`.",212,{"inputs":[{"name":"r"},{"name":"point"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new similarity from a translation and a rotation angle.",212,{"inputs":[{"name":"vector2"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new similarity from a translation and a rotation angle.",212,{"inputs":[{"name":"vector2"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new similarity from a translation, rotation axis-angle, and scaling factor.",212,{"inputs":[{"name":"vector3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an similarity that corresponds to the a scaling factor and a local frame of an observer standing at the point `eye` and looking toward `target`.",212,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix including scaling factor.",212,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix including a scaling factor.",212,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new similarity from a translation, rotation axis-angle, and scaling factor.",212,{"inputs":[{"name":"vector3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an similarity that corresponds to the a scaling factor and a local frame of an observer standing at the point `eye` and looking toward `target`.",212,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix including scaling factor.",212,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix including a scaling factor.",212,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"self"}}],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"div","","",212,null],[11,"div","","",212,null],[11,"mul_assign","","",212,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"mul_assign","","",212,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"mul_assign","","",212,{"inputs":[{"name":"self"},{"name":"similarity"}],"output":null}],[11,"mul_assign","","",212,{"inputs":[{"name":"self"},{"name":"similarity"}],"output":null}],[11,"div_assign","","",212,{"inputs":[{"name":"self"},{"name":"similarity"}],"output":null}],[11,"div_assign","","",212,{"inputs":[{"name":"self"},{"name":"similarity"}],"output":null}],[11,"mul_assign","","",212,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"mul_assign","","",212,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"div_assign","","",212,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"div_assign","","",212,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"mul_assign","","",212,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"mul_assign","","",212,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"div_assign","","",212,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"div_assign","","",212,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"div","","",212,null],[11,"div","","",212,null],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"div","","",212,null],[11,"div","","",212,null],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"div","","",211,null],[11,"div","","",211,null],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"mul","","",210,null],[11,"mul","","",210,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"div","","",213,null],[11,"div","","",213,null],[11,"identity","","",212,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",212,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",212,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",212,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",212,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"transform_vector","","",212,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"inverse_transform_point","","",212,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"inverse_transform_vector","","",212,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"decompose","","",212,null],[11,"append_translation","","",212,null],[11,"prepend_translation","","",212,null],[11,"append_rotation","","",212,null],[11,"prepend_rotation","","",212,null],[11,"append_scaling","","",212,null],[11,"prepend_scaling","","",212,null],[11,"append_rotation_wrt_point","","",212,null],[11,"translation","","",212,{"inputs":[{"name":"self"}],"output":{"name":"translation"}}],[11,"rotation","","",212,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"scaling","","",212,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"to_superset","","",212,{"inputs":[{"name":"self"}],"output":{"name":"similarity"}}],[11,"is_in_subset","","",212,{"inputs":[{"name":"similarity"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",212,{"inputs":[{"name":"similarity"}],"output":{"name":"self"}}],[11,"to_superset","","",212,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"is_in_subset","","",212,{"inputs":[{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",212,{"inputs":[{"name":"transform"}],"output":{"name":"self"}}],[11,"to_superset","","",212,{"inputs":[{"name":"self"}],"output":{"generics":["dimnamesum"],"name":"matrixn"}}],[11,"is_in_subset","","",212,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",212,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"tgeneral"}}],[11,"hash","","",215,null],[11,"eq","","",215,{"inputs":[{"name":"self"},{"name":"tgeneral"}],"output":{"name":"bool"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"tprojective"}}],[11,"hash","","",216,null],[11,"eq","","",216,{"inputs":[{"name":"self"},{"name":"tprojective"}],"output":{"name":"bool"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"taffine"}}],[11,"hash","","",217,null],[11,"eq","","",217,{"inputs":[{"name":"self"},{"name":"taffine"}],"output":{"name":"bool"}}],[11,"check_homogeneous_invariants","","",215,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[11,"check_homogeneous_invariants","","",216,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[11,"has_normalizer","","",217,{"inputs":[],"output":{"name":"bool"}}],[11,"check_homogeneous_invariants","","",217,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",218,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"from_matrix_unchecked","","Creates a new transformation from the given homogeneous matrix. The transformation category of `Self` is not checked to be verified by the given matrix.",218,{"inputs":[{"generics":["dimnamesum"],"name":"matrixn"}],"output":{"name":"self"}}],[11,"unwrap","","The underlying matrix.",218,{"inputs":[{"name":"self"}],"output":{"generics":["dimnamesum"],"name":"matrixn"}}],[11,"matrix","","A reference to the underlynig matrix.",218,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"matrix_mut_unchecked","","A mutable reference to the underlying matrix.",218,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"set_category","","Sets the category of this transform.",218,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"clone_owned","","Clones this transform into one that owns its data.",218,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"to_homogeneous","","Converts this transform into its equivalent homogeneous transformation matrix.",218,{"inputs":[{"name":"self"}],"output":{"generics":["dimnamesum"],"name":"matrixn"}}],[11,"try_inverse","","Attempts to invert this transformation. You may use `.inverse` instead of this transformation has a subcategory of `TProjective`.",218,{"inputs":[{"name":"self"}],"output":{"generics":["transform"],"name":"option"}}],[11,"inverse","","Inverts this transformation. Use `.try_inverse` if this transform has the `TGeneral` category (it may not be invertible).",218,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"try_inverse_mut","","Attempts to invert this transformation in-place. You may use `.inverse_mut` instead of this transformation has a subcategory of `TProjective`.",218,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inverse_mut","","Inverts this transformation in-place. Use `.try_inverse_mut` if this transform has the `TGeneral` category (it may not be invertible).",218,{"inputs":[{"name":"self"}],"output":null}],[11,"matrix_mut","","A mutable reference to underlying matrix. Use `.matrix_mut_unchecked` instead if this transformation category is not `TGeneral`.",218,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"identity","","Creates a new identity transform.",218,{"inputs":[],"output":{"name":"self"}}],[11,"one","","Creates a new identity transform.",218,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",218,null],[11,"index_mut","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",210,null],[11,"mul","","",210,null],[11,"div","","",218,null],[11,"div","","",218,null],[11,"div","","",218,null],[11,"div","","",218,null],[11,"div","","",213,null],[11,"div","","",213,null],[11,"div","","",218,null],[11,"div","","",218,null],[11,"div","","",218,null],[11,"div","","",218,null],[11,"div","","",210,null],[11,"div","","",210,null],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"transform"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"transform"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"similarity"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"similarity"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"div_assign","","",218,{"inputs":[{"name":"self"},{"name":"transform"}],"output":null}],[11,"div_assign","","",218,{"inputs":[{"name":"self"},{"name":"transform"}],"output":null}],[11,"div_assign","","",218,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"div_assign","","",218,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"div_assign","","",218,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",218,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",218,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"div_assign","","",218,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"identity","","",218,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",218,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",218,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",218,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",218,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"transform_vector","","",218,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"inverse_transform_point","","",218,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"inverse_transform_vector","","",218,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"to_superset","","",218,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"is_in_subset","","",218,{"inputs":[{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",218,{"inputs":[{"name":"transform"}],"output":{"name":"self"}}],[11,"to_superset","","",218,{"inputs":[{"name":"self"}],"output":{"generics":["dimnamesum"],"name":"matrixn"}}],[11,"is_in_subset","","",218,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",218,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"new","","Creates a new reflection wrt the plane orthogonal to the given axis and bias.",219,{"inputs":[{"generics":["vector"],"name":"unit"},{"name":"n"}],"output":{"name":"reflection"}}],[11,"new_containing_point","","Creates a new reflection wrt. the plane orthogonal to the given axis and that contains the point `pt`.",219,{"inputs":[{"generics":["vector"],"name":"unit"},{"name":"point"}],"output":{"name":"reflection"}}],[11,"axis","","The reflexion axis.",219,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"reflect","","Applies the reflection to the columns of `rhs`.",219,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"reflect_rows","","Applies the reflection to the rows of `rhs`.",219,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"vector"}],"output":null}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",220,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new orthographic projection matrix.",220,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_matrix_unchecked","","Wraps the given matrix to interpret it as a 3D orthographic matrix.",220,{"inputs":[{"name":"matrix4"}],"output":{"name":"self"}}],[11,"from_fov","","Creates a new orthographic projection matrix from an aspect ratio and the vertical field of view.",220,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"inverse","","Retrieves the inverse of the underlying homogeneous matrix.",220,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"to_homogeneous","","Computes the corresponding homogeneous matrix.",220,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"as_matrix","","A reference to the underlying homogeneous transformation matrix.",220,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"unwrap","","Retrieves the underlying homogeneous matrix.",220,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"left","","The smallest x-coordinate of the view cuboid.",220,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"right","","The largest x-coordinate of the view cuboid.",220,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"bottom","","The smallest y-coordinate of the view cuboid.",220,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"top","","The largest y-coordinate of the view cuboid.",220,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",220,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",220,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"project_point","","Projects a point. Faster than matrix multiplication.",220,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"unproject_point","","Un-projects a point. Faster than multiplication by the underlying matrix inverse.",220,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"project_vector","","Projects a vector. Faster than matrix multiplication.",220,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"vector3"}}],[11,"set_left","","Sets the smallest x-coordinate of the view cuboid.",220,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_right","","Sets the largest x-coordinate of the view cuboid.",220,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_bottom","","Sets the smallest y-coordinate of the view cuboid.",220,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_top","","Sets the largest y-coordinate of the view cuboid.",220,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view cuboid.",220,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",220,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_left_and_right","","Sets the view cuboid coordinates along the `x` axis.",220,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"set_bottom_and_top","","Sets the view cuboid coordinates along the `y` axis.",220,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",220,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"rand","","",220,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",221,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new perspective matrix from the aspect ratio, y field of view, and near/far planes.",221,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_matrix_unchecked","","Wraps the given matrix to interpret it as a 3D perspective matrix.",221,{"inputs":[{"name":"matrix4"}],"output":{"name":"self"}}],[11,"inverse","","Retrieves the inverse of the underlying homogeneous matrix.",221,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"to_homogeneous","","Computes the corresponding homogeneous matrix.",221,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"as_matrix","","A reference to the underlying homogeneous transformation matrix.",221,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"unwrap","","Retrieves the underlying homogeneous matrix.",221,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",221,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"fovy","","Gets the y field of view of the view frustrum.",221,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",221,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",221,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"project_point","","Projects a point. Faster than matrix multiplication.",221,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"unproject_point","","Un-projects a point. Faster than multiplication by the matrix inverse.",221,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"project_vector","","Projects a vector. Faster than matrix multiplication.",221,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"vector3"}}],[11,"set_aspect","","Updates this perspective matrix with a new `width / height` aspect ratio of the view frustrum.",221,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_fovy","","Updates this perspective with a new y field of view of the view frustrum.",221,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear","","Updates this perspective matrix with a new near plane offset of the view frustrum.",221,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_zfar","","Updates this perspective matrix with a new far plane offset of the view frustrum.",221,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Updates this perspective matrix with new near and far plane offsets of the view frustrum.",221,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"rand","","",221,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[6,"Point1","","A statically sized 1-dimensional column point.",null,null],[6,"Point2","","A statically sized 2-dimensional column point.",null,null],[6,"Point3","","A statically sized 3-dimensional column point.",null,null],[6,"Point4","","A statically sized 4-dimensional column point.",null,null],[6,"Point5","","A statically sized 5-dimensional column point.",null,null],[6,"Point6","","A statically sized 6-dimensional column point.",null,null],[6,"Rotation2","","A 2-dimensional rotation matrix.",null,null],[6,"Rotation3","","A 3-dimensional rotation matrix.",null,null],[6,"UnitQuaternion","","A unit quaternions. May be used to represent a rotation.",null,null],[6,"UnitComplex","","A complex number with a norm equal to 1.",null,null],[6,"Translation2","","A 2-dimensional translation.",null,null],[6,"Translation3","","A 3-dimensional translation.",null,null],[6,"Isometry2","","A 2-dimensional isometry using a unit complex number for its rotational part.",null,null],[6,"Isometry3","","A 3-dimensional isometry using a unit quaternion for its rotational part.",null,null],[6,"IsometryMatrix2","","A 2-dimensional isometry using a rotation matrix for its rotational part.",null,null],[6,"IsometryMatrix3","","A 3-dimensional isometry using a rotation matrix for its rotational part.",null,null],[6,"Similarity2","","A 2-dimensional similarity.",null,null],[6,"Similarity3","","A 3-dimensional similarity.",null,null],[6,"SimilarityMatrix2","","A 2-dimensional similarity using a rotation matrix for its rotation part.",null,null],[6,"SimilarityMatrix3","","A 3-dimensional similarity using a rotation matrix for its rotation part.",null,null],[6,"Transform2","","A 2D general transformation that may not be inversible. Stored as an homogeneous 3x3 matrix.",null,null],[6,"Projective2","","An inversible 2D general transformation. Stored as an homogeneous 3x3 matrix.",null,null],[6,"Affine2","","A 2D affine transformation. Stored as an homogeneous 3x3 matrix.",null,null],[6,"Transform3","","A 3D general transformation that may not be inversible. Stored as an homogeneous 4x4 matrix.",null,null],[6,"Projective3","","An inversible 3D general transformation. Stored as an homogeneous 4x4 matrix.",null,null],[6,"Affine3","","A 3D affine transformation. Stored as an homogeneous 4x4 matrix.",null,null],[8,"TCategory","","Trait implemented by phantom types identifying the projective transformation type.",null,null],[11,"has_normalizer","","Indicates whether a `Transform` with the category `Self` has a bottom-row different from `0 0 .. 1`.",222,{"inputs":[],"output":{"name":"bool"}}],[10,"check_homogeneous_invariants","","Checks that the given matrix is a valid homogeneous representation of an element of the category `Self`.",222,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[8,"TCategoryMul","","Traits that gives the `Transform` category that is compatible with the result of the multiplication of transformations with categories `Self` and `Other`.",null,null],[16,"Representative","","The transform category that results from the multiplication of a `Transform<Self>` to a `Transform<Other>`. This is usually equal to `Self` or `Other`, whichever is the most general category.",223,null],[8,"SuperTCategoryOf","","Indicates that `Self` is a more general `Transform` category than `Other`.",null,null],[8,"SubTCategoryOf","","Indicates that `Self` is a more specific `Transform` category than `Other`.",null,null],[11,"powf","nalgebra","",224,null],[11,"rotation_between","","",224,null],[11,"scaled_rotation_between","","",224,null],[11,"div_assign","","",224,null],[11,"default_epsilon","","",224,null],[11,"default_max_relative","","",224,null],[11,"default_max_ulps","","",224,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",224,null],[11,"ulps_eq","","",224,null],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"inverse","","",224,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"inverse_mut","","",224,null],[11,"to_superset","","",224,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_in_subset","","",224,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",224,{"inputs":[{"name":"t"}],"output":{"name":"id"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"join","","",224,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"to_vector","","",224,null],[11,"from_vector","","",224,null],[11,"partial_cmp","","",224,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"zero","","",224,{"inputs":[],"output":{"generics":["multiplicative"],"name":"id"}}],[11,"is_zero","","",224,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mul_assign","","",224,null],[11,"mul","","",224,{"inputs":[{"name":"self"},{"generics":["multiplicative"],"name":"id"}],"output":{"generics":["multiplicative"],"name":"id"}}],[11,"operate","","",224,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"one","","",224,{"inputs":[],"output":{"generics":["multiplicative"],"name":"id"}}],[11,"div","","",224,{"inputs":[{"name":"self"},{"generics":["multiplicative"],"name":"id"}],"output":{"generics":["multiplicative"],"name":"id"}}],[11,"add","","",224,{"inputs":[{"name":"self"},{"generics":["multiplicative"],"name":"id"}],"output":{"generics":["multiplicative"],"name":"id"}}],[11,"meet","","",224,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"eq","","",224,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"identity","","",224,{"inputs":[],"output":{"name":"id"}}],[11,"translation","","",224,null],[11,"rotation","","",224,null],[11,"scaling","","",224,null],[11,"decompose","","",224,null],[11,"append_translation","","",224,null],[11,"prepend_translation","","",224,null],[11,"append_rotation","","",224,null],[11,"prepend_rotation","","",224,null],[11,"append_scaling","","",224,null],[11,"prepend_scaling","","",224,null],[11,"add_assign","","",224,null],[11,"inverse_transform_point","","",224,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_transform_vector","","",224,null],[11,"transform_point","","",224,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"transform_vector","","",224,null],[11,"new","","Creates a new identity element.",224,{"inputs":[],"output":{"name":"id"}}],[11,"sum","nalgebra::core","",214,{"inputs":[{"name":"i"}],"output":{"name":"matrixmn"}}],[11,"sum","","",214,{"inputs":[{"name":"i"}],"output":{"name":"matrixmn"}}],[11,"product","","",225,{"inputs":[{"name":"i"}],"output":{"name":"matrixn"}}],[11,"product","","",225,{"inputs":[{"name":"i"}],"output":{"name":"matrixn"}}],[11,"iamax","","Computes the index of the vector component with the largest absolute value.",226,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"axpy","","Computes `self = a * x + b * self`.",226,{"inputs":[{"name":"self"},{"name":"n"},{"name":"vector"},{"name":"n"}],"output":null}],[11,"gemv","","Computes `self = alpha * a * x + beta * self`, where `a` is a matrix, `x` a vector, and `alpha, beta` two scalars.",226,{"inputs":[{"name":"self"},{"name":"n"},{"name":"matrix"},{"name":"vector"},{"name":"n"}],"output":null}],[11,"gemv_symm","","Computes `self = alpha * a * x + beta * self`, where `a` is a symmetric matrix, `x` a vector, and `alpha, beta` two scalars.",226,{"inputs":[{"name":"self"},{"name":"n"},{"name":"matrix"},{"name":"vector"},{"name":"n"}],"output":null}],[11,"is","","Tests if `Self` the the same as the type `T`",194,{"inputs":[],"output":{"name":"bool"}}],[11,"vget_unchecked","","Gets a reference to the i-th element of this column vector without bound checking.",226,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"vget_unchecked_mut","","Gets a mutable reference to the i-th element of this column vector without bound checking.",226,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"diagonal","","Creates a square matrix with its diagonal set to `diag` and all other entries set to 0.",199,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"trace","","Computes a trace of a square matrix, i.e., the sum of its diagonal elements.",199,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"to_homogeneous","","Computes the coordinates in projective space of this vector, i.e., appends a `0` to its coordinates.",226,{"inputs":[{"name":"self"}],"output":{"generics":["dimsum"],"name":"vectorn"}}],[11,"from_homogeneous","","Constructs a vector from coordinates in projective space, i.e., removes a `0` at the end of `self`. Returns `None` if this last component is not zero.",226,{"inputs":[{"generics":["dimsum"],"name":"vector"}],"output":{"generics":["vectorn"],"name":"option"}}],[11,"new_uninitialized_generic","","Creates a new uninitialized matrix. If the matrix has a compile-time dimension, this panics if `nrows != R::to_usize()` or `ncols != C::to_usize()`.",214,{"inputs":[{"name":"r"},{"name":"c"}],"output":{"name":"self"}}],[11,"from_element_generic","","Creates a matrix with all its elements set to `elem`.",214,{"inputs":[{"name":"r"},{"name":"c"},{"name":"n"}],"output":{"name":"self"}}],[11,"zeros_generic","","Creates a matrix with all its elements set to 0.",214,{"inputs":[{"name":"r"},{"name":"c"}],"output":{"name":"self"}}],[11,"from_iterator_generic","","Creates a matrix with all its elements filled by an iterator.",214,{"inputs":[{"name":"r"},{"name":"c"},{"name":"i"}],"output":{"name":"self"}}],[11,"from_row_slice_generic","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",214,null],[11,"from_column_slice_generic","","Creates a matrix with its elements filled with the components provided by a slice. The components must have the same layout as the matrix data storage (i.e. row-major or column-major).",214,null],[11,"from_fn_generic","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",214,{"inputs":[{"name":"r"},{"name":"c"},{"name":"f"}],"output":{"name":"self"}}],[11,"identity_generic","","Creates a new indentity matrix.",214,{"inputs":[{"name":"r"},{"name":"c"}],"output":{"name":"self"}}],[11,"from_diagonal_element_generic","","Creates a new matrix with its diagonal filled with copies of `elt`.",214,{"inputs":[{"name":"r"},{"name":"c"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_partial_diagonal_generic","","Creates a new matrix that may be rectangular. The first `elts.len()` diagonal elements are filled with the content of `elts`. Others are set to 0.",214,null],[11,"from_rows","","Builds a new matrix from its rows.",214,null],[11,"from_columns","","Builds a new matrix from its columns.",214,null],[11,"new_random_generic","","Creates a matrix filled with random values.",214,{"inputs":[{"name":"r"},{"name":"c"}],"output":{"name":"self"}}],[11,"from_diagonal","","Creates a square matrix with its diagonal set to `diag` and all other entries set to 0.",225,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"new_uninitialized","","Creates a new uninitialized matrix.",214,{"inputs":[],"output":{"name":"self"}}],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",214,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"zeros","","Creates a matrix with all its elements set to `0`.",214,{"inputs":[],"output":{"name":"self"}}],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",214,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",214,null],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",214,null],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",214,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",214,{"inputs":[],"output":{"name":"self"}}],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",214,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"from_partial_diagonal","","Creates a new matrix that may be rectangular. The first `elts.len()` diagonal elements are filled with the content of `elts`. Others are set to 0.",214,null],[11,"new_random","","Creates a matrix filled with random values.",214,{"inputs":[],"output":{"name":"self"}}],[11,"new_uninitialized","","Creates a new uninitialized matrix.",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",214,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"self"}}],[11,"zeros","","Creates a matrix with all its elements set to `0`.",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",214,{"inputs":[{"name":"usize"},{"name":"i"}],"output":{"name":"self"}}],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",214,null],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",214,null],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",214,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",214,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_partial_diagonal","","Creates a new matrix that may be rectangular. The first `elts.len()` diagonal elements are filled with the content of `elts`. Others are set to 0.",214,null],[11,"new_random","","Creates a matrix filled with random values.",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new_uninitialized","","Creates a new uninitialized matrix.",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",214,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"self"}}],[11,"zeros","","Creates a matrix with all its elements set to `0`.",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",214,{"inputs":[{"name":"usize"},{"name":"i"}],"output":{"name":"self"}}],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",214,null],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",214,null],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",214,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",214,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_partial_diagonal","","Creates a new matrix that may be rectangular. The first `elts.len()` diagonal elements are filled with the content of `elts`. Others are set to 0.",214,null],[11,"new_random","","Creates a matrix filled with random values.",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new_uninitialized","","Creates a new uninitialized matrix.",214,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",214,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"self"}}],[11,"zeros","","Creates a matrix with all its elements set to `0`.",214,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",214,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i"}],"output":{"name":"self"}}],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",214,null],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",214,null],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",214,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",214,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",214,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_partial_diagonal","","Creates a new matrix that may be rectangular. The first `elts.len()` diagonal elements are filled with the content of `elts`. Others are set to 0.",214,null],[11,"new_random","","Creates a matrix filled with random values.",214,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","",214,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",214,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",225,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","",214,{"inputs":[],"output":{"name":"self"}}],[11,"min_value","","",214,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",214,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"x","","The column vector with a 1 as its first component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"self"}}],[11,"y","","The column vector with a 1 as its second component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"self"}}],[11,"z","","The column vector with a 1 as its third component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"self"}}],[11,"w","","The column vector with a 1 as its fourth component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"self"}}],[11,"a","","The column vector with a 1 as its fifth component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"self"}}],[11,"b","","The column vector with a 1 as its sixth component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"self"}}],[11,"x_axis","","The unit column vector with a 1 as its first component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"unit"}}],[11,"y_axis","","The unit column vector with a 1 as its second component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"unit"}}],[11,"z_axis","","The unit column vector with a 1 as its third component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"unit"}}],[11,"w_axis","","The unit column vector with a 1 as its fourth component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"unit"}}],[11,"a_axis","","The unit column vector with a 1 as its fifth component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"unit"}}],[11,"b_axis","","The unit column vector with a 1 as its sixth component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"unit"}}],[11,"is_special_orthogonal","","Checks that this matrix is orthogonal and has a determinant equal to 1.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"is_invertible","","Returns `true` if this matrix is invertible.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"identity","","",214,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",214,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","",214,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"inverse_mut","","",214,{"inputs":[{"name":"self"}],"output":null}],[11,"multiply_by","","",214,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"dimension","","",214,{"inputs":[],"output":{"name":"usize"}}],[11,"canonical_basis_element","","",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"dot","","",214,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"component_unchecked","","",214,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"component_unchecked_mut","","",214,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"norm_squared","","",214,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"norm","","",214,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",214,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"normalize_mut","","",214,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",214,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",214,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"angle","","",214,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"inner_product","","",214,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"orthonormalize","","",214,null],[11,"orthonormal_subspace_basis","","",214,null],[11,"identity","","",225,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",225,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"meet","","",214,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"join","","",214,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"meet_join","","",214,null],[11,"to_superset","","",214,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"is_in_subset","","",214,{"inputs":[{"name":"matrixmn"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",214,{"inputs":[{"name":"matrixmn"}],"output":{"name":"self"}}],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"new_scaling","","Creates a new homogeneous matrix that applies the same scaling factor on each dimension.",225,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"new_nonuniform_scaling","","Creates a new homogeneous matrix that applies a distinct scaling factor for each dimension.",225,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"new_translation","","Creates a new homogeneous matrix that applies a pure translation.",225,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"new_rotation","","Builds a 2 dimensional homogeneous rotation matrix from an angle in radian.",228,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"new_rotation","","Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).",229,{"inputs":[{"name":"vector3"}],"output":{"name":"self"}}],[11,"new_rotation_wrt_point","","Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).",229,{"inputs":[{"name":"vector3"},{"name":"point3"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).",229,{"inputs":[{"name":"vector3"}],"output":{"name":"self"}}],[11,"from_euler_angles","","Creates a new rotation from Euler angles.",229,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_axis_angle","","Builds a 3D homogeneous rotation matrix from an axis and a rotation angle.",229,{"inputs":[{"name":"unit"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_orthographic","","Creates a new homogeneous matrix for an orthographic projection.",229,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_perspective","","Creates a new homogeneous matrix for a perspective projection.",229,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the point `eye` and looking toward `target`.",229,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",229,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",229,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"append_scaling","","Computes the transformation equal to `self` followed by an uniform scaling factor.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrixn"}}],[11,"prepend_scaling","","Computes the transformation equal to an uniform scaling factor followed by `self`.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrixn"}}],[11,"append_nonuniform_scaling","","Computes the transformation equal to `self` followed by a non-uniform scaling factor.",199,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"matrixn"}}],[11,"prepend_nonuniform_scaling","","Computes the transformation equal to a non-uniform scaling factor followed by `self`.",199,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"matrixn"}}],[11,"append_translation","","Computes the transformation equal to `self` followed by a translation.",199,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"matrixn"}}],[11,"prepend_translation","","Computes the transformation equal to a translation followed by `self`.",199,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"matrixn"}}],[11,"append_scaling_mut","","Computes in-place the transformation equal to `self` followed by an uniform scaling factor.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"prepend_scaling_mut","","Computes in-place the transformation equal to an uniform scaling factor followed by `self`.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"append_nonuniform_scaling_mut","","Computes in-place the transformation equal to `self` followed by a non-uniform scaling factor.",199,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"prepend_nonuniform_scaling_mut","","Computes in-place the transformation equal to a non-uniform scaling factor followed by `self`.",199,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"append_translation_mut","","Computes the transformation equal to `self` followed by a translation.",199,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"prepend_translation_mut","","Computes the transformation equal to a translation followed by `self`.",199,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"transform_vector","","",225,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"generics":["dimnamediff"],"name":"vectorn"}}],[11,"transform_point","","",225,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"generics":["dimnamediff"],"name":"point"}}],[11,"to_superset","nalgebra::geometry","",230,{"inputs":[{"name":"self"}],"output":{"name":"unitquaternion"}}],[11,"is_in_subset","","",230,{"inputs":[{"name":"unitquaternion"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",230,{"inputs":[{"name":"unitquaternion"}],"output":{"name":"self"}}],[11,"to_superset","","",231,{"inputs":[{"name":"self"}],"output":{"name":"unitcomplex"}}],[11,"is_in_subset","","",231,{"inputs":[{"name":"unitcomplex"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",231,{"inputs":[{"name":"unitcomplex"}],"output":{"name":"self"}}],[11,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",231,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Builds a 2 dimensional rotation matrix from an angle in radian wrapped in a 1-dimensional vector.",231,{"inputs":[{"generics":["u1"],"name":"vector"}],"output":{"name":"self"}}],[11,"rotation_between","","The rotation matrix required to align `a` and `b` but with its angl.",231,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"self"}}],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",231,{"inputs":[{"name":"vector"},{"name":"vector"},{"name":"n"}],"output":{"name":"self"}}],[11,"angle","","The rotation angle.",231,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",231,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":{"name":"n"}}],[11,"rotation_to","","The rotation matrix needed to make `self` and `other` coincide.",231,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":{"name":"rotation2"}}],[11,"powf","","Raise the quaternion to a given floating power, i.e., returns the rotation with the angle of `self` multiplied by `n`.",231,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"rotation2"}}],[11,"scaled_axis","","The rotation angle returned as a 1-dimensional vector.",231,{"inputs":[{"name":"self"}],"output":{"generics":["u1"],"name":"vectorn"}}],[11,"rand","","",231,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",230,{"inputs":[{"generics":["u3"],"name":"vector"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Builds a 3D rotation matrix from an axis scaled by the rotation angle.",230,{"inputs":[{"generics":["u3"],"name":"vector"}],"output":{"name":"self"}}],[11,"from_axis_angle","","Builds a 3D rotation matrix from an axis and a rotation angle.",230,{"inputs":[{"name":"unit"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_euler_angles","","Creates a new rotation from Euler angles.",230,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates a rotation that corresponds to the local frame of an observer standing at the origin and looking toward `dir`.",230,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix without translation.",230,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix without translation.",230,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"self"}}],[11,"rotation_between","","The rotation matrix required to align `a` and `b` but with its angl.",230,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",230,{"inputs":[{"name":"vector"},{"name":"vector"},{"name":"n"}],"output":{"name":"option"}}],[11,"angle","","The rotation angle.",230,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"axis","","The rotation axis. Returns `None` if the rotation angle is zero or PI.",230,{"inputs":[{"name":"self"}],"output":{"generics":["unit"],"name":"option"}}],[11,"scaled_axis","","The rotation axis multiplied by the rotation angle.",230,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",230,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":{"name":"n"}}],[11,"rotation_to","","The rotation matrix needed to make `self` and `other` coincide.",230,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":{"name":"rotation3"}}],[11,"powf","","Raise the quaternion to a given floating power, i.e., returns the rotation with the same axis as `self` and an angle equal to `self.angle()` multiplied by `n`.",230,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"rotation3"}}],[11,"rand","","",230,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"into_owned","","Moves this unit quaternion into one that owns its data.",232,{"inputs":[{"name":"self"}],"output":{"name":"unitquaternion"}}],[11,"clone_owned","","Clones this unit quaternion into one that owns its data.",232,{"inputs":[{"name":"self"}],"output":{"name":"unitquaternion"}}],[11,"angle","","The rotation angle in [0; pi] of this unit quaternion.",232,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"quaternion","","The underlying quaternion.",232,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"conjugate","","Compute the conjugate of this unit quaternion.",232,{"inputs":[{"name":"self"}],"output":{"name":"unitquaternion"}}],[11,"inverse","","Inverts this quaternion if it is not zero.",232,{"inputs":[{"name":"self"}],"output":{"name":"unitquaternion"}}],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":{"name":"n"}}],[11,"rotation_to","","The unit quaternion needed to make `self` and `other` coincide.",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":{"name":"unitquaternion"}}],[11,"lerp","","Linear interpolation between two unit quaternions.",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"nlerp","","Normalized linear interpolation between two unit quaternions.",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"},{"name":"n"}],"output":{"name":"unitquaternion"}}],[11,"slerp","","Spherical linear interpolation between two unit quaternions.",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"},{"name":"n"}],"output":{"name":"unitquaternion"}}],[11,"try_slerp","","Computes the spherical linear interpolation between two unit quaternions or returns `None` if both quaternions are approximately 180 degrees apart (in which case the interpolation is not well-defined).",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"},{"name":"n"},{"name":"n"}],"output":{"generics":["unitquaternion"],"name":"option"}}],[11,"conjugate_mut","","Compute the conjugate of this unit quaternion in-place.",232,{"inputs":[{"name":"self"}],"output":null}],[11,"inverse_mut","","Inverts this quaternion if it is not zero.",232,{"inputs":[{"name":"self"}],"output":null}],[11,"axis","","The rotation axis of this unit quaternion or `None` if the rotation is zero.",232,{"inputs":[{"name":"self"}],"output":{"generics":["unit"],"name":"option"}}],[11,"scaled_axis","","The rotation axis of this unit quaternion multiplied by the rotation agle.",232,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"exp","","Compute the exponential of a quaternion.",232,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"ln","","Compute the natural logarithm of a quaternion.",232,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"powf","","Raise the quaternion to a given floating power.",232,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"unitquaternion"}}],[11,"to_rotation_matrix","","Builds a rotation matrix from this unit quaternion.",232,{"inputs":[{"name":"self"}],"output":{"generics":["u3"],"name":"rotation"}}],[11,"to_homogeneous","","Converts this unit quaternion into its equivalent homogeneous transformation matrix.",232,{"inputs":[{"name":"self"}],"output":{"generics":["u4"],"name":"matrixn"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_epsilon","","",232,null],[11,"default_max_relative","","",232,null],[11,"default_max_ulps","","",232,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",232,null],[11,"ulps_eq","","",232,null],[11,"identity","","The quaternion multiplicative identity.",232,{"inputs":[],"output":{"name":"self"}}],[11,"from_axis_angle","","Creates a new quaternion from a unit vector (the rotation axis) and an angle (the rotation angle).",232,{"inputs":[{"name":"unit"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_quaternion","","Creates a new unit quaternion from a quaternion.",232,{"inputs":[{"name":"quaternion"}],"output":{"name":"self"}}],[11,"from_euler_angles","","Creates a new unit quaternion from Euler angles.",232,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_rotation_matrix","","Builds an unit quaternion from a rotation matrix.",232,{"inputs":[{"name":"rotation"}],"output":{"name":"self"}}],[11,"rotation_between","","The unit quaternion needed to make `a` and `b` be collinear and point toward the same direction.",232,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",232,{"inputs":[{"name":"vector"},{"name":"vector"},{"name":"n"}],"output":{"name":"option"}}],[11,"new_observer_frame","","Creates an unit quaternion that corresponds to the local frame of an observer standing at the origin and looking toward `dir`.",232,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix without translation.",232,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix without translation.",232,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"self"}}],[11,"new","","Creates a new unit quaternion rotation from a rotation axis scaled by the rotation angle.",232,{"inputs":[{"generics":["u3"],"name":"vector"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Creates a new unit quaternion rotation from a rotation axis scaled by the rotation angle.",232,{"inputs":[{"generics":["u3"],"name":"vector"}],"output":{"name":"self"}}],[11,"one","","",232,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",232,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"div","","",232,null],[11,"div","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"div","","",232,null],[11,"div","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"mul_assign","","",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"mul_assign","","",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"div_assign","","",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"div_assign","","",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"mul_assign","","",232,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"mul_assign","","",232,{"inputs":[{"name":"self"},{"generics":["u3"],"name":"rotation"}],"output":null}],[11,"div_assign","","",232,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",232,{"inputs":[{"name":"self"},{"generics":["u3"],"name":"rotation"}],"output":null}],[11,"identity","","",232,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",232,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","",232,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",232,{"inputs":[{"name":"self"}],"output":null}],[11,"transform_point","","",232,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"transform_vector","","",232,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"inverse_transform_point","","",232,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"inverse_transform_vector","","",232,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"decompose","","",232,null],[11,"append_translation","","",232,null],[11,"prepend_translation","","",232,null],[11,"append_rotation","","",232,null],[11,"prepend_rotation","","",232,null],[11,"append_scaling","","",232,null],[11,"prepend_scaling","","",232,null],[11,"translation","","",232,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"rotation","","",232,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scaling","","",232,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"powf","","",232,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"rotation_between","","",232,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","",232,{"inputs":[{"name":"vector3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"option"}}],[11,"to_superset","","",232,{"inputs":[{"name":"self"}],"output":{"name":"unitquaternion"}}],[11,"is_in_subset","","",232,{"inputs":[{"name":"unitquaternion"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",232,{"inputs":[{"name":"unitquaternion"}],"output":{"name":"self"}}],[11,"to_superset","","",232,{"inputs":[{"name":"self"}],"output":{"name":"rotation3"}}],[11,"is_in_subset","","",232,{"inputs":[{"name":"rotation3"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",232,{"inputs":[{"name":"rotation3"}],"output":{"name":"self"}}],[11,"to_superset","","",232,{"inputs":[{"name":"self"}],"output":{"generics":["u3"],"name":"isometry"}}],[11,"is_in_subset","","",232,{"inputs":[{"name":"isometry"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",232,{"inputs":[{"name":"isometry"}],"output":{"name":"self"}}],[11,"to_superset","","",232,{"inputs":[{"name":"self"}],"output":{"generics":["u3"],"name":"similarity"}}],[11,"is_in_subset","","",232,{"inputs":[{"name":"similarity"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",232,{"inputs":[{"name":"similarity"}],"output":{"name":"self"}}],[11,"to_superset","","",232,{"inputs":[{"name":"self"}],"output":{"generics":["u3"],"name":"transform"}}],[11,"is_in_subset","","",232,{"inputs":[{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",232,{"inputs":[{"name":"transform"}],"output":{"name":"self"}}],[11,"to_superset","","",232,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"is_in_subset","","",232,{"inputs":[{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",232,{"inputs":[{"name":"matrix4"}],"output":{"name":"self"}}],[11,"angle","","The rotation angle in `]-pi; pi]` of this unit complex number.",233,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"sin_angle","","The sine of the rotation angle.",233,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"cos_angle","","The cosine of the rotation angle.",233,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"scaled_axis","","The rotation angle returned as a 1-dimensional vector.",233,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"complex","","The underlying complex number.",233,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"conjugate","","Compute the conjugate of this unit complex number.",233,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","Inverts this complex number if it is not zero.",233,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",233,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","The unit complex number needed to make `self` and `other` coincide.",233,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"conjugate_mut","","Compute in-place the conjugate of this unit complex number.",233,{"inputs":[{"name":"self"}],"output":null}],[11,"inverse_mut","","Inverts in-place this unit complex number.",233,{"inputs":[{"name":"self"}],"output":null}],[11,"powf","","Raise this unit complex number to a given floating power.",233,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"to_rotation_matrix","","Builds the rotation matrix corresponding to this unit complex number.",233,{"inputs":[{"name":"self"}],"output":{"name":"rotation2"}}],[11,"to_homogeneous","","Converts this unit complex number into its equivalent homogeneous transformation matrix.",233,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_epsilon","","",233,null],[11,"default_max_relative","","",233,null],[11,"default_max_ulps","","",233,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",233,null],[11,"ulps_eq","","",233,null],[11,"identity","","The unit complex number multiplicative identity.",233,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Builds the unit complex number corresponding to the rotation with the angle.",233,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"from_angle","","Builds the unit complex number corresponding to the rotation with the angle.",233,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"from_cos_sin_unchecked","","Builds the unit complex number frow the sinus and cosinus of the rotation angle.",233,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Builds a unit complex rotation from an angle in radian wrapped in a 1-dimensional vector.",233,{"inputs":[{"generics":["u1"],"name":"vector"}],"output":{"name":"self"}}],[11,"from_complex","","Creates a new unit complex number from a complex number.",233,{"inputs":[{"name":"complex"}],"output":{"name":"self"}}],[11,"from_complex_and_get","","Creates a new unit complex number from a complex number.",233,null],[11,"from_rotation_matrix","","Builds the unit complex number from the corresponding 2D rotation matrix.",233,{"inputs":[{"name":"rotation"}],"output":{"name":"self"}}],[11,"rotation_between","","The unit complex needed to make `a` and `b` be collinear and point toward the same direction.",233,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"self"}}],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",233,{"inputs":[{"name":"vector"},{"name":"vector"},{"name":"n"}],"output":{"name":"self"}}],[11,"one","","",233,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",233,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"mul","","",233,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":{"name":"unitcomplex"}}],[11,"mul","","",233,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":{"name":"unitcomplex"}}],[11,"div","","",233,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":{"name":"unitcomplex"}}],[11,"div","","",233,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":{"name":"unitcomplex"}}],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"div","","",233,null],[11,"div","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul_assign","","",233,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"mul_assign","","",233,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"div_assign","","",233,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"div_assign","","",233,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"mul_assign","","",233,{"inputs":[{"name":"self"},{"generics":["u2"],"name":"rotation"}],"output":null}],[11,"mul_assign","","",233,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",233,{"inputs":[{"name":"self"},{"generics":["u2"],"name":"rotation"}],"output":null}],[11,"div_assign","","",233,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"rotate","","Performs the multiplication `rhs = self * rhs` in-place.",233,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"rotate_rows","","Performs the multiplication `lhs = lhs * self` in-place.",233,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"identity","","",233,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",233,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","",233,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",233,{"inputs":[{"name":"self"}],"output":null}],[11,"transform_point","","",233,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"transform_vector","","",233,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"inverse_transform_point","","",233,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"inverse_transform_vector","","",233,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"decompose","","",233,null],[11,"append_translation","","",233,null],[11,"prepend_translation","","",233,null],[11,"append_rotation","","",233,null],[11,"prepend_rotation","","",233,null],[11,"append_scaling","","",233,null],[11,"prepend_scaling","","",233,null],[11,"translation","","",233,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"rotation","","",233,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scaling","","",233,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"powf","","",233,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"rotation_between","","",233,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","",233,{"inputs":[{"name":"vector2"},{"name":"vector2"},{"name":"n"}],"output":{"name":"option"}}],[11,"to_superset","","",233,{"inputs":[{"name":"self"}],"output":{"name":"unitcomplex"}}],[11,"is_in_subset","","",233,{"inputs":[{"name":"unitcomplex"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",233,{"inputs":[{"name":"unitcomplex"}],"output":{"name":"self"}}],[11,"to_superset","","",233,{"inputs":[{"name":"self"}],"output":{"name":"rotation2"}}],[11,"is_in_subset","","",233,{"inputs":[{"name":"rotation2"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",233,{"inputs":[{"name":"rotation2"}],"output":{"name":"self"}}],[11,"to_superset","","",233,{"inputs":[{"name":"self"}],"output":{"generics":["u2"],"name":"isometry"}}],[11,"is_in_subset","","",233,{"inputs":[{"name":"isometry"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",233,{"inputs":[{"name":"isometry"}],"output":{"name":"self"}}],[11,"to_superset","","",233,{"inputs":[{"name":"self"}],"output":{"generics":["u2"],"name":"similarity"}}],[11,"is_in_subset","","",233,{"inputs":[{"name":"similarity"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",233,{"inputs":[{"name":"similarity"}],"output":{"name":"self"}}],[11,"to_superset","","",233,{"inputs":[{"name":"self"}],"output":{"generics":["u2"],"name":"transform"}}],[11,"is_in_subset","","",233,{"inputs":[{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",233,{"inputs":[{"name":"transform"}],"output":{"name":"self"}}],[11,"to_superset","","",233,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"is_in_subset","","",233,{"inputs":[{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",233,{"inputs":[{"name":"matrix3"}],"output":{"name":"self"}}],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"div","","",232,null],[11,"div","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"div","","",232,null],[11,"div","","",232,null],[11,"has_normalizer","","Indicates whether a `Transform` with the category `Self` has a bottom-row different from `0 0 .. 1`.",222,{"inputs":[],"output":{"name":"bool"}}],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"div","","",232,null],[11,"div","","",232,null]],"paths":[[8,"Real"],[3,"Matrix"],[8,"Dim"],[8,"DimAdd"],[8,"DimNameAdd"],[8,"DimMul"],[8,"DimNameMul"],[8,"DimSub"],[8,"DimNameSub"],[8,"DimDiv"],[8,"DimNameDiv"],[8,"DimMin"],[8,"DimNameMin"],[8,"DimMax"],[8,"DimNameMax"],[8,"DimName"],[8,"NamedDim"],[3,"Dynamic"],[3,"U1"],[3,"U0"],[3,"U2"],[3,"U3"],[3,"U4"],[3,"U5"],[3,"U6"],[3,"U7"],[3,"U8"],[3,"U9"],[3,"U10"],[3,"U11"],[3,"U12"],[3,"U13"],[3,"U14"],[3,"U15"],[3,"U16"],[3,"U17"],[3,"U18"],[3,"U19"],[3,"U20"],[3,"U21"],[3,"U22"],[3,"U23"],[3,"U24"],[3,"U25"],[3,"U26"],[3,"U27"],[3,"U28"],[3,"U29"],[3,"U30"],[3,"U31"],[3,"U32"],[3,"U33"],[3,"U34"],[3,"U35"],[3,"U36"],[3,"U37"],[3,"U38"],[3,"U39"],[3,"U40"],[3,"U41"],[3,"U42"],[3,"U43"],[3,"U44"],[3,"U45"],[3,"U46"],[3,"U47"],[3,"U48"],[3,"U49"],[3,"U50"],[3,"U51"],[3,"U52"],[3,"U53"],[3,"U54"],[3,"U55"],[3,"U56"],[3,"U57"],[3,"U58"],[3,"U59"],[3,"U60"],[3,"U61"],[3,"U62"],[3,"U63"],[3,"U64"],[3,"U65"],[3,"U66"],[3,"U67"],[3,"U68"],[3,"U69"],[3,"U70"],[3,"U71"],[3,"U72"],[3,"U73"],[3,"U74"],[3,"U75"],[3,"U76"],[3,"U77"],[3,"U78"],[3,"U79"],[3,"U80"],[3,"U81"],[3,"U82"],[3,"U83"],[3,"U84"],[3,"U85"],[3,"U86"],[3,"U87"],[3,"U88"],[3,"U89"],[3,"U90"],[3,"U91"],[3,"U92"],[3,"U93"],[3,"U94"],[3,"U95"],[3,"U96"],[3,"U97"],[3,"U98"],[3,"U99"],[3,"U100"],[3,"U101"],[3,"U102"],[3,"U103"],[3,"U104"],[3,"U105"],[3,"U106"],[3,"U107"],[3,"U108"],[3,"U109"],[3,"U110"],[3,"U111"],[3,"U112"],[3,"U113"],[3,"U114"],[3,"U115"],[3,"U116"],[3,"U117"],[3,"U118"],[3,"U119"],[3,"U120"],[3,"U121"],[3,"U122"],[3,"U123"],[3,"U124"],[3,"U125"],[3,"U126"],[3,"U127"],[8,"DimEq"],[8,"SameNumberOfRows"],[8,"SameNumberOfColumns"],[8,"SameDimension"],[8,"Allocator"],[8,"Reallocator"],[8,"Storage"],[8,"StorageMut"],[3,"X"],[3,"XY"],[3,"XYZ"],[3,"XYZW"],[3,"XYZWA"],[3,"XYZWAB"],[3,"IJKW"],[3,"M2x2"],[3,"M2x3"],[3,"M2x4"],[3,"M2x5"],[3,"M2x6"],[3,"M3x2"],[3,"M3x3"],[3,"M3x4"],[3,"M3x5"],[3,"M3x6"],[3,"M4x2"],[3,"M4x3"],[3,"M4x4"],[3,"M4x5"],[3,"M4x6"],[3,"M5x2"],[3,"M5x3"],[3,"M5x4"],[3,"M5x5"],[3,"M5x6"],[3,"M6x2"],[3,"M6x3"],[3,"M6x4"],[3,"M6x5"],[3,"M6x6"],[3,"MatrixIter"],[3,"MatrixIterMut"],[3,"DefaultAllocator"],[3,"Unit"],[3,"SliceStorage"],[3,"SliceStorageMut"],[3,"MatrixArray"],[3,"MatrixVec"],[8,"Scalar"],[8,"SliceRange"],[3,"Bidiagonal"],[3,"SVD"],[3,"SymmetricEigen"],[6,"SquareMatrix"],[3,"PermutationSequence"],[3,"QR"],[3,"Hessenberg"],[3,"SymmetricTridiagonal"],[3,"Cholesky"],[3,"LU"],[3,"FullPivLU"],[3,"RealSchur"],[3,"Point"],[3,"Quaternion"],[3,"Translation"],[3,"Isometry"],[3,"Similarity"],[3,"Rotation"],[6,"MatrixMN"],[4,"TGeneral"],[4,"TProjective"],[4,"TAffine"],[3,"Transform"],[3,"Reflection"],[3,"Orthographic3"],[3,"Perspective3"],[8,"TCategory"],[8,"TCategoryMul"],[3,"Id"],[6,"MatrixN"],[6,"Vector"],[6,"VectorN"],[6,"Matrix3"],[6,"Matrix4"],[6,"Rotation3"],[6,"Rotation2"],[6,"UnitQuaternion"],[6,"UnitComplex"]]};
searchIndex["nodrop"] = {"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",null,null],[11,"new","","Create a new NoDrop.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[3,"ParseComplexError","","",null,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"generics":["complex"],"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"self"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parsecomplexerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parsecomplexerror"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_cpus"] = {"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current system.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",1,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"from","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["ratio","parseratioerror"],"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"generics":["ratio","parseratioerror"],"name":"result"}}],[11,"into","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"approximate_float","","",0,{"inputs":[{"name":"f"}],"output":{"generics":["ratio"],"name":"option"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["obj"] = {"doc":"","items":[[3,"Material","obj","",null,null],[12,"name","","",0,null],[12,"ka","","",0,null],[12,"kd","","",0,null],[12,"ks","","",0,null],[12,"ke","","",0,null],[12,"km","","",0,null],[12,"tf","","",0,null],[12,"ns","","",0,null],[12,"ni","","",0,null],[12,"tr","","",0,null],[12,"d","","",0,null],[12,"illum","","",0,null],[12,"map_ka","","",0,null],[12,"map_kd","","",0,null],[12,"map_ks","","",0,null],[12,"map_ke","","",0,null],[12,"map_ns","","",0,null],[12,"map_d","","",0,null],[12,"map_bump","","",0,null],[12,"map_refl","","",0,null],[3,"Mtl","","",null,null],[12,"materials","","",1,null],[3,"Group","","",null,null],[12,"name","","",2,null],[12,"index","","An index is used to tell groups apart that share the same name",2,null],[12,"material","","",2,null],[12,"polys","","",2,null],[3,"IndexTuple","","",null,null],[12,"0","","",3,null],[12,"1","","",3,null],[12,"2","","",3,null],[3,"Obj","","",null,null],[12,"position","","",4,null],[12,"texture","","",4,null],[12,"normal","","",4,null],[12,"objects","","",4,null],[12,"material_libs","","",4,null],[3,"Object","","",null,null],[12,"name","","",5,null],[12,"groups","","",5,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"indextuple"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"indextuple"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"indextuple"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"indextuple"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"indextuple"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"indextuple"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"indextuple"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"indextuple"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"indextuple"}],"output":{"name":"ordering"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"new","","",5,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"new","","",2,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"load","","",4,{"inputs":[{"name":"path"}],"output":{"generics":["obj"],"name":"result"}}],[11,"load_mtls","","Loads the .mtl files referenced in the .obj file.",4,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"result"}}],[11,"load_buf","","",4,{"inputs":[{"name":"b"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"material"}}],[11,"new","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"load","","",1,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[6,"SimplePolygon","","",null,null],[8,"GenPolygon","","",null,null],[10,"new","","",6,{"inputs":[{"name":"simplepolygon"}],"output":{"name":"self"}}],[11,"new","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}]],"paths":[[3,"Material"],[3,"Mtl"],[3,"Group"],[3,"IndexTuple"],[3,"Obj"],[3,"Object"],[8,"GenPolygon"],[6,"SimplePolygon"]]};
searchIndex["png"] = {"doc":"PNG encoder and decoder This crate contains a PNG encoder and decoder. It supports reading of single lines or whole frames. ## The decoder The most important types for decoding purposes are `Decoder` and `Reader`. They both wrap a `std::io::Read`. `Decoder` serves as a builder for `Reader`. Calling `Decoder::read_info` reads from the `Read` until the image data is reached. ### Using the decoder     use std::fs::File;","items":[[3,"PixelDimensions","png","Pixel dimensions information",null,null],[12,"xppu","","Pixels per unit, X axis",0,null],[12,"yppu","","Pixels per unit, Y axis",0,null],[12,"unit","","Either Meter or Unspecified",0,null],[3,"FrameControl","","Frame control information",null,null],[12,"sequence_number","","Sequence number of the animation chunk, starting from 0",1,null],[12,"width","","Width of the following frame",1,null],[12,"height","","Height of the following frame",1,null],[12,"x_offset","","X position at which to render the following frame",1,null],[12,"y_offset","","Y position at which to render the following frame",1,null],[12,"delay_num","","Frame delay fraction numerator",1,null],[12,"delay_den","","Frame delay fraction denominator",1,null],[12,"dispose_op","","Type of frame area disposal to be done after rendering this frame",1,null],[12,"blend_op","","Type of frame area rendering for this frame",1,null],[3,"AnimationControl","","Animation control information",null,null],[12,"num_frames","","Number of frames",2,null],[12,"num_plays","","Number of times to loop this APNG.  0 indicates infinite looping.",2,null],[3,"Info","","PNG info struct",null,null],[12,"width","","",3,null],[12,"height","","",3,null],[12,"bit_depth","","",3,null],[12,"color_type","","",3,null],[12,"interlaced","","",3,null],[12,"trns","","",3,null],[12,"pixel_dims","","",3,null],[12,"palette","","",3,null],[12,"frame_control","","",3,null],[12,"animation_control","","",3,null],[3,"Transformations","","Output transformations",null,null],[3,"Decoder","","PNG Decoder",null,null],[3,"Reader","","PNG reader (mostly high-level interface)",null,null],[3,"OutputInfo","","Output info",null,null],[12,"width","","",4,null],[12,"height","","",4,null],[12,"color_type","","",4,null],[12,"bit_depth","","",4,null],[12,"line_size","","",4,null],[3,"StreamingDecoder","","PNG StreamingDecoder (low-level interface)",null,null],[3,"Encoder","","PNG Encoder",null,null],[3,"Writer","","PNG writer",null,null],[4,"ColorType","","",null,null],[13,"Grayscale","","",5,null],[13,"RGB","","",5,null],[13,"Indexed","","",5,null],[13,"GrayscaleAlpha","","",5,null],[13,"RGBA","","",5,null],[4,"BitDepth","","Bit depth of the png file",null,null],[13,"One","","",6,null],[13,"Two","","",6,null],[13,"Four","","",6,null],[13,"Eight","","",6,null],[13,"Sixteen","","",6,null],[4,"Unit","","Physical unit of the pixel dimensions",null,null],[13,"Unspecified","","",7,null],[13,"Meter","","",7,null],[4,"Decoded","","Result of the decoding process",null,null],[13,"Nothing","","Nothing decoded yet",8,null],[13,"Header","","",8,null],[13,"ChunkBegin","","",8,null],[13,"ChunkComplete","","",8,null],[13,"PixelDimensions","","",8,null],[13,"AnimationControl","","",8,null],[13,"FrameControl","","",8,null],[13,"ImageData","","Decoded raw image data.",8,null],[13,"PartialChunk","","",8,null],[13,"ImageEnd","","",8,null],[4,"DecodingError","","",null,null],[13,"IoError","","",9,null],[13,"Format","","",9,null],[13,"InvalidSignature","","",9,null],[13,"CrcMismatch","","",9,null],[12,"recover","png::DecodingError","bytes to skip to try to recover from this error",9,null],[12,"crc_val","","Stored CRC32 value",9,null],[12,"crc_sum","","Calculated CRC32 sum",9,null],[12,"chunk","","",9,null],[13,"Other","png","",9,null],[13,"CorruptFlateStream","","",9,null],[4,"EncodingError","","",null,null],[13,"IoError","","",10,null],[13,"Format","","",10,null],[0,"chunk","","Chunk types and functions",null,null],[5,"is_critical","png::chunk","Returns true if the chunk is critical.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"is_private","","Returns true if the chunk is private.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"reserved_set","","Checks whether the reserved bit of the chunk name is set. If it is set the chunk name is invalid.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"safe_to_copy","","Returns true if the chunk is safe to copy if unknown.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[6,"ChunkType","","",null,null],[17,"IHDR","","Image header",null,null],[17,"PLTE","","Palette",null,null],[17,"IDAT","","Image data",null,null],[17,"IEND","","Image trailer",null,null],[17,"tRNS","","Transparency",null,null],[17,"bKGD","","Background colour",null,null],[17,"tIME","","Image last-modification time",null,null],[17,"pHYs","","Physical pixel dimensions",null,null],[17,"acTL","","Animation control",null,null],[17,"fcTL","","Frame control",null,null],[17,"fdAT","","Frame data",null,null],[11,"fmt","png","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"error"}],"output":{"name":"decodingerror"}}],[11,"from","","",9,{"inputs":[{"name":"string"}],"output":{"name":"decodingerror"}}],[11,"new","","Creates a new StreamingDecoder",11,{"inputs":[],"output":{"name":"streamingdecoder"}}],[11,"reset","","Resets the StreamingDecoder",11,{"inputs":[{"name":"self"}],"output":null}],[11,"update","","Low level StreamingDecoder interface.",11,null],[11,"set_param","","",12,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":null}],[11,"buffer_size","","Returns the size needed to hold a decoded frame",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",13,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads all meta data until the first IDAT chunk",13,{"inputs":[{"name":"self"}],"output":{"generics":["decodingerror"],"name":"result"}}],[11,"info","","",14,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"next_frame","","Decodes the next frame into `buf`",14,null],[11,"next_row","","Returns the next processed row of the image",14,{"inputs":[{"name":"self"}],"output":{"generics":["option","decodingerror"],"name":"result"}}],[11,"next_interlaced_row","","Returns the next processed row of the image",14,{"inputs":[{"name":"self"}],"output":{"generics":["option","decodingerror"],"name":"result"}}],[11,"output_color_type","","Returns the color type and the number of bits per sample of the data returned by `Reader::next_row` and Reader::frames`.",14,null],[11,"output_buffer_size","","Returns the number of bytes required to hold a deinterlaced image frame that is decoded using the given input transformations.",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"output_line_size","","Returns the number of bytes required to hold a deinterlaced row.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",10,{"inputs":[{"name":"error"}],"output":{"name":"encodingerror"}}],[11,"new","","",15,{"inputs":[{"name":"w"},{"name":"u32"},{"name":"u32"}],"output":{"name":"encoder"}}],[11,"write_header","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["writer","encodingerror"],"name":"result"}}],[11,"set_param","","",5,{"inputs":[{"name":"self"},{"name":"encoder"}],"output":null}],[11,"set_param","","",6,{"inputs":[{"name":"self"},{"name":"encoder"}],"output":null}],[11,"write_chunk","","",16,null],[11,"write_image_data","","Writes the image data.",16,null],[11,"drop","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"samples","","Returns the number of samples used per pixel of `ColorType`",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",5,{"inputs":[{"name":"u8"}],"output":{"generics":["colortype"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bitdepth"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"bitdepth"}],"output":{"name":"bool"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",6,{"inputs":[{"name":"u8"}],"output":{"generics":["bitdepth"],"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"pixeldimensions"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unit"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",7,{"inputs":[{"name":"u8"}],"output":{"generics":["unit"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"animationcontrol"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"info"}}],[11,"size","","Size of the image",3,null],[11,"is_animated","","Returns true if the image is an APNG image.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"animation_control","","Returns the frame control information of the image",3,{"inputs":[{"name":"self"}],"output":{"generics":["animationcontrol"],"name":"option"}}],[11,"frame_control","","Returns the frame control information of the current frame",3,{"inputs":[{"name":"self"}],"output":{"generics":["framecontrol"],"name":"option"}}],[11,"bits_per_pixel","","Returns the bits per pixel",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes_per_pixel","","Returns the bytes per pixel",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"raw_bytes","","Returns the number of bytes needed for one deinterlaced image",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"raw_row_length","","Returns the number of bytes needed for one deinterlaced row ",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"raw_row_length_from_width","","Returns the number of bytes needed for one deinterlaced row of width `width`",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"transformations"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"ordering"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",12,{"inputs":[],"output":{"name":"transformations"}}],[11,"all","","Returns the set containing all flags.",12,{"inputs":[],"output":{"name":"transformations"}}],[11,"bits","","Returns the raw value of the flags currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",12,{"inputs":[{"name":"u32"}],"output":{"generics":["transformations"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",12,{"inputs":[{"name":"u32"}],"output":{"name":"transformations"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",12,{"inputs":[{"name":"self"},{"name":"transformations"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitor_assign","","Adds the set of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitxor_assign","","Toggles the set of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"sub_assign","","Disables all flags enabled in the set.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",12,{"inputs":[{"name":"self"}],"output":{"name":"transformations"}}],[11,"extend","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"transformations"}}],[17,"TRANSFORM_IDENTITY","","No transformation",null,null],[17,"TRANSFORM_STRIP_16","","Strip 16-bit samples to 8 bits",null,null],[17,"TRANSFORM_STRIP_ALPHA","","Discard the alpha channel",null,null],[17,"TRANSFORM_PACKING","","Expand 1; 2 and 4-bit samples to bytes",null,null],[17,"TRANSFORM_PACKSWAP","","Change order of packed pixels to LSB first",null,null],[17,"TRANSFORM_EXPAND","","Expand paletted images to RGB; expand grayscale images of less than 8-bit depth to 8-bit depth; and expand tRNS chunks to alpha channels.",null,null],[17,"TRANSFORM_INVERT_MONO","","Invert monochrome images",null,null],[17,"TRANSFORM_SHIFT","","Normalize pixels to the sBIT depth",null,null],[17,"TRANSFORM_BGR","","Flip RGB to BGR; RGBA to BGRA",null,null],[17,"TRANSFORM_SWAP_ALPHA","","Flip RGBA to ARGB or GA to AG",null,null],[17,"TRANSFORM_SWAP_ENDIAN","","Byte-swap 16-bit samples",null,null],[17,"TRANSFORM_INVERT_ALPHA","","Change alpha from opacity to transparency",null,null],[17,"TRANSFORM_STRIP_FILLER","","",null,null],[17,"TRANSFORM_STRIP_FILLER_BEFORE","","",null,null],[17,"TRANSFORM_STRIP_FILLER_AFTER","","",null,null],[17,"TRANSFORM_GRAY_TO_RGB","","",null,null],[17,"TRANSFORM_EXPAND_16","","",null,null],[17,"TRANSFORM_SCALE_16","","",null,null],[8,"Parameter","","Configuration parameter trait",null,null],[10,"set_param","","",17,{"inputs":[{"name":"self"},{"name":"object"}],"output":null}],[8,"HasParameters","","Object has parameters",null,null],[11,"set","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}]],"paths":[[3,"PixelDimensions"],[3,"FrameControl"],[3,"AnimationControl"],[3,"Info"],[3,"OutputInfo"],[4,"ColorType"],[4,"BitDepth"],[4,"Unit"],[4,"Decoded"],[4,"DecodingError"],[4,"EncodingError"],[3,"StreamingDecoder"],[3,"Transformations"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[3,"Writer"],[8,"Parameter"],[8,"HasParameters"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from a finite iterator. The order of elements in the sample is not random.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"generics":["osrng"],"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"generics":["stdrng"],"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rawpointer"] = {"doc":"","items":[[5,"ptrdistance","rawpointer","Return the number of elements of `T` from `start` to `end`. Return the arithmetic difference if `T` is zero size.",null,null],[8,"PointerExt","","Extension methods for raw pointers",null,null],[10,"offset","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"self"}}],[11,"pre_inc","","Increment the pointer by 1, and return its new value.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"post_inc","","Increment the pointer by 1, but return its old value.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pre_dec","","Decrement the pointer by 1, and return its new value.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"post_dec","","Decrement the pointer by 1, but return its old value.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inc","","Increment by 1",0,{"inputs":[{"name":"self"}],"output":null}],[11,"dec","","Decrement by 1",0,{"inputs":[{"name":"self"}],"output":null}],[11,"stride_offset","","Offset the pointer by `s` multiplied by `index`.",0,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"usize"}],"output":{"name":"self"}}]],"paths":[[8,"PointerExt"]]};
searchIndex["rayon"] = {"doc":"","items":[[5,"current_num_threads","rayon","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"inputs":[],"output":{"name":"usize"}}],[3,"Configuration","","Contains the rayon thread pool configuration.",null,null],[5,"initialize","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. In fact, calling `initialize` is not recommended, except for in two scenarios:",null,{"inputs":[{"name":"configuration"}],"output":{"generics":["box"],"name":"result"}}],[3,"ThreadPool","","ThreadPool",null,null],[5,"join","","The `join` function takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"inputs":[{"name":"op"}],"output":{"name":"r"}}],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,null],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",null,{"inputs":[{"name":"d"},{"name":"s"}],"output":{"name":"split"}}],[0,"collections","","This module contains the parallel iterator types for standard collections. You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[0,"binary_heap","rayon::collections","This module contains the parallel iterator types for heaps (`BinaryHeap<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::binary_heap","Parallel iterator over a binary heap",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a binary heap",null,null],[11,"drive_unindexed","","",0,null],[11,"opt_len","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",0,null],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",0,null],[11,"drive_unindexed","","",1,null],[11,"opt_len","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",1,null],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",1,null],[0,"btree_map","rayon::collections","This module contains the parallel iterator types for B-Tree maps (`BTreeMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_map","Parallel iterator over a B-Tree map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a B-Tree map",null,null],[11,"drive_unindexed","","",2,null],[11,"opt_len","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",3,null],[11,"opt_len","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",4,null],[11,"opt_len","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"btree_set","rayon::collections","This module contains the parallel iterator types for B-Tree sets (`BTreeSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_set","Parallel iterator over a B-Tree set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree set",null,null],[11,"drive_unindexed","","",5,null],[11,"opt_len","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",6,null],[11,"opt_len","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"hash_map","rayon::collections","This module contains the parallel iterator types for hash maps (`HashMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_map","Parallel iterator over a hash map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a hash map",null,null],[11,"drive_unindexed","","",7,null],[11,"opt_len","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",8,null],[11,"opt_len","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",9,null],[11,"opt_len","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"hash_set","rayon::collections","This module contains the parallel iterator types for hash sets (`HashSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_set","Parallel iterator over a hash set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash set",null,null],[11,"drive_unindexed","","",10,null],[11,"opt_len","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",11,null],[11,"opt_len","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"linked_list","rayon::collections","This module contains the parallel iterator types for linked lists (`LinkedList<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::linked_list","Parallel iterator over a linked list",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a linked list",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a linked list",null,null],[11,"drive_unindexed","","",12,null],[11,"opt_len","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",13,null],[11,"opt_len","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",14,null],[11,"opt_len","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"vec_deque","rayon::collections","This module contains the parallel iterator types for double-ended queues (`VecDeque<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::vec_deque","Parallel iterator over a double-ended queue",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a double-ended queue",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a double-ended queue",null,null],[11,"drive_unindexed","","",15,null],[11,"opt_len","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",15,null],[11,"len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",15,null],[11,"drive_unindexed","","",16,null],[11,"opt_len","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",16,null],[11,"len","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",16,null],[11,"drive_unindexed","","",17,null],[11,"opt_len","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",17,null],[11,"len","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",17,null],[0,"iter","rayon","The `ParallelIterator` module makes it easy to write parallel programs using an iterator-style interface. To get access to all the methods you want, the easiest is to write `use rayon::prelude::*;` at the top of your module, which will import the various traits and methods you need.",null,null],[3,"Chain","rayon::iter","`Chain` is an iterator that joins `b` after `a` in one continuous iterator. This struct is created by the [`chain()`] method on [`ParallelIterator`]",null,null],[3,"Enumerate","","`Enumerate` is an iterator that returns the current count along with the element. This struct is created by the [`enumerate()`] method on [`ParallelIterator`]",null,null],[3,"Filter","","`Filter` takes a predicate `filter_op` and filters out elements that match. This struct is created by the [`filter()`] method on [`ParallelIterator`]",null,null],[3,"FilterMap","","`FilterMap` creates an iterator that uses `filter_op` to both filter and map elements. This struct is created by the [`filter_map()`] method on [`ParallelIterator`].",null,null],[3,"FlatMap","","`FlatMap` maps each element to an iterator, then flattens these iterators together. This struct is created by the [`flat_map()`] method on [`ParallelIterator`]",null,null],[3,"Fold","","`Fold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold()`] method on [`ParallelIterator`]",null,null],[3,"FoldWith","","`FoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold_with()`] method on [`ParallelIterator`]",null,null],[3,"Skip","","`Skip` is an iterator that skips over the first `n` elements. This struct is created by the [`skip()`] method on [`ParallelIterator`]",null,null],[3,"Split","","`Split` is a parallel iterator using arbitrary data and a splitting function. This struct is created by the [`split()`] function.",null,null],[3,"Take","","`Take` is an iterator that iterates over the first `n` elements. This struct is created by the [`take()`] method on [`ParallelIterator`]",null,null],[3,"Map","","`Map` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"MapWith","","`MapWith` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"Zip","","",null,null],[3,"Rev","","",null,null],[3,"MinLen","","`MinLen` is an iterator that imposes a minimum length on iterator splits. This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"MaxLen","","`MaxLen` is an iterator that imposes a maximum length on iterator splits. This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"Cloned","","`Cloned` is an iterator that clones the elements of an underlying iterator.",null,null],[3,"Inspect","","`Inspect` is an iterator that calls a function with a reference to each element before yielding it.",null,null],[3,"WhileSome","","`WhileSome` is an iterator that yields the `Some` elements of an iterator, halting as soon as any `None` is produced.",null,null],[4,"Either","","Represents a value of one of two possible types.",null,null],[13,"Left","","",18,null],[13,"Right","","",18,null],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",null,{"inputs":[{"name":"d"},{"name":"s"}],"output":{"name":"split"}}],[11,"drive_unindexed","","",19,null],[11,"opt_len","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",19,null],[11,"len","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",19,null],[11,"drive_unindexed","","",20,null],[11,"opt_len","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",20,null],[11,"len","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",20,null],[11,"drive_unindexed","","",21,null],[11,"drive_unindexed","","",22,null],[11,"drive_unindexed","","",23,null],[0,"internal","","Internal traits and functions used to implement parallel iteration. These should be considered highly unstable: users of parallel iterators should not need to interact with them directly. See `README.md` for a high-level overview.",null,null],[5,"bridge","rayon::iter::internal","",null,null],[5,"bridge_producer_consumer","","",null,null],[5,"bridge_unindexed","","",null,null],[8,"ProducerCallback","","",null,null],[16,"Output","","",24,null],[10,"callback","","",24,null],[8,"Producer","","A producer which will produce a fixed number of items N. This is not queryable through the API; the consumer is expected to track it.",null,null],[16,"Item","","",25,null],[16,"IntoIter","","",25,null],[10,"into_iter","","",25,null],[11,"min_len","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"split_at","","Split into two producers; one produces items `0..index`, the other `index..N`. Index must be less than or equal to `N`.",25,null],[11,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[8,"Consumer","","A consumer which consumes items that are fed to it.",null,null],[16,"Folder","","",26,null],[16,"Reducer","","",26,null],[16,"Result","","",26,null],[10,"split_at","","Divide the consumer into two consumers, one processing items `0..index` and one processing items from `index..`. Also produces a reducer that can be used to reduce the results at the end.",26,null],[10,"into_folder","","Convert the consumer into a folder that can consume items sequentially, eventually producing a final result.",26,null],[10,"full","","Hint whether this `Consumer` would like to stop processing further items, e.g. if a search has been completed.",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Folder","","",null,null],[16,"Result","","",27,null],[10,"consume","","Consume next item and return new sequential state.",27,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[11,"consume_iter","","Consume items from the iterator until full, and return new sequential state.",27,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[10,"complete","","Finish consuming items, produce final result.",27,null],[10,"full","","Hint whether this `Folder` would like to stop processing further items, e.g. if a search has been completed.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Reducer","","",null,null],[10,"reduce","","Reduce two final results into one; this is executed after a split.",28,{"inputs":[{"name":"self"},{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[8,"UnindexedConsumer","","A stateless consumer can be freely copied.",null,null],[10,"split_off_left","","",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_reducer","","",29,null],[8,"UnindexedProducer","","An unindexed producer that doesn't know its exact length. (or can't represent its known length in a `usize`)",null,null],[16,"Item","","",30,null],[10,"split","","Split midway into a new producer if possible, otherwise return `None`.",30,null],[10,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[11,"drive_unindexed","rayon::iter","",31,null],[11,"drive_unindexed","","",32,null],[11,"drive_unindexed","","",33,null],[11,"opt_len","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"len","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",33,null],[11,"with_producer","","",33,null],[11,"drive_unindexed","","",34,null],[11,"drive_unindexed","","",35,null],[11,"opt_len","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"len","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",35,null],[11,"with_producer","","",35,null],[11,"drive_unindexed","","",36,null],[11,"opt_len","","",36,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",36,null],[11,"len","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",36,null],[11,"drive_unindexed","","",37,null],[11,"opt_len","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",37,null],[11,"len","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",37,null],[11,"drive_unindexed","","",38,null],[11,"opt_len","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",38,null],[11,"len","","",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",38,null],[11,"drive_unindexed","","",39,null],[11,"opt_len","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",39,null],[11,"len","","",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",39,null],[11,"drive_unindexed","","",40,null],[11,"opt_len","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",40,null],[11,"len","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",40,null],[11,"drive_unindexed","","",41,null],[11,"opt_len","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",41,null],[11,"len","","",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",41,null],[11,"drive_unindexed","","",42,null],[11,"opt_len","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",42,null],[11,"len","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",42,null],[11,"drive_unindexed","","",43,null],[11,"opt_len","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",43,null],[11,"len","","",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",43,null],[11,"drive_unindexed","","",44,null],[8,"IntoParallelIterator","","",null,null],[16,"Iter","","",45,null],[16,"Item","","",45,null],[10,"into_par_iter","","",45,null],[8,"IntoParallelRefIterator","","",null,null],[16,"Iter","","",46,null],[16,"Item","","",46,null],[10,"par_iter","","",46,null],[8,"IntoParallelRefMutIterator","","",null,null],[16,"Iter","","",47,null],[16,"Item","","",47,null],[10,"par_iter_mut","","",47,null],[8,"ParallelIterator","","The `ParallelIterator` interface.",null,null],[16,"Item","","",48,null],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",48,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"for_each_with","","Executes `OP` on the given `init` value with each item produced by the iterator, in parallel.",48,{"inputs":[{"name":"self"},{"name":"t"},{"name":"op"}],"output":null}],[11,"count","","Counts the number of items in this parallel iterator.",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_with","","Applies `map_op` to the given `init` value with each item of this iterator, producing a new iterator with the results.",48,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"mapwith"}}],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",48,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",48,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"inspect"}}],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filtermap"}}],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",48,null],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",48,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"option"}}],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The parallel fold works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",48,{"inputs":[{"name":"self"},{"name":"id"},{"name":"f"}],"output":{"name":"fold"}}],[11,"fold_with","","Applies `fold_op` to the given `init` value with each item of this iterator, finally producing the value for further use.",48,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"foldwith"}}],[11,"sum","","Sums up the items in the iterator.",48,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Multiplies all the items in the iterator.",48,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_by","","Computes the minimum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by","","Computes the maximum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both.",48,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"chain"}}],[11,"find_any","","Searches for some item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the first one in the parallel sequence which matches, since we search the entire sequence in parallel.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate and returns it.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate and returns it.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"any","","Searches for some item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"while_some","","Creates an iterator over the `Some` items of this iterator, halting as soon as any `None` is found.",48,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",48,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"unzip","","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",48,null],[11,"partition","","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  Items for which the `predicate` returns true go into the first container, and the rest go into the second.",48,null],[11,"partition_map","","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  `Either::Left` items go into the first container, and `Either::Right` items go into the second.",48,null],[10,"drive_unindexed","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",48,null],[11,"opt_len","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",48,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"IndexedParallelIterator","","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points.",null,null],[11,"collect_into","","Collects the results of the iterator into the specified vector. The vector is always truncated before execution begins. If possible, reusing the vector across calls can lead to better performance since it reuses the same backing buffer.",49,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"unzip_into","","Unzips the results of the iterator into the specified vectors. The vectors are always truncated before execution begins. If possible, reusing the vectors across calls can lead to better performance since they reuse the same backing buffer.",49,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from this iterator and `B` are from the iterator given as argument. Like the `zip` method on ordinary iterators, if the two iterators are of unequal length, you only get the items they have in common.",49,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"name":"zip"}}],[11,"cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","Determines if the elements of this `ParallelIterator` are equal to those of another",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `ParallelIterator` are unequal to those of another",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `ParallelIterator` are lexicographically less than those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `ParallelIterator` are lexicographically greater than those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"enumerate","","Yields an index along with each item.",49,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields the first `n` elements.",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"position_any","","Searches for some item in the parallel iterator that matches the given predicate, and returns its index.  Like `ParallelIterator::find_any`, the parallel search will not necessarily find the first match, and once a match is found we'll attempt to stop processing any more.",49,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"position_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate, and returns its index.",49,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"position_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate, and returns its index.",49,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rev","","Produces a new iterator with the elements of this iterator in reverse order.",49,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"with_min_len","","Sets the minimum length of iterators desired to process in each thread.  Rayon will not split any smaller than this length, but of course an iterator could already be smaller to begin with.",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"minlen"}}],[11,"with_max_len","","Sets the maximum length of iterators desired to process in each thread.  Rayon will try to split at least below this length, unless that would put it below the length from `with_min_len()`. For example, given min=10 and max=15, a length of 16 will not be split any further.",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"maxlen"}}],[10,"len","","Produces an exact count of how many items this iterator will produce, presuming no panic occurs.",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"drive","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",49,null],[10,"with_producer","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",49,null],[8,"FromParallelIterator","","`FromParallelIterator` implements the conversion from a [`ParallelIterator`]. By implementing `FromParallelIterator` for a type, you define how it will be created from an iterator.",null,null],[10,"from_par_iter","","",50,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"ParallelExtend","","`ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].",null,null],[10,"par_extend","","",51,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[0,"option","rayon","This module contains the parallel iterator types for options (`Option<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::option","Parallel iterator over an option",null,null],[3,"Iter","","Parallel iterator over an immutable reference to an option",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to an option",null,null],[11,"drive_unindexed","","",52,null],[11,"opt_len","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",52,null],[11,"len","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",52,null],[11,"drive_unindexed","","",53,null],[11,"opt_len","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",53,null],[11,"len","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",53,null],[11,"drive_unindexed","","",54,null],[11,"opt_len","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",54,null],[11,"len","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",54,null],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.",null,null],[0,"range","","This module contains the parallel iterator types for ranges (`Range<T>`); this is the type for values created by a `a..b` expression. You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"Iter","rayon::range","Parallel iterator over a range",null,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"drive_unindexed","","",55,null],[0,"result","rayon","This module contains the parallel iterator types for results (`Result<T, E>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::result","Parallel iterator over a result",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a result",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a result",null,null],[11,"drive_unindexed","","",56,null],[11,"opt_len","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",56,null],[11,"len","","",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",56,null],[11,"drive_unindexed","","",57,null],[11,"opt_len","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",57,null],[11,"len","","",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",57,null],[11,"drive_unindexed","","",58,null],[11,"opt_len","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",58,null],[11,"len","","",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",58,null],[0,"slice","rayon","This module contains the parallel iterator types for slices (`[T]`). You will rarely need to interact with it directly unless you have need to name one of those types.",null,null],[3,"Iter","rayon::slice","Parallel iterator over immutable items in a slice",null,null],[3,"Chunks","","Parallel iterator over immutable non-overlapping chunks of a slice",null,null],[3,"Windows","","Parallel iterator over immutable overlapping windows of a slice",null,null],[3,"IterMut","","Parallel iterator over mutable items in a slice",null,null],[3,"ChunksMut","","Parallel iterator over mutable non-overlapping chunks of a slice",null,null],[3,"Split","","Parallel iterator over slices separated by a predicate",null,null],[3,"SplitMut","","Parallel iterator over mutable slices separated by a predicate",null,null],[8,"ParallelSlice","","Parallel extensions for slices.",null,null],[10,"as_parallel_slice","","Returns a plain slice, which is used to implement the rest of the parallel methods.",59,null],[11,"par_split","","Returns a parallel iterator over subslices separated by elements that match the separator.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"par_windows","","Returns a parallel iterator over all contiguous windows of length `size`. The windows overlap.",59,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"windows"}}],[11,"par_chunks","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks do not overlap.",59,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[8,"ParallelSliceMut","","Parallel extensions for mutable slices.",null,null],[10,"as_parallel_slice_mut","","Returns a plain mutable slice, which is used to implement the rest of the parallel methods.",60,null],[11,"par_split_mut","","Returns a parallel iterator over mutable subslices separated by elements that match the separator.",60,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitmut"}}],[11,"par_chunks_mut","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks are mutable and do not overlap.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[11,"par_sort","","Sorts the slice in parallel.",60,{"inputs":[{"name":"self"}],"output":null}],[11,"par_sort_by","","Sorts the slice in parallel with a comparator function.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_by_key","","Sorts the slice in parallel with a key extraction function.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_unstable","","Sorts the slice in parallel, but may not preserve the order of equal elements.",60,{"inputs":[{"name":"self"}],"output":null}],[11,"par_sort_unstable_by","","Sorts the slice in parallel with a comparator function, but may not preserve the order of equal elements.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_unstable_by_key","","Sorts the slice in parallel with a key extraction function, but may not preserve the order of equal elements.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"drive_unindexed","","",61,null],[11,"opt_len","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",61,null],[11,"len","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",61,null],[11,"drive_unindexed","","",62,null],[11,"opt_len","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",62,null],[11,"len","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",62,null],[11,"drive_unindexed","","",63,null],[11,"opt_len","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",63,null],[11,"len","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",63,null],[11,"drive_unindexed","","",64,null],[11,"opt_len","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",64,null],[11,"len","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",64,null],[11,"drive_unindexed","","",65,null],[11,"opt_len","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",65,null],[11,"len","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",65,null],[11,"drive_unindexed","","",66,null],[11,"drive_unindexed","","",67,null],[0,"str","rayon","This module contains extension methods for `String` that expose parallel iterators, such as `par_split_whitespace()`. You will rarely need to interact with it directly, since if you add `use rayon::prelude::*` to your file, that will include the helper traits defined in this module.",null,null],[3,"Chars","rayon::str","Parallel iterator over the characters of a string",null,null],[3,"Split","","Parallel iterator over substrings separated by a pattern",null,null],[3,"SplitTerminator","","Parallel iterator over substrings separated by a terminator pattern",null,null],[3,"Lines","","Parallel iterator over lines in a string",null,null],[3,"SplitWhitespace","","Parallel iterator over substrings separated by whitespace",null,null],[8,"ParallelString","","Parallel extensions for strings.",null,null],[10,"as_parallel_string","","Returns a plain string slice, which is used to implement the rest of the parallel methods.",68,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"par_chars","","Returns a parallel iterator over the characters of a string.",68,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"par_split","","Returns a parallel iterator over substrings separated by a given character or predicate, similar to `str::split`.",68,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"par_split_terminator","","Returns a parallel iterator over substrings terminated by a given character or predicate, similar to `str::split_terminator`. It's equivalent to `par_split`, except it doesn't produce an empty substring after a trailing terminator.",68,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitterminator"}}],[11,"par_lines","","Returns a parallel iterator over the lines of a string, ending with an optional carriage return and with a newline (`\\r\\n` or just `\\n`). The final line ending is optional, and line endings are not included in the output strings.",68,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"par_split_whitespace","","Returns a parallel iterator over the sub-slices of a string that are separated by any amount of whitespace.",68,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"drive_unindexed","","",69,null],[11,"drive_unindexed","","",70,null],[11,"drive_unindexed","","",71,null],[11,"drive_unindexed","","",72,null],[11,"drive_unindexed","","",73,null],[0,"vec","rayon","This module contains the parallel iterator types for vectors (`Vec<T>`). You will rarely need to interact with it directly unless you have need to name one of those types.",null,null],[3,"IntoIter","rayon::vec","Parallel iterator that moves out of a vector.",null,null],[11,"drive_unindexed","","",74,null],[11,"opt_len","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",74,null],[11,"len","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",74,null],[11,"new","rayon","Creates and return a valid rayon thread pool configuration, but does not initialize it.",75,{"inputs":[],"output":{"name":"configuration"}}],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",75,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"configuration"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",75,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",75,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"stack_size","","Set the stack size of the worker threads",75,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",75,{"inputs":[{"name":"self"}],"output":{"name":"configuration"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",75,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",75,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"default","","",75,{"inputs":[],"output":{"name":"configuration"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",76,null],[11,"new","","Constructs a new thread pool with the given configuration. If the configuration is not valid, returns a suitable `Err` result.  See `InitError` for more details.",76,{"inputs":[{"name":"configuration"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",76,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",76,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",76,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",76,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",76,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",76,null],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to `self` as argument. This can be used to inject new jobs into `self`.",77,null]],"paths":[[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[4,"Either"],[3,"Chain"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[3,"Fold"],[3,"FoldWith"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"Map"],[3,"MapWith"],[3,"Zip"],[3,"Rev"],[3,"MinLen"],[3,"MaxLen"],[3,"Cloned"],[3,"Inspect"],[3,"WhileSome"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelExtend"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"Iter"],[3,"Chunks"],[3,"Windows"],[3,"IterMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[8,"ParallelString"],[3,"Chars"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"IntoIter"],[3,"Configuration"],[3,"ThreadPool"],[3,"Scope"]]};
searchIndex["rayon_core"] = {"doc":"Under construction","items":[[3,"ThreadPool","rayon_core","ThreadPool",null,null],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[3,"Configuration","","Contains the rayon thread pool configuration.",null,null],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",null,null],[5,"current_thread_index","","If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.",null,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[5,"current_thread_has_pending_tasks","","If called from a Rayon worker thread, indicates whether that thread's local deque still has pending tasks. Otherwise, returns `None`. For more information, see [the `ThreadPool::current_thread_has_pending_tasks()` method][m].",null,{"inputs":[],"output":{"generics":["bool"],"name":"option"}}],[5,"join","","The `join` function takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","The `join_context` function is identical to `join`, except the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"inputs":[{"name":"op"}],"output":{"name":"r"}}],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"current_num_threads","","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"initialize","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. In fact, calling `initialize` is not recommended, except for in two scenarios:",null,{"inputs":[{"name":"configuration"}],"output":{"generics":["box"],"name":"result"}}],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to `self` as argument. This can be used to inject new jobs into `self`.",0,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new thread pool with the given configuration. If the configuration is not valid, returns a suitable `Err` result.  See `InitError` for more details.",1,{"inputs":[{"name":"configuration"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",1,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"configuration"}}],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",2,{"inputs":[],"output":{"name":"configuration"}}],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",2,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"stack_size","","Set the stack size of the worker threads",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Scope"],[3,"ThreadPool"],[3,"Configuration"],[3,"FnContext"]]};
searchIndex["rust_webvr"] = {"doc":"","items":[[3,"VRServiceManager","rust_webvr","",null,null],[0,"api","","",null,null],[3,"MockServiceCreator","rust_webvr::api","",null,null],[11,"new","","",0,{"inputs":[],"output":{"generics":["vrservicecreator"],"name":"box"}}],[11,"new_service","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["vrservice"],"name":"box"}}],[11,"drop","rust_webvr","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",1,{"inputs":[],"output":{"name":"vrservicemanager"}}],[11,"register_defaults","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"register_mock","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"register","","",1,{"inputs":[{"name":"self"},{"generics":["vrservice"],"name":"box"}],"output":null}],[11,"initialize_services","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"get_displays","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["vrdisplayptr"],"name":"vec"}}],[11,"get_gamepads","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["vrgamepadptr"],"name":"vec"}}],[11,"get_display","","",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["vrdisplayptr"],"name":"option"}}],[11,"poll_events","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["vrevent"],"name":"vec"}}],[11,"is_initialized","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"MockServiceCreator"],[3,"VRServiceManager"]]};
searchIndex["rust_webvr_api"] = {"doc":"","items":[[0,"utils","rust_webvr_api","",null,null],[5,"new_id","rust_webvr_api::utils","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"timestamp","","",null,{"inputs":[],"output":{"name":"f64"}}],[5,"multiply_matrix","","",null,null],[5,"inverse_matrix","","",null,null],[5,"adjoint_matrix","","",null,null],[5,"determinant4x4","","",null,null],[5,"matrix_to_quat","","",null,null],[5,"copysign","","",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[0,"vr_display","rust_webvr_api","",null,null],[6,"VRDisplayPtr","rust_webvr_api::vr_display","",null,null],[8,"VRDisplay","","",null,null],[10,"id","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"data","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vrdisplaydata"}}],[10,"inmediate_frame_data","","",0,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vrframedata"}}],[10,"synced_frame_data","","",0,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vrframedata"}}],[10,"reset_pose","","",0,{"inputs":[{"name":"self"}],"output":null}],[10,"sync_poses","","",0,{"inputs":[{"name":"self"}],"output":null}],[10,"bind_framebuffer","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"get_framebuffers","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["vrframebuffer"],"name":"vec"}}],[10,"render_layer","","",0,{"inputs":[{"name":"self"},{"name":"vrlayer"}],"output":null}],[10,"submit_frame","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"start_present","","",0,{"inputs":[{"name":"self"},{"generics":["vrframebufferattributes"],"name":"option"}],"output":null}],[11,"stop_present","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"vrdisplay"}],"output":{"name":"bool"}}],[0,"vr_service","rust_webvr_api","",null,null],[8,"VRService","rust_webvr_api::vr_service","",null,null],[10,"initialize","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[10,"fetch_displays","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["vec","string"],"name":"result"}}],[10,"fetch_gamepads","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["vec","string"],"name":"result"}}],[10,"is_available","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"poll_events","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["vrevent"],"name":"vec"}}],[8,"VRServiceCreator","","",null,null],[10,"new_service","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["vrservice"],"name":"box"}}],[0,"vr_display_data","rust_webvr_api","",null,null],[3,"VRDisplayData","rust_webvr_api::vr_display_data","",null,null],[12,"display_id","","",3,null],[12,"display_name","","",3,null],[12,"connected","","",3,null],[12,"capabilities","","",3,null],[12,"stage_parameters","","",3,null],[12,"left_eye_parameters","","",3,null],[12,"right_eye_parameters","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vrdisplaydata"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"vrdisplaydata"}}],[0,"vr_display_capabilities","rust_webvr_api","",null,null],[3,"VRDisplayCapabilities","rust_webvr_api::vr_display_capabilities","",null,null],[12,"has_position","","",4,null],[12,"has_orientation","","",4,null],[12,"has_external_display","","",4,null],[12,"can_present","","",4,null],[12,"max_layers","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"vrdisplaycapabilities"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"vrdisplaycapabilities"}}],[0,"vr_eye","rust_webvr_api","",null,null],[4,"VREye","rust_webvr_api::vr_eye","",null,null],[13,"Left","","",5,null],[13,"Right","","",5,null],[0,"vr_eye_parameters","rust_webvr_api","",null,null],[3,"VREyeParameters","rust_webvr_api::vr_eye_parameters","",null,null],[12,"offset","","",6,null],[12,"render_width","","",6,null],[12,"render_height","","",6,null],[12,"field_of_view","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vreyeparameters"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"vreyeparameters"}}],[0,"vr_framebuffer","rust_webvr_api","",null,null],[3,"VRFramebuffer","rust_webvr_api::vr_framebuffer","",null,null],[12,"eye_index","","",7,null],[12,"attributes","","",7,null],[12,"viewport","","",7,null],[3,"VRFramebufferAttributes","","",null,null],[12,"multiview","","",8,null],[12,"depth","","",8,null],[12,"multisampling","","",8,null],[3,"VRViewport","","",null,null],[12,"x","","",9,null],[12,"y","","",9,null],[12,"width","","",9,null],[12,"height","","",9,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vrframebuffer"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vrframebufferattributes"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"vrframebufferattributes"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vrviewport"}}],[11,"new","","",9,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[0,"vr_frame_data","rust_webvr_api","",null,null],[3,"VRFrameData","rust_webvr_api::vr_frame_data","",null,null],[12,"timestamp","","",10,null],[12,"left_projection_matrix","","",10,null],[12,"left_view_matrix","","",10,null],[12,"right_projection_matrix","","",10,null],[12,"right_view_matrix","","",10,null],[12,"pose","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vrframedata"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"vrframedata"}}],[11,"to_bytes","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from_bytes","","",10,null],[0,"vr_layer","rust_webvr_api","",null,null],[3,"VRLayer","rust_webvr_api::vr_layer","",null,null],[12,"texture_id","","",11,null],[12,"left_bounds","","",11,null],[12,"right_bounds","","",11,null],[12,"texture_size","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vrlayer"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"vrlayer"}}],[0,"vr_pose","rust_webvr_api","",null,null],[3,"VRPose","rust_webvr_api::vr_pose","",null,null],[12,"position","","",12,null],[12,"linear_velocity","","",12,null],[12,"linear_acceleration","","",12,null],[12,"orientation","","",12,null],[12,"angular_velocity","","",12,null],[12,"angular_acceleration","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"vrpose"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"vrpose"}}],[0,"vr_stage_parameters","rust_webvr_api","",null,null],[3,"VRStageParameters","rust_webvr_api::vr_stage_parameters","",null,null],[12,"sitting_to_standing_transform","","",13,null],[12,"size_x","","",13,null],[12,"size_z","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vrstageparameters"}}],[0,"vr_event","rust_webvr_api","",null,null],[4,"VREvent","rust_webvr_api::vr_event","",null,null],[13,"Display","","",14,null],[13,"Gamepad","","",14,null],[4,"VRDisplayEventReason","","",null,null],[13,"Navigation","","",15,null],[13,"Mounted","","",15,null],[13,"Unmounted","","",15,null],[4,"VRDisplayEvent","","",null,null],[13,"Connect","","",16,null],[13,"Disconnect","","",16,null],[13,"Activate","","",16,null],[13,"Deactivate","","",16,null],[13,"Change","","",16,null],[13,"Blur","","",16,null],[13,"Focus","","",16,null],[13,"PresentChange","","",16,null],[13,"Pause","","",16,null],[13,"Resume","","",16,null],[13,"Exit","","",16,null],[4,"VRGamepadEvent","","",null,null],[13,"Connect","","",17,null],[13,"Disconnect","","",17,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"vrevent"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"vrdisplayeventreason"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vrdisplayevent"}}],[11,"into","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vrevent"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"vrgamepadevent"}}],[11,"into","","",17,{"inputs":[{"name":"self"}],"output":{"name":"vrevent"}}],[0,"vr_field_view","rust_webvr_api","",null,null],[3,"VRFieldOfView","rust_webvr_api::vr_field_view","",null,null],[12,"up_degrees","","",18,null],[12,"right_degrees","","",18,null],[12,"down_degrees","","",18,null],[12,"left_degrees","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vrfieldofview"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"vrfieldofview"}}],[0,"vr_gamepad","rust_webvr_api","",null,null],[3,"VRGamepadState","rust_webvr_api::vr_gamepad","",null,null],[12,"gamepad_id","","",19,null],[12,"connected","","",19,null],[12,"timestamp","","",19,null],[12,"axes","","",19,null],[12,"buttons","","",19,null],[12,"pose","","",19,null],[3,"VRGamepadData","","",null,null],[12,"display_id","","",20,null],[12,"name","","",20,null],[12,"hand","","",20,null],[3,"VRGamepadButton","","",null,null],[12,"pressed","","",21,null],[12,"touched","","",21,null],[4,"VRGamepadHand","","",null,null],[13,"Unknown","","",22,null],[13,"Left","","",22,null],[13,"Right","","",22,null],[6,"VRGamepadPtr","","",null,null],[8,"VRGamepad","","",null,null],[10,"id","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"data","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vrgamepaddata"}}],[10,"state","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vrgamepadstate"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"vrgamepadstate"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"vrgamepadstate"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vrgamepadhand"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vrgamepaddata"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"vrgamepaddata"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vrgamepadbutton"}}],[11,"new","","",21,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}]],"paths":[[8,"VRDisplay"],[8,"VRService"],[8,"VRServiceCreator"],[3,"VRDisplayData"],[3,"VRDisplayCapabilities"],[4,"VREye"],[3,"VREyeParameters"],[3,"VRFramebuffer"],[3,"VRFramebufferAttributes"],[3,"VRViewport"],[3,"VRFrameData"],[3,"VRLayer"],[3,"VRPose"],[3,"VRStageParameters"],[4,"VREvent"],[4,"VRDisplayEventReason"],[4,"VRDisplayEvent"],[4,"VRGamepadEvent"],[3,"VRFieldOfView"],[3,"VRGamepadState"],[3,"VRGamepadData"],[3,"VRGamepadButton"],[4,"VRGamepadHand"],[8,"VRGamepad"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"generics":["vec","frombase64error"],"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"generics":["vec","fromhexerror"],"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"generics":["buildererror"],"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"generics":["buildererror"],"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"generics":["stackelement"],"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["jsonevent"],"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["json","buildererror"],"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["json","parsererror"],"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["vec"],"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["scoped_threadpool"] = {"doc":"This crate provides a stable, safe and scoped threadpool.","items":[[3,"Pool","scoped_threadpool","A threadpool that acts as a handle to a number of threads spawned at construction.",null,null],[3,"Scope","","Handle to the scope during which the threadpool is borrowed.",null,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Construct a threadpool with the given number of threads. Minimum value is `1`.",0,{"inputs":[{"name":"u32"}],"output":{"name":"pool"}}],[11,"scoped","","Borrows the pool and allows executing jobs on other threads during that scope via the argument of the closure.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"thread_count","","Returns the number of threads inside this pool.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"execute","","Execute a job on the threadpool.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"join_all","","Blocks until all currently queued jobs have run to completion.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Pool"],[3,"Scope"]]};
searchIndex["scopeguard"] = {"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",null,null],[4,"Always","","Always run on scope exit.",null,null],[4,"OnUnwind","","Run on scope exit through unwinding.",null,null],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"generics":["always"],"name":"scopeguard"}}],[5,"guard_on_unwind","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"generics":["onunwind"],"name":"scopeguard"}}],[8,"Strategy","","",null,null],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"should_run","","",1,{"inputs":[],"output":{"name":"bool"}}],[11,"should_run","","",2,{"inputs":[],"output":{"name":"bool"}}],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",3,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"scopeguard"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"defer","","Macro to create a `ScopeGuard` (always run).",null,null],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",null,null]],"paths":[[8,"Strategy"],[4,"Always"],[4,"OnUnwind"],[3,"ScopeGuard"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","",null,null],[12,"ident","","",1,null],[12,"vis","","",1,null],[12,"attrs","","",1,null],[12,"ty","","",1,null],[3,"Variant","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"data","","",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Arm","","An arm of a 'match'.",null,null],[12,"attrs","","",3,null],[12,"pats","","",3,null],[12,"guard","","",3,null],[12,"body","","",3,null],[3,"Block","","A Block (`{ .. }`).",null,null],[12,"stmts","","Statements in a block",4,null],[3,"Expr","","",null,null],[12,"node","","",5,null],[12,"attrs","","",5,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"ident","","The identifier for the field",6,null],[12,"pat","","The pattern the field is destructured to",6,null],[12,"is_shorthand","","",6,null],[3,"FieldValue","","",null,null],[12,"ident","","",7,null],[12,"expr","","",7,null],[12,"is_shorthand","","",7,null],[3,"Local","","Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`",null,null],[12,"pat","","",8,null],[12,"ty","","",8,null],[12,"init","","Initializer expression to set the value, if any",8,null],[12,"attrs","","",8,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",9,null],[12,"ty_params","","",9,null],[12,"where_clause","","",9,null],[3,"Lifetime","","",null,null],[12,"ident","","",10,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",11,null],[12,"lifetime","","",11,null],[12,"bounds","","",11,null],[3,"TyParam","","",null,null],[12,"attrs","","",12,null],[12,"ident","","",12,null],[12,"bounds","","",12,null],[12,"default","","",12,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",13,null],[12,"bounded_ty","","The type being bounded",13,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",13,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",14,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",15,null],[12,"bounds","","",15,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"FnDecl","","Header (not the body) of a function declaration.",null,null],[12,"inputs","","",16,null],[12,"output","","",16,null],[12,"variadic","","",16,null],[3,"ForeignItem","","",null,null],[12,"ident","","",17,null],[12,"attrs","","",17,null],[12,"node","","",17,null],[12,"vis","","",17,null],[3,"ForeignMod","","Foreign module declaration.",null,null],[12,"abi","","",18,null],[12,"items","","",18,null],[3,"ImplItem","","",null,null],[12,"ident","","",19,null],[12,"vis","","",19,null],[12,"defaultness","","",19,null],[12,"attrs","","",19,null],[12,"node","","",19,null],[3,"Item","","An item",null,null],[12,"ident","","",20,null],[12,"vis","","",20,null],[12,"attrs","","",20,null],[12,"node","","",20,null],[3,"MethodSig","","Represents a method's signature in a trait declaration, or in an implementation.",null,null],[12,"unsafety","","",21,null],[12,"constness","","",21,null],[12,"abi","","",21,null],[12,"decl","","",21,null],[12,"generics","","",21,null],[3,"PathListItem","","",null,null],[12,"name","","",22,null],[12,"rename","","renamed in list, e.g. `use foo::{bar as baz};`",22,null],[3,"TraitItem","","Represents an item declaration within a trait declaration, possibly including a default implementation. A trait item is either required (meaning it doesn't have an implementation, just a signature) or provided (meaning it has a default implementation).",null,null],[12,"ident","","",23,null],[12,"attrs","","",23,null],[12,"node","","",23,null],[3,"Crate","","",null,null],[12,"shebang","","",24,null],[12,"attrs","","",24,null],[12,"items","","",24,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",25,null],[12,"tts","","The delimited sequence of token trees",25,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",26,null],[12,"tts","","",26,null],[3,"MacroInput","","",null,null],[12,"ident","","",27,null],[12,"vis","","",27,null],[12,"attrs","","",27,null],[12,"generics","","",27,null],[12,"body","","",27,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",28,null],[12,"types","","The type parameters for this path segment, if present.",28,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",28,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",29,null],[12,"ty","","",29,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",30,null],[12,"abi","","",30,null],[12,"lifetimes","","",30,null],[12,"inputs","","",30,null],[12,"output","","",30,null],[12,"variadic","","",30,null],[3,"MutTy","","",null,null],[12,"ty","","",31,null],[12,"mutability","","",31,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",32,null],[12,"output","","`C`",32,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","",33,null],[12,"segments","","",33,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","",34,null],[12,"parameters","","",34,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",35,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",35,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",36,null],[12,"position","","",36,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",37,null],[12,"ty","","",37,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","",38,null],[13,"Inner","","",38,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",39,null],[13,"List","","List meta item.",39,null],[13,"NameValue","","Name value meta item.",39,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full MetaItem, for recursive meta items.",40,null],[13,"Literal","","A literal.",40,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",41,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",41,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",41,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",41,null],[13,"Cast","","A cast (`foo as f64`)",41,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",41,null],[13,"Index","","An indexing operation (`foo[2]`)",41,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",41,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",41,null],[4,"VariantData","","",null,null],[13,"Struct","","",42,null],[13,"Tuple","","",42,null],[13,"Unit","","",42,null],[4,"Visibility","","",null,null],[13,"Public","","",43,null],[13,"Crate","","",43,null],[13,"Restricted","","",43,null],[13,"Inherited","","",43,null],[4,"BindingMode","","",null,null],[13,"ByRef","","",44,null],[13,"ByValue","","",44,null],[4,"BlockCheckMode","","",null,null],[13,"Default","","",45,null],[13,"Unsafe","","",45,null],[4,"CaptureBy","","A capture clause",null,null],[13,"Value","","",46,null],[13,"Ref","","",46,null],[4,"ExprKind","","",null,null],[13,"Box","","A `box x` expression.",47,null],[13,"InPlace","","First expr is the place; second expr is the value.",47,null],[13,"Vec","","An array (`[a, b, c, d]`)",47,null],[13,"Call","","A function call",47,null],[13,"MethodCall","","A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)",47,null],[13,"Tup","","A tuple (`(a, b, c, d)`)",47,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",47,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",47,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",47,null],[13,"Cast","","A cast (`foo as f64`)",47,null],[13,"Type","","Type ascription (`foo: f64`)",47,null],[13,"If","","An `if` block, with an optional else block",47,null],[13,"IfLet","","An `if let` expression with an optional else block",47,null],[13,"While","","A while loop, with an optional label",47,null],[13,"WhileLet","","A while-let loop, with an optional label",47,null],[13,"ForLoop","","A for loop, with an optional label",47,null],[13,"Loop","","Conditionless loop (can be exited with break, continue, or return)",47,null],[13,"Match","","A `match` block.",47,null],[13,"Closure","","A closure (for example, `move |a, b, c| {a + b + c}`)",47,null],[13,"Block","","A block (`{ ... }` or `unsafe { ... }`)",47,null],[13,"Assign","","An assignment (`a = foo()`)",47,null],[13,"AssignOp","","An assignment with an operator",47,null],[13,"Field","","Access of a named struct field (`obj.foo`)",47,null],[13,"TupField","","Access of an unnamed field of a struct or tuple-struct",47,null],[13,"Index","","An indexing operation (`foo[2]`)",47,null],[13,"Range","","A range (`1..2`, `1..`, `..2`, `1...2`, `1...`, `...2`)",47,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",47,null],[13,"AddrOf","","A referencing operation (`&a` or `&mut a`)",47,null],[13,"Break","","A `break`, with an optional label to break",47,null],[13,"Continue","","A `continue`, with an optional label",47,null],[13,"Ret","","A `return`, with an optional value to be returned",47,null],[13,"Mac","","A macro invocation; pre-expansion",47,null],[13,"Struct","","A struct literal expression.",47,null],[13,"Repeat","","An array literal constructed from one repeated element.",47,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",47,null],[13,"Try","","`expr?`",47,null],[4,"MacStmtStyle","","",null,null],[13,"Semicolon","","The macro statement had a trailing semicolon, e.g. `foo! { ... };` `foo!(...);`, `foo![...];`",48,null],[13,"Braces","","The macro statement had braces; e.g. foo! { ... }",48,null],[13,"NoBraces","","The macro statement had parentheses or brackets and no semicolon; e.g. `foo!(...)`. All of these will end up being converted into macro expressions.",48,null],[4,"Pat","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",49,null],[13,"Ident","","A `Pat::Ident` may either be a new bound variable (`ref mut binding @ OPT_SUBPATTERN`), or a unit struct/variant pattern, or a const pattern (in the last two cases the third field must be `None`). Disambiguation cannot be done with parser alone, so it happens during name resolution.",49,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`. The `bool` is `true` in the presence of a `..`.",49,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, .., z)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",49,null],[13,"Path","","A possibly qualified path pattern. Unquailfied path patterns `A::B::C` can legally refer to variants, structs, constants or associated constants. Quailfied path patterns `<A>::B::C`/`<A as Trait>::B::C` can only legally refer to associated constants.",49,null],[13,"Tuple","","A tuple pattern `(a, b)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",49,null],[13,"Box","","A `box` pattern",49,null],[13,"Ref","","A reference pattern, e.g. `&mut (a, b)`",49,null],[13,"Lit","","A literal",49,null],[13,"Range","","A range pattern, e.g. `1...2`",49,null],[13,"Slice","","`[a, b, ..i, y, z]` is represented as: `Pat::Slice(box [a, b], Some(i), box [y, z])`",49,null],[13,"Mac","","A macro pattern; pre-expansion",49,null],[4,"RangeLimits","","Limit types of a range (inclusive or exclusive)",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end",50,null],[13,"Closed","","Inclusive at the beginning and end",50,null],[4,"Stmt","","",null,null],[13,"Local","","A local (let) binding.",51,null],[13,"Item","","An item definition.",51,null],[13,"Expr","","Expr without trailing semi-colon.",51,null],[13,"Semi","","",51,null],[13,"Mac","","",51,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",52,null],[13,"Maybe","","",52,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",53,null],[13,"Region","","",53,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",54,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",54,null],[4,"Constness","","",null,null],[13,"Const","","",55,null],[13,"NotConst","","",55,null],[4,"Defaultness","","",null,null],[13,"Default","","",56,null],[13,"Final","","",56,null],[4,"FnArg","","An argument in a function header.",null,null],[13,"SelfRef","","",57,null],[13,"SelfValue","","",57,null],[13,"Captured","","",57,null],[13,"Ignored","","",57,null],[4,"ForeignItemKind","","An item within an `extern` block",null,null],[13,"Fn","","A foreign function",58,null],[13,"Static","","A foreign static item (`static ext: u8`)",58,null],[4,"ImplItemKind","","",null,null],[13,"Const","","",59,null],[13,"Method","","",59,null],[13,"Type","","",59,null],[13,"Macro","","",59,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",60,null],[13,"Negative","","`impl !Trait for Type`",60,null],[4,"ItemKind","","",null,null],[13,"ExternCrate","","An`extern crate` item, with optional original crate name.",61,null],[13,"Use","","A use declaration (`use` or `pub use`) item.",61,null],[13,"Static","","A static item (`static` or `pub static`).",61,null],[13,"Const","","A constant item (`const` or `pub const`).",61,null],[13,"Fn","","A function declaration (`fn` or `pub fn`).",61,null],[13,"Mod","","A module declaration (`mod` or `pub mod`).",61,null],[13,"ForeignMod","","An external module (`extern` or `pub extern`).",61,null],[13,"Ty","","A type alias (`type` or `pub type`).",61,null],[13,"Enum","","An enum definition (`enum` or `pub enum`).",61,null],[13,"Struct","","A struct definition (`struct` or `pub struct`).",61,null],[13,"Union","","A union definition (`union` or `pub union`).",61,null],[13,"Trait","","A Trait declaration (`trait` or `pub trait`).",61,null],[13,"DefaultImpl","","Default trait implementation.",61,null],[13,"Impl","","An implementation.",61,null],[13,"Mac","","A macro invocation (which includes macro definition).",61,null],[4,"TraitItemKind","","",null,null],[13,"Const","","",62,null],[13,"Method","","",62,null],[13,"Type","","",62,null],[13,"Macro","","",62,null],[4,"ViewPath","","",null,null],[13,"Simple","","`foo::bar::baz as quux`",63,null],[13,"Glob","","`foo::bar::*`",63,null],[13,"List","","`foo::bar::{a, b, c}`",63,null],[4,"FloatTy","","",null,null],[13,"F32","","",64,null],[13,"F64","","",64,null],[13,"Unsuffixed","","",64,null],[4,"IntTy","","",null,null],[13,"Isize","","",65,null],[13,"I8","","",65,null],[13,"I16","","",65,null],[13,"I32","","",65,null],[13,"I64","","",65,null],[13,"Usize","","",65,null],[13,"U8","","",65,null],[13,"U16","","",65,null],[13,"U32","","",65,null],[13,"U64","","",65,null],[13,"Unsuffixed","","",65,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",66,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",66,null],[13,"Byte","","A byte char (`b'f'`)",66,null],[13,"Char","","A character literal (`'a'`)",66,null],[13,"Int","","An integer literal (`1`)",66,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",66,null],[13,"Bool","","A boolean literal",66,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",67,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",67,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",68,null],[13,"Minus","","",68,null],[13,"Star","","",68,null],[13,"Slash","","",68,null],[13,"Percent","","",68,null],[13,"Caret","","",68,null],[13,"And","","",68,null],[13,"Or","","",68,null],[13,"Shl","","",68,null],[13,"Shr","","",68,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",69,null],[13,"Bracket","","A square bracket: `[` or `]`",69,null],[13,"Brace","","A curly brace: `{` or `}`",69,null],[4,"Token","","",null,null],[13,"Eq","","",70,null],[13,"Lt","","",70,null],[13,"Le","","",70,null],[13,"EqEq","","",70,null],[13,"Ne","","",70,null],[13,"Ge","","",70,null],[13,"Gt","","",70,null],[13,"AndAnd","","",70,null],[13,"OrOr","","",70,null],[13,"Not","","",70,null],[13,"Tilde","","",70,null],[13,"BinOp","","",70,null],[13,"BinOpEq","","",70,null],[13,"At","","",70,null],[13,"Dot","","",70,null],[13,"DotDot","","",70,null],[13,"DotDotDot","","",70,null],[13,"Comma","","",70,null],[13,"Semi","","",70,null],[13,"Colon","","",70,null],[13,"ModSep","","",70,null],[13,"RArrow","","",70,null],[13,"LArrow","","",70,null],[13,"FatArrow","","",70,null],[13,"Pound","","",70,null],[13,"Dollar","","",70,null],[13,"Question","","",70,null],[13,"Literal","","",70,null],[13,"Ident","","",70,null],[13,"Underscore","","",70,null],[13,"Lifetime","","",70,null],[13,"DocComment","","",70,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",71,null],[13,"Delimited","","A delimited sequence of token trees",71,null],[4,"Body","","",null,null],[13,"Enum","","",72,null],[13,"Struct","","",72,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",73,null],[13,"Sub","","The `-` operator (subtraction)",73,null],[13,"Mul","","The `*` operator (multiplication)",73,null],[13,"Div","","The `/` operator (division)",73,null],[13,"Rem","","The `%` operator (modulus)",73,null],[13,"And","","The `&&` operator (logical and)",73,null],[13,"Or","","The `||` operator (logical or)",73,null],[13,"BitXor","","The `^` operator (bitwise xor)",73,null],[13,"BitAnd","","The `&` operator (bitwise and)",73,null],[13,"BitOr","","The `|` operator (bitwise or)",73,null],[13,"Shl","","The `<<` operator (shift left)",73,null],[13,"Shr","","The `>>` operator (shift right)",73,null],[13,"Eq","","The `==` operator (equality)",73,null],[13,"Lt","","The `<` operator (less than)",73,null],[13,"Le","","The `<=` operator (less than or equal to)",73,null],[13,"Ne","","The `!=` operator (not equal to)",73,null],[13,"Ge","","The `>=` operator (greater than or equal to)",73,null],[13,"Gt","","The `>` operator (greater than)",73,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",74,null],[13,"Not","","The `!` operator for logical inversion",74,null],[13,"Neg","","The `-` operator for negation",74,null],[4,"Abi","","",null,null],[13,"Named","","",75,null],[13,"Rust","","",75,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",76,null],[13,"Ty","","Everything else",76,null],[4,"Mutability","","",null,null],[13,"Mutable","","",77,null],[13,"Immutable","","",77,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",78,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",78,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",79,null],[13,"Array","","A fixed length array (`[T; n]`)",79,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",79,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",79,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",79,null],[13,"Never","","The never type (`!`)",79,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",79,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",79,null],[13,"ObjectSum","","Something like `A+B`. Note that `B` must always be a path.",79,null],[13,"PolyTraitRef","","A type like `for<'a> Foo<&'a Bar>`",79,null],[13,"ImplTrait","","An `impl TraitA+TraitB` type.",79,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",79,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",79,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",80,null],[13,"Normal","","",80,null],[5,"parse_macro_input","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["macroinput","string"],"name":"result"}}],[5,"parse_crate","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["crate","string"],"name":"result"}}],[5,"parse_item","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["item","string"],"name":"result"}}],[5,"parse_items","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","string"],"name":"result"}}],[5,"parse_expr","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["expr","string"],"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["ty","string"],"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["path","string"],"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["whereclause","string"],"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","string"],"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["ident","string"],"name":"result"}}],[0,"aster","","",null,null],[5,"id","syn::aster","",null,{"inputs":[{"name":"i"}],"output":{"name":"ident"}}],[5,"from_generics","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"genericsbuilder"}}],[5,"where_predicate","","",null,{"inputs":[],"output":{"name":"wherepredicatebuilder"}}],[5,"ty","","",null,{"inputs":[],"output":{"name":"tybuilder"}}],[5,"path","","",null,{"inputs":[],"output":{"name":"pathbuilder"}}],[0,"generics","","",null,null],[3,"GenericsBuilder","syn::aster::generics","",null,null],[11,"new","","",81,{"inputs":[],"output":{"name":"self"}}],[11,"from_generics","","",81,{"inputs":[{"name":"generics"}],"output":{"name":"self"}}],[11,"with_callback","","",81,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"from_generics_with_callback","","",81,{"inputs":[{"name":"generics"},{"name":"f"}],"output":{"name":"self"}}],[11,"with","","",81,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",81,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime_names","","",81,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime","","",81,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"lifetime_name","","",81,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"lifetime","","",81,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_ty_params","","",81,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty_param_ids","","",81,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty_param","","",81,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"ty_param_id","","",81,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"ty_param","","",81,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"typarambuilder"}}],[11,"with_predicates","","",81,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_predicate","","",81,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"self"}}],[11,"predicate","","",81,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicatebuilder"}}],[11,"add_lifetime_bound","","",81,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"add_ty_param_bound","","",81,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"strip_bounds","","",81,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_lifetimes","","",81,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_ty_params","","",81,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_predicates","","",81,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"build","","",81,null],[11,"invoke","","",81,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",81,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"invoke","","",81,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"self"}}],[0,"ident","syn::aster","",null,null],[8,"ToIdent","syn::aster::ident","",null,null],[10,"to_ident","","",82,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"to_ident","syn","",83,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[0,"invoke","syn::aster","",null,null],[3,"Identity","syn::aster::invoke","",null,null],[8,"Invoke","","",null,null],[16,"Result","","",84,null],[10,"invoke","","",84,null],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"identity"}}],[11,"invoke","","",85,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"a"}}],[0,"lifetime","syn::aster","",null,null],[3,"LifetimeDefBuilder","syn::aster::lifetime","",null,null],[8,"IntoLifetime","","",null,null],[10,"into_lifetime","","",86,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[8,"IntoLifetimeDef","","",null,null],[10,"into_lifetime_def","","",87,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"into_lifetime","syn","",10,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"into_lifetime_def","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"into_lifetime_def","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"new","syn::aster::lifetime","",88,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"with_callback","","",88,{"inputs":[{"name":"n"},{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",88,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"build","","",88,null],[0,"path","syn::aster","",null,null],[3,"PathBuilder","syn::aster::path","",null,null],[3,"PathSegmentsBuilder","","",null,null],[3,"PathSegmentBuilder","","",null,null],[3,"TypeBindingBuilder","","",null,null],[3,"PathSegmentReturnBuilder","","",null,null],[8,"IntoPath","","",null,null],[10,"into_path","","",89,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","syn","",33,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","","",83,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"new","syn::aster::path","",90,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",90,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",90,null],[11,"global","","",90,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ids","","",90,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"id","","",90,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"segment","","",90,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["pathsegmentsbuilder"],"name":"pathsegmentbuilder"}}],[11,"ids","","",91,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"id","","",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"segment","","",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"build","","",91,null],[11,"invoke","","",91,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"self"}}],[11,"with_callback","","",92,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"with_generics","","",92,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",92,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime","","",92,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"lifetime","","",92,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"with_tys","","",92,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty","","",92,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"ty","","",92,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"with_binding","","",92,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"self"}}],[11,"binding","","",92,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["typebindingbuilder"],"name":"tybuilder"}}],[11,"no_return","","",92,null],[11,"return_","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["pathsegmentreturnbuilder"],"name":"tybuilder"}}],[11,"build_return","","",92,null],[11,"build","","",92,null],[11,"invoke","","",92,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"invoke","","",93,null],[11,"invoke","","",94,null],[0,"qpath","syn::aster","",null,null],[3,"QPathBuilder","syn::aster::qpath","",null,null],[3,"QPathTyBuilder","","",null,null],[3,"QPathQSelfBuilder","","",null,null],[11,"new","","",95,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","Construct a `QPathBuilder` that will call the `callback` with a constructed `QSelf` and `Path`.",95,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_ty","","Build a qualified path first by starting with a type builder.",95,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"qpathtybuilder"}}],[11,"ty","","Build a qualified path first by starting with a type builder.",95,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build","","Build a qualified path with a concrete type and path.",95,null],[11,"invoke","","",95,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"qpathtybuilder"}}],[11,"as_","","Build a qualified path with a path builder.",96,{"inputs":[{"name":"self"}],"output":{"name":"pathbuilder"}}],[11,"id","","",96,null],[11,"segment","","",96,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["qpathqselfbuilder"],"name":"pathsegmentbuilder"}}],[11,"invoke","","",96,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"qpathqselfbuilder"}}],[11,"id","","",97,null],[11,"segment","","",97,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["qpathqselfbuilder"],"name":"pathsegmentbuilder"}}],[11,"invoke","","",97,null],[0,"ty","syn::aster","",null,null],[3,"TyBuilder","syn::aster::ty","",null,null],[3,"TyPathBuilder","","",null,null],[3,"TyQPathBuilder","","",null,null],[3,"TySliceBuilder","","",null,null],[3,"TyRefBuilder","","",null,null],[3,"TyOptionBuilder","","",null,null],[3,"TyResultOkBuilder","","",null,null],[3,"TyResultErrBuilder","","",null,null],[3,"TyPhantomDataBuilder","","",null,null],[3,"TyBoxBuilder","","",null,null],[3,"TyIteratorBuilder","","",null,null],[3,"TyObjectSumBuilder","","",null,null],[3,"TyObjectSumTyBuilder","","",null,null],[3,"TyImplTraitTyBuilder","","",null,null],[3,"TyTupleBuilder","","",null,null],[11,"new","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",98,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",98,null],[11,"id","","",98,null],[11,"build_path","","",98,null],[11,"build_qpath","","",98,null],[11,"path","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["typathbuilder"],"name":"pathbuilder"}}],[11,"qpath","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["tyqpathbuilder"],"name":"qpathbuilder"}}],[11,"isize","","",98,null],[11,"i8","","",98,null],[11,"i16","","",98,null],[11,"i32","","",98,null],[11,"i64","","",98,null],[11,"usize","","",98,null],[11,"u8","","",98,null],[11,"u16","","",98,null],[11,"u32","","",98,null],[11,"u64","","",98,null],[11,"f32","","",98,null],[11,"f64","","",98,null],[11,"bool","","",98,null],[11,"unit","","",98,null],[11,"tuple","","",98,{"inputs":[{"name":"self"}],"output":{"name":"tytuplebuilder"}}],[11,"build_slice","","",98,null],[11,"slice","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["tyslicebuilder"],"name":"tybuilder"}}],[11,"ref_","","",98,{"inputs":[{"name":"self"}],"output":{"name":"tyrefbuilder"}}],[11,"never","","",98,null],[11,"infer","","",98,null],[11,"option","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["tyoptionbuilder"],"name":"tybuilder"}}],[11,"result","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["tyresultokbuilder"],"name":"tybuilder"}}],[11,"phantom_data","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["typhantomdatabuilder"],"name":"tybuilder"}}],[11,"box_","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["tyboxbuilder"],"name":"tybuilder"}}],[11,"iterator","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["tyiteratorbuilder"],"name":"tybuilder"}}],[11,"object_sum","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["tyobjectsumbuilder"],"name":"tybuilder"}}],[11,"impl_trait","","",98,{"inputs":[{"name":"self"}],"output":{"name":"tyimpltraittybuilder"}}],[11,"invoke","","",99,null],[11,"invoke","","",100,null],[11,"invoke","","",101,null],[11,"mut_","","",102,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"lifetime","","",102,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"build_ty","","",102,null],[11,"ty","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",102,null],[11,"invoke","","",103,null],[11,"invoke","","",104,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"generics":["tyresulterrbuilder"],"name":"tybuilder"}}],[11,"invoke","","",105,null],[11,"invoke","","",106,null],[11,"invoke","","",107,null],[11,"invoke","","",108,null],[11,"invoke","","",109,null],[11,"with_bounds","","",110,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_bound","","",110,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",110,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_generics","","",110,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",110,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"lifetime","","",110,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",110,null],[11,"invoke","","",110,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"with_bounds","","",111,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_bound","","",111,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",111,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_generics","","",111,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",111,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"lifetime","","",111,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",111,null],[11,"invoke","","",111,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"with_tys","","",112,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty","","",112,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"ty","","",112,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build","","",112,null],[11,"invoke","","",112,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[0,"ty_param","syn::aster","",null,null],[3,"TyParamBuilder","syn::aster::ty_param","",null,null],[3,"TyParamBoundBuilder","","",null,null],[3,"TraitTyParamBoundBuilder","","",null,null],[3,"PolyTraitRefBuilder","","",null,null],[11,"new","","",113,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_ty_param","","",113,{"inputs":[{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_callback","","",113,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"from_ty_param_with_callback","","",113,{"inputs":[{"name":"f"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_default","","",113,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"default","","",113,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"with_bound","","",113,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",113,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_trait_bound","","",113,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"self"}}],[11,"trait_bound","","",113,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime_bound","","",113,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",113,null],[11,"invoke","","",113,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"invoke","","",113,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"invoke","","",113,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"self"}}],[11,"new","","",114,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",114,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build_trait","","",114,null],[11,"trait_","","",114,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["traittyparamboundbuilder"],"name":"polytraitrefbuilder"}}],[11,"maybe_trait","","",114,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["traittyparamboundbuilder"],"name":"polytraitrefbuilder"}}],[11,"iterator","","",114,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"generics":["traittyparamboundbuilder"],"name":"polytraitrefbuilder"}}],[11,"lifetime","","",114,null],[11,"invoke","","",115,null],[11,"with_callback","","",116,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"self"}}],[11,"with_lifetime","","",116,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"lifetime","","",116,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"build","","",116,null],[11,"invoke","","",116,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[0,"where_predicate","syn::aster","",null,null],[3,"WherePredicateBuilder","syn::aster::where_predicate","",null,null],[3,"WhereBoundPredicateBuilder","","",null,null],[3,"WhereBoundPredicateTyBuilder","","",null,null],[3,"WhereBoundPredicateTyBoundsBuilder","","",null,null],[3,"WhereRegionPredicateBuilder","","",null,null],[11,"new","","",117,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",117,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",117,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"lifetime","","",117,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"whereregionpredicatebuilder"}}],[11,"invoke","","",117,null],[11,"invoke","","",118,null],[11,"with_for_lifetime","","",119,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"for_lifetime","","",119,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_bound","","",119,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"whereboundpredicatetyboundsbuilder"}}],[11,"bound","","",119,{"inputs":[{"name":"self"}],"output":{"generics":["whereboundpredicatetyboundsbuilder"],"name":"typaramboundbuilder"}}],[11,"trait_","","",119,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["traittyparamboundbuilder"],"name":"polytraitrefbuilder"}}],[11,"lifetime","","",119,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"whereboundpredicatetyboundsbuilder"}}],[11,"invoke","","",119,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",119,null],[11,"with_for_lifetime","","",120,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"for_lifetime","","",120,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_bound","","",120,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",120,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"trait_","","",120,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["traittyparamboundbuilder"],"name":"polytraitrefbuilder"}}],[11,"lifetime","","",120,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",120,null],[11,"invoke","","",120,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",120,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",121,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",121,null],[11,"to_tokens","syn","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",40,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"name","","",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"fields","","",42,null],[11,"fields_mut","","",42,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",49,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",45,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"from","","",5,{"inputs":[{"name":"exprkind"}],"output":{"name":"expr"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"exprkind"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fieldvalue"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"blockcheckmode"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"stmt"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"macstmtstyle"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"arm"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"captureby"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"captureby"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"rangelimits"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fieldpat"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bindingmode"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",122,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",123,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",14,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",9,null],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",9,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"new","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"new","","",11,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",14,null],[11,"none","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",54,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"to_tokens","","",83,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",83,null],[11,"new","","",83,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",83,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",83,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",83,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",83,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",83,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",63,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",60,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"itemkind"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"hash","","",61,null],[11,"from","","",20,{"inputs":[{"name":"macroinput"}],"output":{"name":"item"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"viewpath"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"viewpath"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"viewpath"}],"output":{"name":"bool"}}],[11,"hash","","",63,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"pathlistitem"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"pathlistitem"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"pathlistitem"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"hash","","",55,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"defaultness"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"hash","","",56,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"foreignmod"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemkind"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"hash","","",58,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"traititemkind"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"hash","","",62,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"implpolarity"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"hash","","",60,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"implitemkind"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"hash","","",59,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"methodsig"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"fnarg"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"bool"}}],[11,"hash","","",57,null],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"to_tokens","","",66,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",66,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",67,null],[11,"from","","",66,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",66,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",66,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",66,null],[11,"from","","",66,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",66,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",65,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",64,null],[11,"from","","",66,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",66,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",66,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",66,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",66,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",66,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",66,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",66,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",66,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",66,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",66,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",66,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"to_tokens","","",26,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",71,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",70,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",68,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",71,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",70,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",68,null],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",69,null],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"macroinput"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"macroinput"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"macroinput"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",72,null],[11,"op","","",73,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",73,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",74,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",74,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",73,null],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",74,null],[11,"to_tokens","","",79,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",77,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",34,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",78,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",28,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",80,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",75,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",79,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",77,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"from","","",33,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"from","","",34,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",78,null],[11,"none","","",78,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",28,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",75,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",76,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_macro_input","","",null,{"inputs":[{"name":"v"},{"name":"macroinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",124,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_macro_input","","",124,{"inputs":[{"name":"self"},{"name":"macroinput"}],"output":null}],[11,"visit_ty","","",124,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",124,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",124,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",124,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",124,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",124,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",124,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",124,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",124,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",124,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",124,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",124,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",124,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",124,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",124,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",124,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",124,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[14,"walk_list","syn","",null,null]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Arm"],[3,"Block"],[3,"Expr"],[3,"FieldPat"],[3,"FieldValue"],[3,"Local"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereRegionPredicate"],[3,"FnDecl"],[3,"ForeignItem"],[3,"ForeignMod"],[3,"ImplItem"],[3,"Item"],[3,"MethodSig"],[3,"PathListItem"],[3,"TraitItem"],[3,"Crate"],[3,"Delimited"],[3,"Mac"],[3,"MacroInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"BindingMode"],[4,"BlockCheckMode"],[4,"CaptureBy"],[4,"ExprKind"],[4,"MacStmtStyle"],[4,"Pat"],[4,"RangeLimits"],[4,"Stmt"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"Constness"],[4,"Defaultness"],[4,"FnArg"],[4,"ForeignItemKind"],[4,"ImplItemKind"],[4,"ImplPolarity"],[4,"ItemKind"],[4,"TraitItemKind"],[4,"ViewPath"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"GenericsBuilder"],[8,"ToIdent"],[3,"Ident"],[8,"Invoke"],[3,"Identity"],[8,"IntoLifetime"],[8,"IntoLifetimeDef"],[3,"LifetimeDefBuilder"],[8,"IntoPath"],[3,"PathBuilder"],[3,"PathSegmentsBuilder"],[3,"PathSegmentBuilder"],[3,"TypeBindingBuilder"],[3,"PathSegmentReturnBuilder"],[3,"QPathBuilder"],[3,"QPathTyBuilder"],[3,"QPathQSelfBuilder"],[3,"TyBuilder"],[3,"TyPathBuilder"],[3,"TyQPathBuilder"],[3,"TySliceBuilder"],[3,"TyRefBuilder"],[3,"TyOptionBuilder"],[3,"TyResultOkBuilder"],[3,"TyResultErrBuilder"],[3,"TyPhantomDataBuilder"],[3,"TyBoxBuilder"],[3,"TyIteratorBuilder"],[3,"TyObjectSumBuilder"],[3,"TyObjectSumTyBuilder"],[3,"TyImplTraitTyBuilder"],[3,"TyTupleBuilder"],[3,"TyParamBuilder"],[3,"TyParamBoundBuilder"],[3,"TraitTyParamBoundBuilder"],[3,"PolyTraitRefBuilder"],[3,"WherePredicateBuilder"],[3,"WhereBoundPredicateBuilder"],[3,"WhereBoundPredicateTyBuilder"],[3,"WhereBoundPredicateTyBoundsBuilder"],[3,"WhereRegionPredicateBuilder"],[3,"ImplGenerics"],[3,"TyGenerics"],[8,"Visitor"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["tm","parseerror"],"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"generics":["duration","outofrangeerror"],"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"generics":["stdduration","outofrangeerror"],"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["tmfmt","parseerror"],"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["typenum"] = {"doc":"This crate provides type-level numbers evaluated at compile time. It depends only on libcore.","items":[[3,"Greater","typenum","A potential output from `Cmp`, this is the type equivalent to the enum variant `core::cmp::Ordering::Greater`.",null,null],[3,"Less","","A potential output from `Cmp`, this is the type equivalent to the enum variant `core::cmp::Ordering::Less`.",null,null],[3,"Equal","","A potential output from `Cmp`, this is the type equivalent to the enum variant `core::cmp::Ordering::Equal`.",null,null],[0,"consts","","Type aliases for many constants.",null,null],[6,"True","typenum::consts","",null,null],[6,"False","","",null,null],[6,"U0","","",null,null],[6,"U1","","",null,null],[6,"P1","","",null,null],[6,"N1","","",null,null],[6,"U2","","",null,null],[6,"P2","","",null,null],[6,"N2","","",null,null],[6,"U3","","",null,null],[6,"P3","","",null,null],[6,"N3","","",null,null],[6,"U4","","",null,null],[6,"P4","","",null,null],[6,"N4","","",null,null],[6,"U5","","",null,null],[6,"P5","","",null,null],[6,"N5","","",null,null],[6,"U6","","",null,null],[6,"P6","","",null,null],[6,"N6","","",null,null],[6,"U7","","",null,null],[6,"P7","","",null,null],[6,"N7","","",null,null],[6,"U8","","",null,null],[6,"P8","","",null,null],[6,"N8","","",null,null],[6,"U9","","",null,null],[6,"P9","","",null,null],[6,"N9","","",null,null],[6,"U10","","",null,null],[6,"P10","","",null,null],[6,"N10","","",null,null],[6,"U11","","",null,null],[6,"P11","","",null,null],[6,"N11","","",null,null],[6,"U12","","",null,null],[6,"P12","","",null,null],[6,"N12","","",null,null],[6,"U13","","",null,null],[6,"P13","","",null,null],[6,"N13","","",null,null],[6,"U14","","",null,null],[6,"P14","","",null,null],[6,"N14","","",null,null],[6,"U15","","",null,null],[6,"P15","","",null,null],[6,"N15","","",null,null],[6,"U16","","",null,null],[6,"P16","","",null,null],[6,"N16","","",null,null],[6,"U17","","",null,null],[6,"P17","","",null,null],[6,"N17","","",null,null],[6,"U18","","",null,null],[6,"P18","","",null,null],[6,"N18","","",null,null],[6,"U19","","",null,null],[6,"P19","","",null,null],[6,"N19","","",null,null],[6,"U20","","",null,null],[6,"P20","","",null,null],[6,"N20","","",null,null],[6,"U21","","",null,null],[6,"P21","","",null,null],[6,"N21","","",null,null],[6,"U22","","",null,null],[6,"P22","","",null,null],[6,"N22","","",null,null],[6,"U23","","",null,null],[6,"P23","","",null,null],[6,"N23","","",null,null],[6,"U24","","",null,null],[6,"P24","","",null,null],[6,"N24","","",null,null],[6,"U25","","",null,null],[6,"P25","","",null,null],[6,"N25","","",null,null],[6,"U26","","",null,null],[6,"P26","","",null,null],[6,"N26","","",null,null],[6,"U27","","",null,null],[6,"P27","","",null,null],[6,"N27","","",null,null],[6,"U28","","",null,null],[6,"P28","","",null,null],[6,"N28","","",null,null],[6,"U29","","",null,null],[6,"P29","","",null,null],[6,"N29","","",null,null],[6,"U30","","",null,null],[6,"P30","","",null,null],[6,"N30","","",null,null],[6,"U31","","",null,null],[6,"P31","","",null,null],[6,"N31","","",null,null],[6,"U32","","",null,null],[6,"P32","","",null,null],[6,"N32","","",null,null],[6,"U33","","",null,null],[6,"P33","","",null,null],[6,"N33","","",null,null],[6,"U34","","",null,null],[6,"P34","","",null,null],[6,"N34","","",null,null],[6,"U35","","",null,null],[6,"P35","","",null,null],[6,"N35","","",null,null],[6,"U36","","",null,null],[6,"P36","","",null,null],[6,"N36","","",null,null],[6,"U37","","",null,null],[6,"P37","","",null,null],[6,"N37","","",null,null],[6,"U38","","",null,null],[6,"P38","","",null,null],[6,"N38","","",null,null],[6,"U39","","",null,null],[6,"P39","","",null,null],[6,"N39","","",null,null],[6,"U40","","",null,null],[6,"P40","","",null,null],[6,"N40","","",null,null],[6,"U41","","",null,null],[6,"P41","","",null,null],[6,"N41","","",null,null],[6,"U42","","",null,null],[6,"P42","","",null,null],[6,"N42","","",null,null],[6,"U43","","",null,null],[6,"P43","","",null,null],[6,"N43","","",null,null],[6,"U44","","",null,null],[6,"P44","","",null,null],[6,"N44","","",null,null],[6,"U45","","",null,null],[6,"P45","","",null,null],[6,"N45","","",null,null],[6,"U46","","",null,null],[6,"P46","","",null,null],[6,"N46","","",null,null],[6,"U47","","",null,null],[6,"P47","","",null,null],[6,"N47","","",null,null],[6,"U48","","",null,null],[6,"P48","","",null,null],[6,"N48","","",null,null],[6,"U49","","",null,null],[6,"P49","","",null,null],[6,"N49","","",null,null],[6,"U50","","",null,null],[6,"P50","","",null,null],[6,"N50","","",null,null],[6,"U51","","",null,null],[6,"P51","","",null,null],[6,"N51","","",null,null],[6,"U52","","",null,null],[6,"P52","","",null,null],[6,"N52","","",null,null],[6,"U53","","",null,null],[6,"P53","","",null,null],[6,"N53","","",null,null],[6,"U54","","",null,null],[6,"P54","","",null,null],[6,"N54","","",null,null],[6,"U55","","",null,null],[6,"P55","","",null,null],[6,"N55","","",null,null],[6,"U56","","",null,null],[6,"P56","","",null,null],[6,"N56","","",null,null],[6,"U57","","",null,null],[6,"P57","","",null,null],[6,"N57","","",null,null],[6,"U58","","",null,null],[6,"P58","","",null,null],[6,"N58","","",null,null],[6,"U59","","",null,null],[6,"P59","","",null,null],[6,"N59","","",null,null],[6,"U60","","",null,null],[6,"P60","","",null,null],[6,"N60","","",null,null],[6,"U61","","",null,null],[6,"P61","","",null,null],[6,"N61","","",null,null],[6,"U62","","",null,null],[6,"P62","","",null,null],[6,"N62","","",null,null],[6,"U63","","",null,null],[6,"P63","","",null,null],[6,"N63","","",null,null],[6,"U64","","",null,null],[6,"P64","","",null,null],[6,"N64","","",null,null],[6,"U65","","",null,null],[6,"P65","","",null,null],[6,"N65","","",null,null],[6,"U66","","",null,null],[6,"P66","","",null,null],[6,"N66","","",null,null],[6,"U67","","",null,null],[6,"P67","","",null,null],[6,"N67","","",null,null],[6,"U68","","",null,null],[6,"P68","","",null,null],[6,"N68","","",null,null],[6,"U69","","",null,null],[6,"P69","","",null,null],[6,"N69","","",null,null],[6,"U70","","",null,null],[6,"P70","","",null,null],[6,"N70","","",null,null],[6,"U71","","",null,null],[6,"P71","","",null,null],[6,"N71","","",null,null],[6,"U72","","",null,null],[6,"P72","","",null,null],[6,"N72","","",null,null],[6,"U73","","",null,null],[6,"P73","","",null,null],[6,"N73","","",null,null],[6,"U74","","",null,null],[6,"P74","","",null,null],[6,"N74","","",null,null],[6,"U75","","",null,null],[6,"P75","","",null,null],[6,"N75","","",null,null],[6,"U76","","",null,null],[6,"P76","","",null,null],[6,"N76","","",null,null],[6,"U77","","",null,null],[6,"P77","","",null,null],[6,"N77","","",null,null],[6,"U78","","",null,null],[6,"P78","","",null,null],[6,"N78","","",null,null],[6,"U79","","",null,null],[6,"P79","","",null,null],[6,"N79","","",null,null],[6,"U80","","",null,null],[6,"P80","","",null,null],[6,"N80","","",null,null],[6,"U81","","",null,null],[6,"P81","","",null,null],[6,"N81","","",null,null],[6,"U82","","",null,null],[6,"P82","","",null,null],[6,"N82","","",null,null],[6,"U83","","",null,null],[6,"P83","","",null,null],[6,"N83","","",null,null],[6,"U84","","",null,null],[6,"P84","","",null,null],[6,"N84","","",null,null],[6,"U85","","",null,null],[6,"P85","","",null,null],[6,"N85","","",null,null],[6,"U86","","",null,null],[6,"P86","","",null,null],[6,"N86","","",null,null],[6,"U87","","",null,null],[6,"P87","","",null,null],[6,"N87","","",null,null],[6,"U88","","",null,null],[6,"P88","","",null,null],[6,"N88","","",null,null],[6,"U89","","",null,null],[6,"P89","","",null,null],[6,"N89","","",null,null],[6,"U90","","",null,null],[6,"P90","","",null,null],[6,"N90","","",null,null],[6,"U91","","",null,null],[6,"P91","","",null,null],[6,"N91","","",null,null],[6,"U92","","",null,null],[6,"P92","","",null,null],[6,"N92","","",null,null],[6,"U93","","",null,null],[6,"P93","","",null,null],[6,"N93","","",null,null],[6,"U94","","",null,null],[6,"P94","","",null,null],[6,"N94","","",null,null],[6,"U95","","",null,null],[6,"P95","","",null,null],[6,"N95","","",null,null],[6,"U96","","",null,null],[6,"P96","","",null,null],[6,"N96","","",null,null],[6,"U97","","",null,null],[6,"P97","","",null,null],[6,"N97","","",null,null],[6,"U98","","",null,null],[6,"P98","","",null,null],[6,"N98","","",null,null],[6,"U99","","",null,null],[6,"P99","","",null,null],[6,"N99","","",null,null],[6,"U100","","",null,null],[6,"P100","","",null,null],[6,"N100","","",null,null],[6,"U101","","",null,null],[6,"P101","","",null,null],[6,"N101","","",null,null],[6,"U102","","",null,null],[6,"P102","","",null,null],[6,"N102","","",null,null],[6,"U103","","",null,null],[6,"P103","","",null,null],[6,"N103","","",null,null],[6,"U104","","",null,null],[6,"P104","","",null,null],[6,"N104","","",null,null],[6,"U105","","",null,null],[6,"P105","","",null,null],[6,"N105","","",null,null],[6,"U106","","",null,null],[6,"P106","","",null,null],[6,"N106","","",null,null],[6,"U107","","",null,null],[6,"P107","","",null,null],[6,"N107","","",null,null],[6,"U108","","",null,null],[6,"P108","","",null,null],[6,"N108","","",null,null],[6,"U109","","",null,null],[6,"P109","","",null,null],[6,"N109","","",null,null],[6,"U110","","",null,null],[6,"P110","","",null,null],[6,"N110","","",null,null],[6,"U111","","",null,null],[6,"P111","","",null,null],[6,"N111","","",null,null],[6,"U112","","",null,null],[6,"P112","","",null,null],[6,"N112","","",null,null],[6,"U113","","",null,null],[6,"P113","","",null,null],[6,"N113","","",null,null],[6,"U114","","",null,null],[6,"P114","","",null,null],[6,"N114","","",null,null],[6,"U115","","",null,null],[6,"P115","","",null,null],[6,"N115","","",null,null],[6,"U116","","",null,null],[6,"P116","","",null,null],[6,"N116","","",null,null],[6,"U117","","",null,null],[6,"P117","","",null,null],[6,"N117","","",null,null],[6,"U118","","",null,null],[6,"P118","","",null,null],[6,"N118","","",null,null],[6,"U119","","",null,null],[6,"P119","","",null,null],[6,"N119","","",null,null],[6,"U120","","",null,null],[6,"P120","","",null,null],[6,"N120","","",null,null],[6,"U121","","",null,null],[6,"P121","","",null,null],[6,"N121","","",null,null],[6,"U122","","",null,null],[6,"P122","","",null,null],[6,"N122","","",null,null],[6,"U123","","",null,null],[6,"P123","","",null,null],[6,"N123","","",null,null],[6,"U124","","",null,null],[6,"P124","","",null,null],[6,"N124","","",null,null],[6,"U125","","",null,null],[6,"P125","","",null,null],[6,"N125","","",null,null],[6,"U126","","",null,null],[6,"P126","","",null,null],[6,"N126","","",null,null],[6,"U127","","",null,null],[6,"P127","","",null,null],[6,"N127","","",null,null],[6,"U128","","",null,null],[6,"P128","","",null,null],[6,"N128","","",null,null],[6,"U129","","",null,null],[6,"P129","","",null,null],[6,"N129","","",null,null],[6,"U130","","",null,null],[6,"P130","","",null,null],[6,"N130","","",null,null],[6,"U131","","",null,null],[6,"P131","","",null,null],[6,"N131","","",null,null],[6,"U132","","",null,null],[6,"P132","","",null,null],[6,"N132","","",null,null],[6,"U133","","",null,null],[6,"P133","","",null,null],[6,"N133","","",null,null],[6,"U134","","",null,null],[6,"P134","","",null,null],[6,"N134","","",null,null],[6,"U135","","",null,null],[6,"P135","","",null,null],[6,"N135","","",null,null],[6,"U136","","",null,null],[6,"P136","","",null,null],[6,"N136","","",null,null],[6,"U137","","",null,null],[6,"P137","","",null,null],[6,"N137","","",null,null],[6,"U138","","",null,null],[6,"P138","","",null,null],[6,"N138","","",null,null],[6,"U139","","",null,null],[6,"P139","","",null,null],[6,"N139","","",null,null],[6,"U140","","",null,null],[6,"P140","","",null,null],[6,"N140","","",null,null],[6,"U141","","",null,null],[6,"P141","","",null,null],[6,"N141","","",null,null],[6,"U142","","",null,null],[6,"P142","","",null,null],[6,"N142","","",null,null],[6,"U143","","",null,null],[6,"P143","","",null,null],[6,"N143","","",null,null],[6,"U144","","",null,null],[6,"P144","","",null,null],[6,"N144","","",null,null],[6,"U145","","",null,null],[6,"P145","","",null,null],[6,"N145","","",null,null],[6,"U146","","",null,null],[6,"P146","","",null,null],[6,"N146","","",null,null],[6,"U147","","",null,null],[6,"P147","","",null,null],[6,"N147","","",null,null],[6,"U148","","",null,null],[6,"P148","","",null,null],[6,"N148","","",null,null],[6,"U149","","",null,null],[6,"P149","","",null,null],[6,"N149","","",null,null],[6,"U150","","",null,null],[6,"P150","","",null,null],[6,"N150","","",null,null],[6,"U151","","",null,null],[6,"P151","","",null,null],[6,"N151","","",null,null],[6,"U152","","",null,null],[6,"P152","","",null,null],[6,"N152","","",null,null],[6,"U153","","",null,null],[6,"P153","","",null,null],[6,"N153","","",null,null],[6,"U154","","",null,null],[6,"P154","","",null,null],[6,"N154","","",null,null],[6,"U155","","",null,null],[6,"P155","","",null,null],[6,"N155","","",null,null],[6,"U156","","",null,null],[6,"P156","","",null,null],[6,"N156","","",null,null],[6,"U157","","",null,null],[6,"P157","","",null,null],[6,"N157","","",null,null],[6,"U158","","",null,null],[6,"P158","","",null,null],[6,"N158","","",null,null],[6,"U159","","",null,null],[6,"P159","","",null,null],[6,"N159","","",null,null],[6,"U160","","",null,null],[6,"P160","","",null,null],[6,"N160","","",null,null],[6,"U161","","",null,null],[6,"P161","","",null,null],[6,"N161","","",null,null],[6,"U162","","",null,null],[6,"P162","","",null,null],[6,"N162","","",null,null],[6,"U163","","",null,null],[6,"P163","","",null,null],[6,"N163","","",null,null],[6,"U164","","",null,null],[6,"P164","","",null,null],[6,"N164","","",null,null],[6,"U165","","",null,null],[6,"P165","","",null,null],[6,"N165","","",null,null],[6,"U166","","",null,null],[6,"P166","","",null,null],[6,"N166","","",null,null],[6,"U167","","",null,null],[6,"P167","","",null,null],[6,"N167","","",null,null],[6,"U168","","",null,null],[6,"P168","","",null,null],[6,"N168","","",null,null],[6,"U169","","",null,null],[6,"P169","","",null,null],[6,"N169","","",null,null],[6,"U170","","",null,null],[6,"P170","","",null,null],[6,"N170","","",null,null],[6,"U171","","",null,null],[6,"P171","","",null,null],[6,"N171","","",null,null],[6,"U172","","",null,null],[6,"P172","","",null,null],[6,"N172","","",null,null],[6,"U173","","",null,null],[6,"P173","","",null,null],[6,"N173","","",null,null],[6,"U174","","",null,null],[6,"P174","","",null,null],[6,"N174","","",null,null],[6,"U175","","",null,null],[6,"P175","","",null,null],[6,"N175","","",null,null],[6,"U176","","",null,null],[6,"P176","","",null,null],[6,"N176","","",null,null],[6,"U177","","",null,null],[6,"P177","","",null,null],[6,"N177","","",null,null],[6,"U178","","",null,null],[6,"P178","","",null,null],[6,"N178","","",null,null],[6,"U179","","",null,null],[6,"P179","","",null,null],[6,"N179","","",null,null],[6,"U180","","",null,null],[6,"P180","","",null,null],[6,"N180","","",null,null],[6,"U181","","",null,null],[6,"P181","","",null,null],[6,"N181","","",null,null],[6,"U182","","",null,null],[6,"P182","","",null,null],[6,"N182","","",null,null],[6,"U183","","",null,null],[6,"P183","","",null,null],[6,"N183","","",null,null],[6,"U184","","",null,null],[6,"P184","","",null,null],[6,"N184","","",null,null],[6,"U185","","",null,null],[6,"P185","","",null,null],[6,"N185","","",null,null],[6,"U186","","",null,null],[6,"P186","","",null,null],[6,"N186","","",null,null],[6,"U187","","",null,null],[6,"P187","","",null,null],[6,"N187","","",null,null],[6,"U188","","",null,null],[6,"P188","","",null,null],[6,"N188","","",null,null],[6,"U189","","",null,null],[6,"P189","","",null,null],[6,"N189","","",null,null],[6,"U190","","",null,null],[6,"P190","","",null,null],[6,"N190","","",null,null],[6,"U191","","",null,null],[6,"P191","","",null,null],[6,"N191","","",null,null],[6,"U192","","",null,null],[6,"P192","","",null,null],[6,"N192","","",null,null],[6,"U193","","",null,null],[6,"P193","","",null,null],[6,"N193","","",null,null],[6,"U194","","",null,null],[6,"P194","","",null,null],[6,"N194","","",null,null],[6,"U195","","",null,null],[6,"P195","","",null,null],[6,"N195","","",null,null],[6,"U196","","",null,null],[6,"P196","","",null,null],[6,"N196","","",null,null],[6,"U197","","",null,null],[6,"P197","","",null,null],[6,"N197","","",null,null],[6,"U198","","",null,null],[6,"P198","","",null,null],[6,"N198","","",null,null],[6,"U199","","",null,null],[6,"P199","","",null,null],[6,"N199","","",null,null],[6,"U200","","",null,null],[6,"P200","","",null,null],[6,"N200","","",null,null],[6,"U201","","",null,null],[6,"P201","","",null,null],[6,"N201","","",null,null],[6,"U202","","",null,null],[6,"P202","","",null,null],[6,"N202","","",null,null],[6,"U203","","",null,null],[6,"P203","","",null,null],[6,"N203","","",null,null],[6,"U204","","",null,null],[6,"P204","","",null,null],[6,"N204","","",null,null],[6,"U205","","",null,null],[6,"P205","","",null,null],[6,"N205","","",null,null],[6,"U206","","",null,null],[6,"P206","","",null,null],[6,"N206","","",null,null],[6,"U207","","",null,null],[6,"P207","","",null,null],[6,"N207","","",null,null],[6,"U208","","",null,null],[6,"P208","","",null,null],[6,"N208","","",null,null],[6,"U209","","",null,null],[6,"P209","","",null,null],[6,"N209","","",null,null],[6,"U210","","",null,null],[6,"P210","","",null,null],[6,"N210","","",null,null],[6,"U211","","",null,null],[6,"P211","","",null,null],[6,"N211","","",null,null],[6,"U212","","",null,null],[6,"P212","","",null,null],[6,"N212","","",null,null],[6,"U213","","",null,null],[6,"P213","","",null,null],[6,"N213","","",null,null],[6,"U214","","",null,null],[6,"P214","","",null,null],[6,"N214","","",null,null],[6,"U215","","",null,null],[6,"P215","","",null,null],[6,"N215","","",null,null],[6,"U216","","",null,null],[6,"P216","","",null,null],[6,"N216","","",null,null],[6,"U217","","",null,null],[6,"P217","","",null,null],[6,"N217","","",null,null],[6,"U218","","",null,null],[6,"P218","","",null,null],[6,"N218","","",null,null],[6,"U219","","",null,null],[6,"P219","","",null,null],[6,"N219","","",null,null],[6,"U220","","",null,null],[6,"P220","","",null,null],[6,"N220","","",null,null],[6,"U221","","",null,null],[6,"P221","","",null,null],[6,"N221","","",null,null],[6,"U222","","",null,null],[6,"P222","","",null,null],[6,"N222","","",null,null],[6,"U223","","",null,null],[6,"P223","","",null,null],[6,"N223","","",null,null],[6,"U224","","",null,null],[6,"P224","","",null,null],[6,"N224","","",null,null],[6,"U225","","",null,null],[6,"P225","","",null,null],[6,"N225","","",null,null],[6,"U226","","",null,null],[6,"P226","","",null,null],[6,"N226","","",null,null],[6,"U227","","",null,null],[6,"P227","","",null,null],[6,"N227","","",null,null],[6,"U228","","",null,null],[6,"P228","","",null,null],[6,"N228","","",null,null],[6,"U229","","",null,null],[6,"P229","","",null,null],[6,"N229","","",null,null],[6,"U230","","",null,null],[6,"P230","","",null,null],[6,"N230","","",null,null],[6,"U231","","",null,null],[6,"P231","","",null,null],[6,"N231","","",null,null],[6,"U232","","",null,null],[6,"P232","","",null,null],[6,"N232","","",null,null],[6,"U233","","",null,null],[6,"P233","","",null,null],[6,"N233","","",null,null],[6,"U234","","",null,null],[6,"P234","","",null,null],[6,"N234","","",null,null],[6,"U235","","",null,null],[6,"P235","","",null,null],[6,"N235","","",null,null],[6,"U236","","",null,null],[6,"P236","","",null,null],[6,"N236","","",null,null],[6,"U237","","",null,null],[6,"P237","","",null,null],[6,"N237","","",null,null],[6,"U238","","",null,null],[6,"P238","","",null,null],[6,"N238","","",null,null],[6,"U239","","",null,null],[6,"P239","","",null,null],[6,"N239","","",null,null],[6,"U240","","",null,null],[6,"P240","","",null,null],[6,"N240","","",null,null],[6,"U241","","",null,null],[6,"P241","","",null,null],[6,"N241","","",null,null],[6,"U242","","",null,null],[6,"P242","","",null,null],[6,"N242","","",null,null],[6,"U243","","",null,null],[6,"P243","","",null,null],[6,"N243","","",null,null],[6,"U244","","",null,null],[6,"P244","","",null,null],[6,"N244","","",null,null],[6,"U245","","",null,null],[6,"P245","","",null,null],[6,"N245","","",null,null],[6,"U246","","",null,null],[6,"P246","","",null,null],[6,"N246","","",null,null],[6,"U247","","",null,null],[6,"P247","","",null,null],[6,"N247","","",null,null],[6,"U248","","",null,null],[6,"P248","","",null,null],[6,"N248","","",null,null],[6,"U249","","",null,null],[6,"P249","","",null,null],[6,"N249","","",null,null],[6,"U250","","",null,null],[6,"P250","","",null,null],[6,"N250","","",null,null],[6,"U251","","",null,null],[6,"P251","","",null,null],[6,"N251","","",null,null],[6,"U252","","",null,null],[6,"P252","","",null,null],[6,"N252","","",null,null],[6,"U253","","",null,null],[6,"P253","","",null,null],[6,"N253","","",null,null],[6,"U254","","",null,null],[6,"P254","","",null,null],[6,"N254","","",null,null],[6,"U255","","",null,null],[6,"P255","","",null,null],[6,"N255","","",null,null],[6,"U256","","",null,null],[6,"P256","","",null,null],[6,"N256","","",null,null],[6,"U257","","",null,null],[6,"P257","","",null,null],[6,"N257","","",null,null],[6,"U258","","",null,null],[6,"P258","","",null,null],[6,"N258","","",null,null],[6,"U259","","",null,null],[6,"P259","","",null,null],[6,"N259","","",null,null],[6,"U260","","",null,null],[6,"P260","","",null,null],[6,"N260","","",null,null],[6,"U261","","",null,null],[6,"P261","","",null,null],[6,"N261","","",null,null],[6,"U262","","",null,null],[6,"P262","","",null,null],[6,"N262","","",null,null],[6,"U263","","",null,null],[6,"P263","","",null,null],[6,"N263","","",null,null],[6,"U264","","",null,null],[6,"P264","","",null,null],[6,"N264","","",null,null],[6,"U265","","",null,null],[6,"P265","","",null,null],[6,"N265","","",null,null],[6,"U266","","",null,null],[6,"P266","","",null,null],[6,"N266","","",null,null],[6,"U267","","",null,null],[6,"P267","","",null,null],[6,"N267","","",null,null],[6,"U268","","",null,null],[6,"P268","","",null,null],[6,"N268","","",null,null],[6,"U269","","",null,null],[6,"P269","","",null,null],[6,"N269","","",null,null],[6,"U270","","",null,null],[6,"P270","","",null,null],[6,"N270","","",null,null],[6,"U271","","",null,null],[6,"P271","","",null,null],[6,"N271","","",null,null],[6,"U272","","",null,null],[6,"P272","","",null,null],[6,"N272","","",null,null],[6,"U273","","",null,null],[6,"P273","","",null,null],[6,"N273","","",null,null],[6,"U274","","",null,null],[6,"P274","","",null,null],[6,"N274","","",null,null],[6,"U275","","",null,null],[6,"P275","","",null,null],[6,"N275","","",null,null],[6,"U276","","",null,null],[6,"P276","","",null,null],[6,"N276","","",null,null],[6,"U277","","",null,null],[6,"P277","","",null,null],[6,"N277","","",null,null],[6,"U278","","",null,null],[6,"P278","","",null,null],[6,"N278","","",null,null],[6,"U279","","",null,null],[6,"P279","","",null,null],[6,"N279","","",null,null],[6,"U280","","",null,null],[6,"P280","","",null,null],[6,"N280","","",null,null],[6,"U281","","",null,null],[6,"P281","","",null,null],[6,"N281","","",null,null],[6,"U282","","",null,null],[6,"P282","","",null,null],[6,"N282","","",null,null],[6,"U283","","",null,null],[6,"P283","","",null,null],[6,"N283","","",null,null],[6,"U284","","",null,null],[6,"P284","","",null,null],[6,"N284","","",null,null],[6,"U285","","",null,null],[6,"P285","","",null,null],[6,"N285","","",null,null],[6,"U286","","",null,null],[6,"P286","","",null,null],[6,"N286","","",null,null],[6,"U287","","",null,null],[6,"P287","","",null,null],[6,"N287","","",null,null],[6,"U288","","",null,null],[6,"P288","","",null,null],[6,"N288","","",null,null],[6,"U289","","",null,null],[6,"P289","","",null,null],[6,"N289","","",null,null],[6,"U290","","",null,null],[6,"P290","","",null,null],[6,"N290","","",null,null],[6,"U291","","",null,null],[6,"P291","","",null,null],[6,"N291","","",null,null],[6,"U292","","",null,null],[6,"P292","","",null,null],[6,"N292","","",null,null],[6,"U293","","",null,null],[6,"P293","","",null,null],[6,"N293","","",null,null],[6,"U294","","",null,null],[6,"P294","","",null,null],[6,"N294","","",null,null],[6,"U295","","",null,null],[6,"P295","","",null,null],[6,"N295","","",null,null],[6,"U296","","",null,null],[6,"P296","","",null,null],[6,"N296","","",null,null],[6,"U297","","",null,null],[6,"P297","","",null,null],[6,"N297","","",null,null],[6,"U298","","",null,null],[6,"P298","","",null,null],[6,"N298","","",null,null],[6,"U299","","",null,null],[6,"P299","","",null,null],[6,"N299","","",null,null],[6,"U300","","",null,null],[6,"P300","","",null,null],[6,"N300","","",null,null],[6,"U301","","",null,null],[6,"P301","","",null,null],[6,"N301","","",null,null],[6,"U302","","",null,null],[6,"P302","","",null,null],[6,"N302","","",null,null],[6,"U303","","",null,null],[6,"P303","","",null,null],[6,"N303","","",null,null],[6,"U304","","",null,null],[6,"P304","","",null,null],[6,"N304","","",null,null],[6,"U305","","",null,null],[6,"P305","","",null,null],[6,"N305","","",null,null],[6,"U306","","",null,null],[6,"P306","","",null,null],[6,"N306","","",null,null],[6,"U307","","",null,null],[6,"P307","","",null,null],[6,"N307","","",null,null],[6,"U308","","",null,null],[6,"P308","","",null,null],[6,"N308","","",null,null],[6,"U309","","",null,null],[6,"P309","","",null,null],[6,"N309","","",null,null],[6,"U310","","",null,null],[6,"P310","","",null,null],[6,"N310","","",null,null],[6,"U311","","",null,null],[6,"P311","","",null,null],[6,"N311","","",null,null],[6,"U312","","",null,null],[6,"P312","","",null,null],[6,"N312","","",null,null],[6,"U313","","",null,null],[6,"P313","","",null,null],[6,"N313","","",null,null],[6,"U314","","",null,null],[6,"P314","","",null,null],[6,"N314","","",null,null],[6,"U315","","",null,null],[6,"P315","","",null,null],[6,"N315","","",null,null],[6,"U316","","",null,null],[6,"P316","","",null,null],[6,"N316","","",null,null],[6,"U317","","",null,null],[6,"P317","","",null,null],[6,"N317","","",null,null],[6,"U318","","",null,null],[6,"P318","","",null,null],[6,"N318","","",null,null],[6,"U319","","",null,null],[6,"P319","","",null,null],[6,"N319","","",null,null],[6,"U320","","",null,null],[6,"P320","","",null,null],[6,"N320","","",null,null],[6,"U321","","",null,null],[6,"P321","","",null,null],[6,"N321","","",null,null],[6,"U322","","",null,null],[6,"P322","","",null,null],[6,"N322","","",null,null],[6,"U323","","",null,null],[6,"P323","","",null,null],[6,"N323","","",null,null],[6,"U324","","",null,null],[6,"P324","","",null,null],[6,"N324","","",null,null],[6,"U325","","",null,null],[6,"P325","","",null,null],[6,"N325","","",null,null],[6,"U326","","",null,null],[6,"P326","","",null,null],[6,"N326","","",null,null],[6,"U327","","",null,null],[6,"P327","","",null,null],[6,"N327","","",null,null],[6,"U328","","",null,null],[6,"P328","","",null,null],[6,"N328","","",null,null],[6,"U329","","",null,null],[6,"P329","","",null,null],[6,"N329","","",null,null],[6,"U330","","",null,null],[6,"P330","","",null,null],[6,"N330","","",null,null],[6,"U331","","",null,null],[6,"P331","","",null,null],[6,"N331","","",null,null],[6,"U332","","",null,null],[6,"P332","","",null,null],[6,"N332","","",null,null],[6,"U333","","",null,null],[6,"P333","","",null,null],[6,"N333","","",null,null],[6,"U334","","",null,null],[6,"P334","","",null,null],[6,"N334","","",null,null],[6,"U335","","",null,null],[6,"P335","","",null,null],[6,"N335","","",null,null],[6,"U336","","",null,null],[6,"P336","","",null,null],[6,"N336","","",null,null],[6,"U337","","",null,null],[6,"P337","","",null,null],[6,"N337","","",null,null],[6,"U338","","",null,null],[6,"P338","","",null,null],[6,"N338","","",null,null],[6,"U339","","",null,null],[6,"P339","","",null,null],[6,"N339","","",null,null],[6,"U340","","",null,null],[6,"P340","","",null,null],[6,"N340","","",null,null],[6,"U341","","",null,null],[6,"P341","","",null,null],[6,"N341","","",null,null],[6,"U342","","",null,null],[6,"P342","","",null,null],[6,"N342","","",null,null],[6,"U343","","",null,null],[6,"P343","","",null,null],[6,"N343","","",null,null],[6,"U344","","",null,null],[6,"P344","","",null,null],[6,"N344","","",null,null],[6,"U345","","",null,null],[6,"P345","","",null,null],[6,"N345","","",null,null],[6,"U346","","",null,null],[6,"P346","","",null,null],[6,"N346","","",null,null],[6,"U347","","",null,null],[6,"P347","","",null,null],[6,"N347","","",null,null],[6,"U348","","",null,null],[6,"P348","","",null,null],[6,"N348","","",null,null],[6,"U349","","",null,null],[6,"P349","","",null,null],[6,"N349","","",null,null],[6,"U350","","",null,null],[6,"P350","","",null,null],[6,"N350","","",null,null],[6,"U351","","",null,null],[6,"P351","","",null,null],[6,"N351","","",null,null],[6,"U352","","",null,null],[6,"P352","","",null,null],[6,"N352","","",null,null],[6,"U353","","",null,null],[6,"P353","","",null,null],[6,"N353","","",null,null],[6,"U354","","",null,null],[6,"P354","","",null,null],[6,"N354","","",null,null],[6,"U355","","",null,null],[6,"P355","","",null,null],[6,"N355","","",null,null],[6,"U356","","",null,null],[6,"P356","","",null,null],[6,"N356","","",null,null],[6,"U357","","",null,null],[6,"P357","","",null,null],[6,"N357","","",null,null],[6,"U358","","",null,null],[6,"P358","","",null,null],[6,"N358","","",null,null],[6,"U359","","",null,null],[6,"P359","","",null,null],[6,"N359","","",null,null],[6,"U360","","",null,null],[6,"P360","","",null,null],[6,"N360","","",null,null],[6,"U361","","",null,null],[6,"P361","","",null,null],[6,"N361","","",null,null],[6,"U362","","",null,null],[6,"P362","","",null,null],[6,"N362","","",null,null],[6,"U363","","",null,null],[6,"P363","","",null,null],[6,"N363","","",null,null],[6,"U364","","",null,null],[6,"P364","","",null,null],[6,"N364","","",null,null],[6,"U365","","",null,null],[6,"P365","","",null,null],[6,"N365","","",null,null],[6,"U366","","",null,null],[6,"P366","","",null,null],[6,"N366","","",null,null],[6,"U367","","",null,null],[6,"P367","","",null,null],[6,"N367","","",null,null],[6,"U368","","",null,null],[6,"P368","","",null,null],[6,"N368","","",null,null],[6,"U369","","",null,null],[6,"P369","","",null,null],[6,"N369","","",null,null],[6,"U370","","",null,null],[6,"P370","","",null,null],[6,"N370","","",null,null],[6,"U371","","",null,null],[6,"P371","","",null,null],[6,"N371","","",null,null],[6,"U372","","",null,null],[6,"P372","","",null,null],[6,"N372","","",null,null],[6,"U373","","",null,null],[6,"P373","","",null,null],[6,"N373","","",null,null],[6,"U374","","",null,null],[6,"P374","","",null,null],[6,"N374","","",null,null],[6,"U375","","",null,null],[6,"P375","","",null,null],[6,"N375","","",null,null],[6,"U376","","",null,null],[6,"P376","","",null,null],[6,"N376","","",null,null],[6,"U377","","",null,null],[6,"P377","","",null,null],[6,"N377","","",null,null],[6,"U378","","",null,null],[6,"P378","","",null,null],[6,"N378","","",null,null],[6,"U379","","",null,null],[6,"P379","","",null,null],[6,"N379","","",null,null],[6,"U380","","",null,null],[6,"P380","","",null,null],[6,"N380","","",null,null],[6,"U381","","",null,null],[6,"P381","","",null,null],[6,"N381","","",null,null],[6,"U382","","",null,null],[6,"P382","","",null,null],[6,"N382","","",null,null],[6,"U383","","",null,null],[6,"P383","","",null,null],[6,"N383","","",null,null],[6,"U384","","",null,null],[6,"P384","","",null,null],[6,"N384","","",null,null],[6,"U385","","",null,null],[6,"P385","","",null,null],[6,"N385","","",null,null],[6,"U386","","",null,null],[6,"P386","","",null,null],[6,"N386","","",null,null],[6,"U387","","",null,null],[6,"P387","","",null,null],[6,"N387","","",null,null],[6,"U388","","",null,null],[6,"P388","","",null,null],[6,"N388","","",null,null],[6,"U389","","",null,null],[6,"P389","","",null,null],[6,"N389","","",null,null],[6,"U390","","",null,null],[6,"P390","","",null,null],[6,"N390","","",null,null],[6,"U391","","",null,null],[6,"P391","","",null,null],[6,"N391","","",null,null],[6,"U392","","",null,null],[6,"P392","","",null,null],[6,"N392","","",null,null],[6,"U393","","",null,null],[6,"P393","","",null,null],[6,"N393","","",null,null],[6,"U394","","",null,null],[6,"P394","","",null,null],[6,"N394","","",null,null],[6,"U395","","",null,null],[6,"P395","","",null,null],[6,"N395","","",null,null],[6,"U396","","",null,null],[6,"P396","","",null,null],[6,"N396","","",null,null],[6,"U397","","",null,null],[6,"P397","","",null,null],[6,"N397","","",null,null],[6,"U398","","",null,null],[6,"P398","","",null,null],[6,"N398","","",null,null],[6,"U399","","",null,null],[6,"P399","","",null,null],[6,"N399","","",null,null],[6,"U400","","",null,null],[6,"P400","","",null,null],[6,"N400","","",null,null],[6,"U401","","",null,null],[6,"P401","","",null,null],[6,"N401","","",null,null],[6,"U402","","",null,null],[6,"P402","","",null,null],[6,"N402","","",null,null],[6,"U403","","",null,null],[6,"P403","","",null,null],[6,"N403","","",null,null],[6,"U404","","",null,null],[6,"P404","","",null,null],[6,"N404","","",null,null],[6,"U405","","",null,null],[6,"P405","","",null,null],[6,"N405","","",null,null],[6,"U406","","",null,null],[6,"P406","","",null,null],[6,"N406","","",null,null],[6,"U407","","",null,null],[6,"P407","","",null,null],[6,"N407","","",null,null],[6,"U408","","",null,null],[6,"P408","","",null,null],[6,"N408","","",null,null],[6,"U409","","",null,null],[6,"P409","","",null,null],[6,"N409","","",null,null],[6,"U410","","",null,null],[6,"P410","","",null,null],[6,"N410","","",null,null],[6,"U411","","",null,null],[6,"P411","","",null,null],[6,"N411","","",null,null],[6,"U412","","",null,null],[6,"P412","","",null,null],[6,"N412","","",null,null],[6,"U413","","",null,null],[6,"P413","","",null,null],[6,"N413","","",null,null],[6,"U414","","",null,null],[6,"P414","","",null,null],[6,"N414","","",null,null],[6,"U415","","",null,null],[6,"P415","","",null,null],[6,"N415","","",null,null],[6,"U416","","",null,null],[6,"P416","","",null,null],[6,"N416","","",null,null],[6,"U417","","",null,null],[6,"P417","","",null,null],[6,"N417","","",null,null],[6,"U418","","",null,null],[6,"P418","","",null,null],[6,"N418","","",null,null],[6,"U419","","",null,null],[6,"P419","","",null,null],[6,"N419","","",null,null],[6,"U420","","",null,null],[6,"P420","","",null,null],[6,"N420","","",null,null],[6,"U421","","",null,null],[6,"P421","","",null,null],[6,"N421","","",null,null],[6,"U422","","",null,null],[6,"P422","","",null,null],[6,"N422","","",null,null],[6,"U423","","",null,null],[6,"P423","","",null,null],[6,"N423","","",null,null],[6,"U424","","",null,null],[6,"P424","","",null,null],[6,"N424","","",null,null],[6,"U425","","",null,null],[6,"P425","","",null,null],[6,"N425","","",null,null],[6,"U426","","",null,null],[6,"P426","","",null,null],[6,"N426","","",null,null],[6,"U427","","",null,null],[6,"P427","","",null,null],[6,"N427","","",null,null],[6,"U428","","",null,null],[6,"P428","","",null,null],[6,"N428","","",null,null],[6,"U429","","",null,null],[6,"P429","","",null,null],[6,"N429","","",null,null],[6,"U430","","",null,null],[6,"P430","","",null,null],[6,"N430","","",null,null],[6,"U431","","",null,null],[6,"P431","","",null,null],[6,"N431","","",null,null],[6,"U432","","",null,null],[6,"P432","","",null,null],[6,"N432","","",null,null],[6,"U433","","",null,null],[6,"P433","","",null,null],[6,"N433","","",null,null],[6,"U434","","",null,null],[6,"P434","","",null,null],[6,"N434","","",null,null],[6,"U435","","",null,null],[6,"P435","","",null,null],[6,"N435","","",null,null],[6,"U436","","",null,null],[6,"P436","","",null,null],[6,"N436","","",null,null],[6,"U437","","",null,null],[6,"P437","","",null,null],[6,"N437","","",null,null],[6,"U438","","",null,null],[6,"P438","","",null,null],[6,"N438","","",null,null],[6,"U439","","",null,null],[6,"P439","","",null,null],[6,"N439","","",null,null],[6,"U440","","",null,null],[6,"P440","","",null,null],[6,"N440","","",null,null],[6,"U441","","",null,null],[6,"P441","","",null,null],[6,"N441","","",null,null],[6,"U442","","",null,null],[6,"P442","","",null,null],[6,"N442","","",null,null],[6,"U443","","",null,null],[6,"P443","","",null,null],[6,"N443","","",null,null],[6,"U444","","",null,null],[6,"P444","","",null,null],[6,"N444","","",null,null],[6,"U445","","",null,null],[6,"P445","","",null,null],[6,"N445","","",null,null],[6,"U446","","",null,null],[6,"P446","","",null,null],[6,"N446","","",null,null],[6,"U447","","",null,null],[6,"P447","","",null,null],[6,"N447","","",null,null],[6,"U448","","",null,null],[6,"P448","","",null,null],[6,"N448","","",null,null],[6,"U449","","",null,null],[6,"P449","","",null,null],[6,"N449","","",null,null],[6,"U450","","",null,null],[6,"P450","","",null,null],[6,"N450","","",null,null],[6,"U451","","",null,null],[6,"P451","","",null,null],[6,"N451","","",null,null],[6,"U452","","",null,null],[6,"P452","","",null,null],[6,"N452","","",null,null],[6,"U453","","",null,null],[6,"P453","","",null,null],[6,"N453","","",null,null],[6,"U454","","",null,null],[6,"P454","","",null,null],[6,"N454","","",null,null],[6,"U455","","",null,null],[6,"P455","","",null,null],[6,"N455","","",null,null],[6,"U456","","",null,null],[6,"P456","","",null,null],[6,"N456","","",null,null],[6,"U457","","",null,null],[6,"P457","","",null,null],[6,"N457","","",null,null],[6,"U458","","",null,null],[6,"P458","","",null,null],[6,"N458","","",null,null],[6,"U459","","",null,null],[6,"P459","","",null,null],[6,"N459","","",null,null],[6,"U460","","",null,null],[6,"P460","","",null,null],[6,"N460","","",null,null],[6,"U461","","",null,null],[6,"P461","","",null,null],[6,"N461","","",null,null],[6,"U462","","",null,null],[6,"P462","","",null,null],[6,"N462","","",null,null],[6,"U463","","",null,null],[6,"P463","","",null,null],[6,"N463","","",null,null],[6,"U464","","",null,null],[6,"P464","","",null,null],[6,"N464","","",null,null],[6,"U465","","",null,null],[6,"P465","","",null,null],[6,"N465","","",null,null],[6,"U466","","",null,null],[6,"P466","","",null,null],[6,"N466","","",null,null],[6,"U467","","",null,null],[6,"P467","","",null,null],[6,"N467","","",null,null],[6,"U468","","",null,null],[6,"P468","","",null,null],[6,"N468","","",null,null],[6,"U469","","",null,null],[6,"P469","","",null,null],[6,"N469","","",null,null],[6,"U470","","",null,null],[6,"P470","","",null,null],[6,"N470","","",null,null],[6,"U471","","",null,null],[6,"P471","","",null,null],[6,"N471","","",null,null],[6,"U472","","",null,null],[6,"P472","","",null,null],[6,"N472","","",null,null],[6,"U473","","",null,null],[6,"P473","","",null,null],[6,"N473","","",null,null],[6,"U474","","",null,null],[6,"P474","","",null,null],[6,"N474","","",null,null],[6,"U475","","",null,null],[6,"P475","","",null,null],[6,"N475","","",null,null],[6,"U476","","",null,null],[6,"P476","","",null,null],[6,"N476","","",null,null],[6,"U477","","",null,null],[6,"P477","","",null,null],[6,"N477","","",null,null],[6,"U478","","",null,null],[6,"P478","","",null,null],[6,"N478","","",null,null],[6,"U479","","",null,null],[6,"P479","","",null,null],[6,"N479","","",null,null],[6,"U480","","",null,null],[6,"P480","","",null,null],[6,"N480","","",null,null],[6,"U481","","",null,null],[6,"P481","","",null,null],[6,"N481","","",null,null],[6,"U482","","",null,null],[6,"P482","","",null,null],[6,"N482","","",null,null],[6,"U483","","",null,null],[6,"P483","","",null,null],[6,"N483","","",null,null],[6,"U484","","",null,null],[6,"P484","","",null,null],[6,"N484","","",null,null],[6,"U485","","",null,null],[6,"P485","","",null,null],[6,"N485","","",null,null],[6,"U486","","",null,null],[6,"P486","","",null,null],[6,"N486","","",null,null],[6,"U487","","",null,null],[6,"P487","","",null,null],[6,"N487","","",null,null],[6,"U488","","",null,null],[6,"P488","","",null,null],[6,"N488","","",null,null],[6,"U489","","",null,null],[6,"P489","","",null,null],[6,"N489","","",null,null],[6,"U490","","",null,null],[6,"P490","","",null,null],[6,"N490","","",null,null],[6,"U491","","",null,null],[6,"P491","","",null,null],[6,"N491","","",null,null],[6,"U492","","",null,null],[6,"P492","","",null,null],[6,"N492","","",null,null],[6,"U493","","",null,null],[6,"P493","","",null,null],[6,"N493","","",null,null],[6,"U494","","",null,null],[6,"P494","","",null,null],[6,"N494","","",null,null],[6,"U495","","",null,null],[6,"P495","","",null,null],[6,"N495","","",null,null],[6,"U496","","",null,null],[6,"P496","","",null,null],[6,"N496","","",null,null],[6,"U497","","",null,null],[6,"P497","","",null,null],[6,"N497","","",null,null],[6,"U498","","",null,null],[6,"P498","","",null,null],[6,"N498","","",null,null],[6,"U499","","",null,null],[6,"P499","","",null,null],[6,"N499","","",null,null],[6,"U500","","",null,null],[6,"P500","","",null,null],[6,"N500","","",null,null],[6,"U501","","",null,null],[6,"P501","","",null,null],[6,"N501","","",null,null],[6,"U502","","",null,null],[6,"P502","","",null,null],[6,"N502","","",null,null],[6,"U503","","",null,null],[6,"P503","","",null,null],[6,"N503","","",null,null],[6,"U504","","",null,null],[6,"P504","","",null,null],[6,"N504","","",null,null],[6,"U505","","",null,null],[6,"P505","","",null,null],[6,"N505","","",null,null],[6,"U506","","",null,null],[6,"P506","","",null,null],[6,"N506","","",null,null],[6,"U507","","",null,null],[6,"P507","","",null,null],[6,"N507","","",null,null],[6,"U508","","",null,null],[6,"P508","","",null,null],[6,"N508","","",null,null],[6,"U509","","",null,null],[6,"P509","","",null,null],[6,"N509","","",null,null],[6,"U510","","",null,null],[6,"P510","","",null,null],[6,"N510","","",null,null],[6,"U511","","",null,null],[6,"P511","","",null,null],[6,"N511","","",null,null],[6,"U512","","",null,null],[6,"P512","","",null,null],[6,"N512","","",null,null],[6,"U513","","",null,null],[6,"P513","","",null,null],[6,"N513","","",null,null],[6,"U514","","",null,null],[6,"P514","","",null,null],[6,"N514","","",null,null],[6,"U515","","",null,null],[6,"P515","","",null,null],[6,"N515","","",null,null],[6,"U516","","",null,null],[6,"P516","","",null,null],[6,"N516","","",null,null],[6,"U517","","",null,null],[6,"P517","","",null,null],[6,"N517","","",null,null],[6,"U518","","",null,null],[6,"P518","","",null,null],[6,"N518","","",null,null],[6,"U519","","",null,null],[6,"P519","","",null,null],[6,"N519","","",null,null],[6,"U520","","",null,null],[6,"P520","","",null,null],[6,"N520","","",null,null],[6,"U521","","",null,null],[6,"P521","","",null,null],[6,"N521","","",null,null],[6,"U522","","",null,null],[6,"P522","","",null,null],[6,"N522","","",null,null],[6,"U523","","",null,null],[6,"P523","","",null,null],[6,"N523","","",null,null],[6,"U524","","",null,null],[6,"P524","","",null,null],[6,"N524","","",null,null],[6,"U525","","",null,null],[6,"P525","","",null,null],[6,"N525","","",null,null],[6,"U526","","",null,null],[6,"P526","","",null,null],[6,"N526","","",null,null],[6,"U527","","",null,null],[6,"P527","","",null,null],[6,"N527","","",null,null],[6,"U528","","",null,null],[6,"P528","","",null,null],[6,"N528","","",null,null],[6,"U529","","",null,null],[6,"P529","","",null,null],[6,"N529","","",null,null],[6,"U530","","",null,null],[6,"P530","","",null,null],[6,"N530","","",null,null],[6,"U531","","",null,null],[6,"P531","","",null,null],[6,"N531","","",null,null],[6,"U532","","",null,null],[6,"P532","","",null,null],[6,"N532","","",null,null],[6,"U533","","",null,null],[6,"P533","","",null,null],[6,"N533","","",null,null],[6,"U534","","",null,null],[6,"P534","","",null,null],[6,"N534","","",null,null],[6,"U535","","",null,null],[6,"P535","","",null,null],[6,"N535","","",null,null],[6,"U536","","",null,null],[6,"P536","","",null,null],[6,"N536","","",null,null],[6,"U537","","",null,null],[6,"P537","","",null,null],[6,"N537","","",null,null],[6,"U538","","",null,null],[6,"P538","","",null,null],[6,"N538","","",null,null],[6,"U539","","",null,null],[6,"P539","","",null,null],[6,"N539","","",null,null],[6,"U540","","",null,null],[6,"P540","","",null,null],[6,"N540","","",null,null],[6,"U541","","",null,null],[6,"P541","","",null,null],[6,"N541","","",null,null],[6,"U542","","",null,null],[6,"P542","","",null,null],[6,"N542","","",null,null],[6,"U543","","",null,null],[6,"P543","","",null,null],[6,"N543","","",null,null],[6,"U544","","",null,null],[6,"P544","","",null,null],[6,"N544","","",null,null],[6,"U545","","",null,null],[6,"P545","","",null,null],[6,"N545","","",null,null],[6,"U546","","",null,null],[6,"P546","","",null,null],[6,"N546","","",null,null],[6,"U547","","",null,null],[6,"P547","","",null,null],[6,"N547","","",null,null],[6,"U548","","",null,null],[6,"P548","","",null,null],[6,"N548","","",null,null],[6,"U549","","",null,null],[6,"P549","","",null,null],[6,"N549","","",null,null],[6,"U550","","",null,null],[6,"P550","","",null,null],[6,"N550","","",null,null],[6,"U551","","",null,null],[6,"P551","","",null,null],[6,"N551","","",null,null],[6,"U552","","",null,null],[6,"P552","","",null,null],[6,"N552","","",null,null],[6,"U553","","",null,null],[6,"P553","","",null,null],[6,"N553","","",null,null],[6,"U554","","",null,null],[6,"P554","","",null,null],[6,"N554","","",null,null],[6,"U555","","",null,null],[6,"P555","","",null,null],[6,"N555","","",null,null],[6,"U556","","",null,null],[6,"P556","","",null,null],[6,"N556","","",null,null],[6,"U557","","",null,null],[6,"P557","","",null,null],[6,"N557","","",null,null],[6,"U558","","",null,null],[6,"P558","","",null,null],[6,"N558","","",null,null],[6,"U559","","",null,null],[6,"P559","","",null,null],[6,"N559","","",null,null],[6,"U560","","",null,null],[6,"P560","","",null,null],[6,"N560","","",null,null],[6,"U561","","",null,null],[6,"P561","","",null,null],[6,"N561","","",null,null],[6,"U562","","",null,null],[6,"P562","","",null,null],[6,"N562","","",null,null],[6,"U563","","",null,null],[6,"P563","","",null,null],[6,"N563","","",null,null],[6,"U564","","",null,null],[6,"P564","","",null,null],[6,"N564","","",null,null],[6,"U565","","",null,null],[6,"P565","","",null,null],[6,"N565","","",null,null],[6,"U566","","",null,null],[6,"P566","","",null,null],[6,"N566","","",null,null],[6,"U567","","",null,null],[6,"P567","","",null,null],[6,"N567","","",null,null],[6,"U568","","",null,null],[6,"P568","","",null,null],[6,"N568","","",null,null],[6,"U569","","",null,null],[6,"P569","","",null,null],[6,"N569","","",null,null],[6,"U570","","",null,null],[6,"P570","","",null,null],[6,"N570","","",null,null],[6,"U571","","",null,null],[6,"P571","","",null,null],[6,"N571","","",null,null],[6,"U572","","",null,null],[6,"P572","","",null,null],[6,"N572","","",null,null],[6,"U573","","",null,null],[6,"P573","","",null,null],[6,"N573","","",null,null],[6,"U574","","",null,null],[6,"P574","","",null,null],[6,"N574","","",null,null],[6,"U575","","",null,null],[6,"P575","","",null,null],[6,"N575","","",null,null],[6,"U576","","",null,null],[6,"P576","","",null,null],[6,"N576","","",null,null],[6,"U577","","",null,null],[6,"P577","","",null,null],[6,"N577","","",null,null],[6,"U578","","",null,null],[6,"P578","","",null,null],[6,"N578","","",null,null],[6,"U579","","",null,null],[6,"P579","","",null,null],[6,"N579","","",null,null],[6,"U580","","",null,null],[6,"P580","","",null,null],[6,"N580","","",null,null],[6,"U581","","",null,null],[6,"P581","","",null,null],[6,"N581","","",null,null],[6,"U582","","",null,null],[6,"P582","","",null,null],[6,"N582","","",null,null],[6,"U583","","",null,null],[6,"P583","","",null,null],[6,"N583","","",null,null],[6,"U584","","",null,null],[6,"P584","","",null,null],[6,"N584","","",null,null],[6,"U585","","",null,null],[6,"P585","","",null,null],[6,"N585","","",null,null],[6,"U586","","",null,null],[6,"P586","","",null,null],[6,"N586","","",null,null],[6,"U587","","",null,null],[6,"P587","","",null,null],[6,"N587","","",null,null],[6,"U588","","",null,null],[6,"P588","","",null,null],[6,"N588","","",null,null],[6,"U589","","",null,null],[6,"P589","","",null,null],[6,"N589","","",null,null],[6,"U590","","",null,null],[6,"P590","","",null,null],[6,"N590","","",null,null],[6,"U591","","",null,null],[6,"P591","","",null,null],[6,"N591","","",null,null],[6,"U592","","",null,null],[6,"P592","","",null,null],[6,"N592","","",null,null],[6,"U593","","",null,null],[6,"P593","","",null,null],[6,"N593","","",null,null],[6,"U594","","",null,null],[6,"P594","","",null,null],[6,"N594","","",null,null],[6,"U595","","",null,null],[6,"P595","","",null,null],[6,"N595","","",null,null],[6,"U596","","",null,null],[6,"P596","","",null,null],[6,"N596","","",null,null],[6,"U597","","",null,null],[6,"P597","","",null,null],[6,"N597","","",null,null],[6,"U598","","",null,null],[6,"P598","","",null,null],[6,"N598","","",null,null],[6,"U599","","",null,null],[6,"P599","","",null,null],[6,"N599","","",null,null],[6,"U600","","",null,null],[6,"P600","","",null,null],[6,"N600","","",null,null],[6,"U601","","",null,null],[6,"P601","","",null,null],[6,"N601","","",null,null],[6,"U602","","",null,null],[6,"P602","","",null,null],[6,"N602","","",null,null],[6,"U603","","",null,null],[6,"P603","","",null,null],[6,"N603","","",null,null],[6,"U604","","",null,null],[6,"P604","","",null,null],[6,"N604","","",null,null],[6,"U605","","",null,null],[6,"P605","","",null,null],[6,"N605","","",null,null],[6,"U606","","",null,null],[6,"P606","","",null,null],[6,"N606","","",null,null],[6,"U607","","",null,null],[6,"P607","","",null,null],[6,"N607","","",null,null],[6,"U608","","",null,null],[6,"P608","","",null,null],[6,"N608","","",null,null],[6,"U609","","",null,null],[6,"P609","","",null,null],[6,"N609","","",null,null],[6,"U610","","",null,null],[6,"P610","","",null,null],[6,"N610","","",null,null],[6,"U611","","",null,null],[6,"P611","","",null,null],[6,"N611","","",null,null],[6,"U612","","",null,null],[6,"P612","","",null,null],[6,"N612","","",null,null],[6,"U613","","",null,null],[6,"P613","","",null,null],[6,"N613","","",null,null],[6,"U614","","",null,null],[6,"P614","","",null,null],[6,"N614","","",null,null],[6,"U615","","",null,null],[6,"P615","","",null,null],[6,"N615","","",null,null],[6,"U616","","",null,null],[6,"P616","","",null,null],[6,"N616","","",null,null],[6,"U617","","",null,null],[6,"P617","","",null,null],[6,"N617","","",null,null],[6,"U618","","",null,null],[6,"P618","","",null,null],[6,"N618","","",null,null],[6,"U619","","",null,null],[6,"P619","","",null,null],[6,"N619","","",null,null],[6,"U620","","",null,null],[6,"P620","","",null,null],[6,"N620","","",null,null],[6,"U621","","",null,null],[6,"P621","","",null,null],[6,"N621","","",null,null],[6,"U622","","",null,null],[6,"P622","","",null,null],[6,"N622","","",null,null],[6,"U623","","",null,null],[6,"P623","","",null,null],[6,"N623","","",null,null],[6,"U624","","",null,null],[6,"P624","","",null,null],[6,"N624","","",null,null],[6,"U625","","",null,null],[6,"P625","","",null,null],[6,"N625","","",null,null],[6,"U626","","",null,null],[6,"P626","","",null,null],[6,"N626","","",null,null],[6,"U627","","",null,null],[6,"P627","","",null,null],[6,"N627","","",null,null],[6,"U628","","",null,null],[6,"P628","","",null,null],[6,"N628","","",null,null],[6,"U629","","",null,null],[6,"P629","","",null,null],[6,"N629","","",null,null],[6,"U630","","",null,null],[6,"P630","","",null,null],[6,"N630","","",null,null],[6,"U631","","",null,null],[6,"P631","","",null,null],[6,"N631","","",null,null],[6,"U632","","",null,null],[6,"P632","","",null,null],[6,"N632","","",null,null],[6,"U633","","",null,null],[6,"P633","","",null,null],[6,"N633","","",null,null],[6,"U634","","",null,null],[6,"P634","","",null,null],[6,"N634","","",null,null],[6,"U635","","",null,null],[6,"P635","","",null,null],[6,"N635","","",null,null],[6,"U636","","",null,null],[6,"P636","","",null,null],[6,"N636","","",null,null],[6,"U637","","",null,null],[6,"P637","","",null,null],[6,"N637","","",null,null],[6,"U638","","",null,null],[6,"P638","","",null,null],[6,"N638","","",null,null],[6,"U639","","",null,null],[6,"P639","","",null,null],[6,"N639","","",null,null],[6,"U640","","",null,null],[6,"P640","","",null,null],[6,"N640","","",null,null],[6,"U641","","",null,null],[6,"P641","","",null,null],[6,"N641","","",null,null],[6,"U642","","",null,null],[6,"P642","","",null,null],[6,"N642","","",null,null],[6,"U643","","",null,null],[6,"P643","","",null,null],[6,"N643","","",null,null],[6,"U644","","",null,null],[6,"P644","","",null,null],[6,"N644","","",null,null],[6,"U645","","",null,null],[6,"P645","","",null,null],[6,"N645","","",null,null],[6,"U646","","",null,null],[6,"P646","","",null,null],[6,"N646","","",null,null],[6,"U647","","",null,null],[6,"P647","","",null,null],[6,"N647","","",null,null],[6,"U648","","",null,null],[6,"P648","","",null,null],[6,"N648","","",null,null],[6,"U649","","",null,null],[6,"P649","","",null,null],[6,"N649","","",null,null],[6,"U650","","",null,null],[6,"P650","","",null,null],[6,"N650","","",null,null],[6,"U651","","",null,null],[6,"P651","","",null,null],[6,"N651","","",null,null],[6,"U652","","",null,null],[6,"P652","","",null,null],[6,"N652","","",null,null],[6,"U653","","",null,null],[6,"P653","","",null,null],[6,"N653","","",null,null],[6,"U654","","",null,null],[6,"P654","","",null,null],[6,"N654","","",null,null],[6,"U655","","",null,null],[6,"P655","","",null,null],[6,"N655","","",null,null],[6,"U656","","",null,null],[6,"P656","","",null,null],[6,"N656","","",null,null],[6,"U657","","",null,null],[6,"P657","","",null,null],[6,"N657","","",null,null],[6,"U658","","",null,null],[6,"P658","","",null,null],[6,"N658","","",null,null],[6,"U659","","",null,null],[6,"P659","","",null,null],[6,"N659","","",null,null],[6,"U660","","",null,null],[6,"P660","","",null,null],[6,"N660","","",null,null],[6,"U661","","",null,null],[6,"P661","","",null,null],[6,"N661","","",null,null],[6,"U662","","",null,null],[6,"P662","","",null,null],[6,"N662","","",null,null],[6,"U663","","",null,null],[6,"P663","","",null,null],[6,"N663","","",null,null],[6,"U664","","",null,null],[6,"P664","","",null,null],[6,"N664","","",null,null],[6,"U665","","",null,null],[6,"P665","","",null,null],[6,"N665","","",null,null],[6,"U666","","",null,null],[6,"P666","","",null,null],[6,"N666","","",null,null],[6,"U667","","",null,null],[6,"P667","","",null,null],[6,"N667","","",null,null],[6,"U668","","",null,null],[6,"P668","","",null,null],[6,"N668","","",null,null],[6,"U669","","",null,null],[6,"P669","","",null,null],[6,"N669","","",null,null],[6,"U670","","",null,null],[6,"P670","","",null,null],[6,"N670","","",null,null],[6,"U671","","",null,null],[6,"P671","","",null,null],[6,"N671","","",null,null],[6,"U672","","",null,null],[6,"P672","","",null,null],[6,"N672","","",null,null],[6,"U673","","",null,null],[6,"P673","","",null,null],[6,"N673","","",null,null],[6,"U674","","",null,null],[6,"P674","","",null,null],[6,"N674","","",null,null],[6,"U675","","",null,null],[6,"P675","","",null,null],[6,"N675","","",null,null],[6,"U676","","",null,null],[6,"P676","","",null,null],[6,"N676","","",null,null],[6,"U677","","",null,null],[6,"P677","","",null,null],[6,"N677","","",null,null],[6,"U678","","",null,null],[6,"P678","","",null,null],[6,"N678","","",null,null],[6,"U679","","",null,null],[6,"P679","","",null,null],[6,"N679","","",null,null],[6,"U680","","",null,null],[6,"P680","","",null,null],[6,"N680","","",null,null],[6,"U681","","",null,null],[6,"P681","","",null,null],[6,"N681","","",null,null],[6,"U682","","",null,null],[6,"P682","","",null,null],[6,"N682","","",null,null],[6,"U683","","",null,null],[6,"P683","","",null,null],[6,"N683","","",null,null],[6,"U684","","",null,null],[6,"P684","","",null,null],[6,"N684","","",null,null],[6,"U685","","",null,null],[6,"P685","","",null,null],[6,"N685","","",null,null],[6,"U686","","",null,null],[6,"P686","","",null,null],[6,"N686","","",null,null],[6,"U687","","",null,null],[6,"P687","","",null,null],[6,"N687","","",null,null],[6,"U688","","",null,null],[6,"P688","","",null,null],[6,"N688","","",null,null],[6,"U689","","",null,null],[6,"P689","","",null,null],[6,"N689","","",null,null],[6,"U690","","",null,null],[6,"P690","","",null,null],[6,"N690","","",null,null],[6,"U691","","",null,null],[6,"P691","","",null,null],[6,"N691","","",null,null],[6,"U692","","",null,null],[6,"P692","","",null,null],[6,"N692","","",null,null],[6,"U693","","",null,null],[6,"P693","","",null,null],[6,"N693","","",null,null],[6,"U694","","",null,null],[6,"P694","","",null,null],[6,"N694","","",null,null],[6,"U695","","",null,null],[6,"P695","","",null,null],[6,"N695","","",null,null],[6,"U696","","",null,null],[6,"P696","","",null,null],[6,"N696","","",null,null],[6,"U697","","",null,null],[6,"P697","","",null,null],[6,"N697","","",null,null],[6,"U698","","",null,null],[6,"P698","","",null,null],[6,"N698","","",null,null],[6,"U699","","",null,null],[6,"P699","","",null,null],[6,"N699","","",null,null],[6,"U700","","",null,null],[6,"P700","","",null,null],[6,"N700","","",null,null],[6,"U701","","",null,null],[6,"P701","","",null,null],[6,"N701","","",null,null],[6,"U702","","",null,null],[6,"P702","","",null,null],[6,"N702","","",null,null],[6,"U703","","",null,null],[6,"P703","","",null,null],[6,"N703","","",null,null],[6,"U704","","",null,null],[6,"P704","","",null,null],[6,"N704","","",null,null],[6,"U705","","",null,null],[6,"P705","","",null,null],[6,"N705","","",null,null],[6,"U706","","",null,null],[6,"P706","","",null,null],[6,"N706","","",null,null],[6,"U707","","",null,null],[6,"P707","","",null,null],[6,"N707","","",null,null],[6,"U708","","",null,null],[6,"P708","","",null,null],[6,"N708","","",null,null],[6,"U709","","",null,null],[6,"P709","","",null,null],[6,"N709","","",null,null],[6,"U710","","",null,null],[6,"P710","","",null,null],[6,"N710","","",null,null],[6,"U711","","",null,null],[6,"P711","","",null,null],[6,"N711","","",null,null],[6,"U712","","",null,null],[6,"P712","","",null,null],[6,"N712","","",null,null],[6,"U713","","",null,null],[6,"P713","","",null,null],[6,"N713","","",null,null],[6,"U714","","",null,null],[6,"P714","","",null,null],[6,"N714","","",null,null],[6,"U715","","",null,null],[6,"P715","","",null,null],[6,"N715","","",null,null],[6,"U716","","",null,null],[6,"P716","","",null,null],[6,"N716","","",null,null],[6,"U717","","",null,null],[6,"P717","","",null,null],[6,"N717","","",null,null],[6,"U718","","",null,null],[6,"P718","","",null,null],[6,"N718","","",null,null],[6,"U719","","",null,null],[6,"P719","","",null,null],[6,"N719","","",null,null],[6,"U720","","",null,null],[6,"P720","","",null,null],[6,"N720","","",null,null],[6,"U721","","",null,null],[6,"P721","","",null,null],[6,"N721","","",null,null],[6,"U722","","",null,null],[6,"P722","","",null,null],[6,"N722","","",null,null],[6,"U723","","",null,null],[6,"P723","","",null,null],[6,"N723","","",null,null],[6,"U724","","",null,null],[6,"P724","","",null,null],[6,"N724","","",null,null],[6,"U725","","",null,null],[6,"P725","","",null,null],[6,"N725","","",null,null],[6,"U726","","",null,null],[6,"P726","","",null,null],[6,"N726","","",null,null],[6,"U727","","",null,null],[6,"P727","","",null,null],[6,"N727","","",null,null],[6,"U728","","",null,null],[6,"P728","","",null,null],[6,"N728","","",null,null],[6,"U729","","",null,null],[6,"P729","","",null,null],[6,"N729","","",null,null],[6,"U730","","",null,null],[6,"P730","","",null,null],[6,"N730","","",null,null],[6,"U731","","",null,null],[6,"P731","","",null,null],[6,"N731","","",null,null],[6,"U732","","",null,null],[6,"P732","","",null,null],[6,"N732","","",null,null],[6,"U733","","",null,null],[6,"P733","","",null,null],[6,"N733","","",null,null],[6,"U734","","",null,null],[6,"P734","","",null,null],[6,"N734","","",null,null],[6,"U735","","",null,null],[6,"P735","","",null,null],[6,"N735","","",null,null],[6,"U736","","",null,null],[6,"P736","","",null,null],[6,"N736","","",null,null],[6,"U737","","",null,null],[6,"P737","","",null,null],[6,"N737","","",null,null],[6,"U738","","",null,null],[6,"P738","","",null,null],[6,"N738","","",null,null],[6,"U739","","",null,null],[6,"P739","","",null,null],[6,"N739","","",null,null],[6,"U740","","",null,null],[6,"P740","","",null,null],[6,"N740","","",null,null],[6,"U741","","",null,null],[6,"P741","","",null,null],[6,"N741","","",null,null],[6,"U742","","",null,null],[6,"P742","","",null,null],[6,"N742","","",null,null],[6,"U743","","",null,null],[6,"P743","","",null,null],[6,"N743","","",null,null],[6,"U744","","",null,null],[6,"P744","","",null,null],[6,"N744","","",null,null],[6,"U745","","",null,null],[6,"P745","","",null,null],[6,"N745","","",null,null],[6,"U746","","",null,null],[6,"P746","","",null,null],[6,"N746","","",null,null],[6,"U747","","",null,null],[6,"P747","","",null,null],[6,"N747","","",null,null],[6,"U748","","",null,null],[6,"P748","","",null,null],[6,"N748","","",null,null],[6,"U749","","",null,null],[6,"P749","","",null,null],[6,"N749","","",null,null],[6,"U750","","",null,null],[6,"P750","","",null,null],[6,"N750","","",null,null],[6,"U751","","",null,null],[6,"P751","","",null,null],[6,"N751","","",null,null],[6,"U752","","",null,null],[6,"P752","","",null,null],[6,"N752","","",null,null],[6,"U753","","",null,null],[6,"P753","","",null,null],[6,"N753","","",null,null],[6,"U754","","",null,null],[6,"P754","","",null,null],[6,"N754","","",null,null],[6,"U755","","",null,null],[6,"P755","","",null,null],[6,"N755","","",null,null],[6,"U756","","",null,null],[6,"P756","","",null,null],[6,"N756","","",null,null],[6,"U757","","",null,null],[6,"P757","","",null,null],[6,"N757","","",null,null],[6,"U758","","",null,null],[6,"P758","","",null,null],[6,"N758","","",null,null],[6,"U759","","",null,null],[6,"P759","","",null,null],[6,"N759","","",null,null],[6,"U760","","",null,null],[6,"P760","","",null,null],[6,"N760","","",null,null],[6,"U761","","",null,null],[6,"P761","","",null,null],[6,"N761","","",null,null],[6,"U762","","",null,null],[6,"P762","","",null,null],[6,"N762","","",null,null],[6,"U763","","",null,null],[6,"P763","","",null,null],[6,"N763","","",null,null],[6,"U764","","",null,null],[6,"P764","","",null,null],[6,"N764","","",null,null],[6,"U765","","",null,null],[6,"P765","","",null,null],[6,"N765","","",null,null],[6,"U766","","",null,null],[6,"P766","","",null,null],[6,"N766","","",null,null],[6,"U767","","",null,null],[6,"P767","","",null,null],[6,"N767","","",null,null],[6,"U768","","",null,null],[6,"P768","","",null,null],[6,"N768","","",null,null],[6,"U769","","",null,null],[6,"P769","","",null,null],[6,"N769","","",null,null],[6,"U770","","",null,null],[6,"P770","","",null,null],[6,"N770","","",null,null],[6,"U771","","",null,null],[6,"P771","","",null,null],[6,"N771","","",null,null],[6,"U772","","",null,null],[6,"P772","","",null,null],[6,"N772","","",null,null],[6,"U773","","",null,null],[6,"P773","","",null,null],[6,"N773","","",null,null],[6,"U774","","",null,null],[6,"P774","","",null,null],[6,"N774","","",null,null],[6,"U775","","",null,null],[6,"P775","","",null,null],[6,"N775","","",null,null],[6,"U776","","",null,null],[6,"P776","","",null,null],[6,"N776","","",null,null],[6,"U777","","",null,null],[6,"P777","","",null,null],[6,"N777","","",null,null],[6,"U778","","",null,null],[6,"P778","","",null,null],[6,"N778","","",null,null],[6,"U779","","",null,null],[6,"P779","","",null,null],[6,"N779","","",null,null],[6,"U780","","",null,null],[6,"P780","","",null,null],[6,"N780","","",null,null],[6,"U781","","",null,null],[6,"P781","","",null,null],[6,"N781","","",null,null],[6,"U782","","",null,null],[6,"P782","","",null,null],[6,"N782","","",null,null],[6,"U783","","",null,null],[6,"P783","","",null,null],[6,"N783","","",null,null],[6,"U784","","",null,null],[6,"P784","","",null,null],[6,"N784","","",null,null],[6,"U785","","",null,null],[6,"P785","","",null,null],[6,"N785","","",null,null],[6,"U786","","",null,null],[6,"P786","","",null,null],[6,"N786","","",null,null],[6,"U787","","",null,null],[6,"P787","","",null,null],[6,"N787","","",null,null],[6,"U788","","",null,null],[6,"P788","","",null,null],[6,"N788","","",null,null],[6,"U789","","",null,null],[6,"P789","","",null,null],[6,"N789","","",null,null],[6,"U790","","",null,null],[6,"P790","","",null,null],[6,"N790","","",null,null],[6,"U791","","",null,null],[6,"P791","","",null,null],[6,"N791","","",null,null],[6,"U792","","",null,null],[6,"P792","","",null,null],[6,"N792","","",null,null],[6,"U793","","",null,null],[6,"P793","","",null,null],[6,"N793","","",null,null],[6,"U794","","",null,null],[6,"P794","","",null,null],[6,"N794","","",null,null],[6,"U795","","",null,null],[6,"P795","","",null,null],[6,"N795","","",null,null],[6,"U796","","",null,null],[6,"P796","","",null,null],[6,"N796","","",null,null],[6,"U797","","",null,null],[6,"P797","","",null,null],[6,"N797","","",null,null],[6,"U798","","",null,null],[6,"P798","","",null,null],[6,"N798","","",null,null],[6,"U799","","",null,null],[6,"P799","","",null,null],[6,"N799","","",null,null],[6,"U800","","",null,null],[6,"P800","","",null,null],[6,"N800","","",null,null],[6,"U801","","",null,null],[6,"P801","","",null,null],[6,"N801","","",null,null],[6,"U802","","",null,null],[6,"P802","","",null,null],[6,"N802","","",null,null],[6,"U803","","",null,null],[6,"P803","","",null,null],[6,"N803","","",null,null],[6,"U804","","",null,null],[6,"P804","","",null,null],[6,"N804","","",null,null],[6,"U805","","",null,null],[6,"P805","","",null,null],[6,"N805","","",null,null],[6,"U806","","",null,null],[6,"P806","","",null,null],[6,"N806","","",null,null],[6,"U807","","",null,null],[6,"P807","","",null,null],[6,"N807","","",null,null],[6,"U808","","",null,null],[6,"P808","","",null,null],[6,"N808","","",null,null],[6,"U809","","",null,null],[6,"P809","","",null,null],[6,"N809","","",null,null],[6,"U810","","",null,null],[6,"P810","","",null,null],[6,"N810","","",null,null],[6,"U811","","",null,null],[6,"P811","","",null,null],[6,"N811","","",null,null],[6,"U812","","",null,null],[6,"P812","","",null,null],[6,"N812","","",null,null],[6,"U813","","",null,null],[6,"P813","","",null,null],[6,"N813","","",null,null],[6,"U814","","",null,null],[6,"P814","","",null,null],[6,"N814","","",null,null],[6,"U815","","",null,null],[6,"P815","","",null,null],[6,"N815","","",null,null],[6,"U816","","",null,null],[6,"P816","","",null,null],[6,"N816","","",null,null],[6,"U817","","",null,null],[6,"P817","","",null,null],[6,"N817","","",null,null],[6,"U818","","",null,null],[6,"P818","","",null,null],[6,"N818","","",null,null],[6,"U819","","",null,null],[6,"P819","","",null,null],[6,"N819","","",null,null],[6,"U820","","",null,null],[6,"P820","","",null,null],[6,"N820","","",null,null],[6,"U821","","",null,null],[6,"P821","","",null,null],[6,"N821","","",null,null],[6,"U822","","",null,null],[6,"P822","","",null,null],[6,"N822","","",null,null],[6,"U823","","",null,null],[6,"P823","","",null,null],[6,"N823","","",null,null],[6,"U824","","",null,null],[6,"P824","","",null,null],[6,"N824","","",null,null],[6,"U825","","",null,null],[6,"P825","","",null,null],[6,"N825","","",null,null],[6,"U826","","",null,null],[6,"P826","","",null,null],[6,"N826","","",null,null],[6,"U827","","",null,null],[6,"P827","","",null,null],[6,"N827","","",null,null],[6,"U828","","",null,null],[6,"P828","","",null,null],[6,"N828","","",null,null],[6,"U829","","",null,null],[6,"P829","","",null,null],[6,"N829","","",null,null],[6,"U830","","",null,null],[6,"P830","","",null,null],[6,"N830","","",null,null],[6,"U831","","",null,null],[6,"P831","","",null,null],[6,"N831","","",null,null],[6,"U832","","",null,null],[6,"P832","","",null,null],[6,"N832","","",null,null],[6,"U833","","",null,null],[6,"P833","","",null,null],[6,"N833","","",null,null],[6,"U834","","",null,null],[6,"P834","","",null,null],[6,"N834","","",null,null],[6,"U835","","",null,null],[6,"P835","","",null,null],[6,"N835","","",null,null],[6,"U836","","",null,null],[6,"P836","","",null,null],[6,"N836","","",null,null],[6,"U837","","",null,null],[6,"P837","","",null,null],[6,"N837","","",null,null],[6,"U838","","",null,null],[6,"P838","","",null,null],[6,"N838","","",null,null],[6,"U839","","",null,null],[6,"P839","","",null,null],[6,"N839","","",null,null],[6,"U840","","",null,null],[6,"P840","","",null,null],[6,"N840","","",null,null],[6,"U841","","",null,null],[6,"P841","","",null,null],[6,"N841","","",null,null],[6,"U842","","",null,null],[6,"P842","","",null,null],[6,"N842","","",null,null],[6,"U843","","",null,null],[6,"P843","","",null,null],[6,"N843","","",null,null],[6,"U844","","",null,null],[6,"P844","","",null,null],[6,"N844","","",null,null],[6,"U845","","",null,null],[6,"P845","","",null,null],[6,"N845","","",null,null],[6,"U846","","",null,null],[6,"P846","","",null,null],[6,"N846","","",null,null],[6,"U847","","",null,null],[6,"P847","","",null,null],[6,"N847","","",null,null],[6,"U848","","",null,null],[6,"P848","","",null,null],[6,"N848","","",null,null],[6,"U849","","",null,null],[6,"P849","","",null,null],[6,"N849","","",null,null],[6,"U850","","",null,null],[6,"P850","","",null,null],[6,"N850","","",null,null],[6,"U851","","",null,null],[6,"P851","","",null,null],[6,"N851","","",null,null],[6,"U852","","",null,null],[6,"P852","","",null,null],[6,"N852","","",null,null],[6,"U853","","",null,null],[6,"P853","","",null,null],[6,"N853","","",null,null],[6,"U854","","",null,null],[6,"P854","","",null,null],[6,"N854","","",null,null],[6,"U855","","",null,null],[6,"P855","","",null,null],[6,"N855","","",null,null],[6,"U856","","",null,null],[6,"P856","","",null,null],[6,"N856","","",null,null],[6,"U857","","",null,null],[6,"P857","","",null,null],[6,"N857","","",null,null],[6,"U858","","",null,null],[6,"P858","","",null,null],[6,"N858","","",null,null],[6,"U859","","",null,null],[6,"P859","","",null,null],[6,"N859","","",null,null],[6,"U860","","",null,null],[6,"P860","","",null,null],[6,"N860","","",null,null],[6,"U861","","",null,null],[6,"P861","","",null,null],[6,"N861","","",null,null],[6,"U862","","",null,null],[6,"P862","","",null,null],[6,"N862","","",null,null],[6,"U863","","",null,null],[6,"P863","","",null,null],[6,"N863","","",null,null],[6,"U864","","",null,null],[6,"P864","","",null,null],[6,"N864","","",null,null],[6,"U865","","",null,null],[6,"P865","","",null,null],[6,"N865","","",null,null],[6,"U866","","",null,null],[6,"P866","","",null,null],[6,"N866","","",null,null],[6,"U867","","",null,null],[6,"P867","","",null,null],[6,"N867","","",null,null],[6,"U868","","",null,null],[6,"P868","","",null,null],[6,"N868","","",null,null],[6,"U869","","",null,null],[6,"P869","","",null,null],[6,"N869","","",null,null],[6,"U870","","",null,null],[6,"P870","","",null,null],[6,"N870","","",null,null],[6,"U871","","",null,null],[6,"P871","","",null,null],[6,"N871","","",null,null],[6,"U872","","",null,null],[6,"P872","","",null,null],[6,"N872","","",null,null],[6,"U873","","",null,null],[6,"P873","","",null,null],[6,"N873","","",null,null],[6,"U874","","",null,null],[6,"P874","","",null,null],[6,"N874","","",null,null],[6,"U875","","",null,null],[6,"P875","","",null,null],[6,"N875","","",null,null],[6,"U876","","",null,null],[6,"P876","","",null,null],[6,"N876","","",null,null],[6,"U877","","",null,null],[6,"P877","","",null,null],[6,"N877","","",null,null],[6,"U878","","",null,null],[6,"P878","","",null,null],[6,"N878","","",null,null],[6,"U879","","",null,null],[6,"P879","","",null,null],[6,"N879","","",null,null],[6,"U880","","",null,null],[6,"P880","","",null,null],[6,"N880","","",null,null],[6,"U881","","",null,null],[6,"P881","","",null,null],[6,"N881","","",null,null],[6,"U882","","",null,null],[6,"P882","","",null,null],[6,"N882","","",null,null],[6,"U883","","",null,null],[6,"P883","","",null,null],[6,"N883","","",null,null],[6,"U884","","",null,null],[6,"P884","","",null,null],[6,"N884","","",null,null],[6,"U885","","",null,null],[6,"P885","","",null,null],[6,"N885","","",null,null],[6,"U886","","",null,null],[6,"P886","","",null,null],[6,"N886","","",null,null],[6,"U887","","",null,null],[6,"P887","","",null,null],[6,"N887","","",null,null],[6,"U888","","",null,null],[6,"P888","","",null,null],[6,"N888","","",null,null],[6,"U889","","",null,null],[6,"P889","","",null,null],[6,"N889","","",null,null],[6,"U890","","",null,null],[6,"P890","","",null,null],[6,"N890","","",null,null],[6,"U891","","",null,null],[6,"P891","","",null,null],[6,"N891","","",null,null],[6,"U892","","",null,null],[6,"P892","","",null,null],[6,"N892","","",null,null],[6,"U893","","",null,null],[6,"P893","","",null,null],[6,"N893","","",null,null],[6,"U894","","",null,null],[6,"P894","","",null,null],[6,"N894","","",null,null],[6,"U895","","",null,null],[6,"P895","","",null,null],[6,"N895","","",null,null],[6,"U896","","",null,null],[6,"P896","","",null,null],[6,"N896","","",null,null],[6,"U897","","",null,null],[6,"P897","","",null,null],[6,"N897","","",null,null],[6,"U898","","",null,null],[6,"P898","","",null,null],[6,"N898","","",null,null],[6,"U899","","",null,null],[6,"P899","","",null,null],[6,"N899","","",null,null],[6,"U900","","",null,null],[6,"P900","","",null,null],[6,"N900","","",null,null],[6,"U901","","",null,null],[6,"P901","","",null,null],[6,"N901","","",null,null],[6,"U902","","",null,null],[6,"P902","","",null,null],[6,"N902","","",null,null],[6,"U903","","",null,null],[6,"P903","","",null,null],[6,"N903","","",null,null],[6,"U904","","",null,null],[6,"P904","","",null,null],[6,"N904","","",null,null],[6,"U905","","",null,null],[6,"P905","","",null,null],[6,"N905","","",null,null],[6,"U906","","",null,null],[6,"P906","","",null,null],[6,"N906","","",null,null],[6,"U907","","",null,null],[6,"P907","","",null,null],[6,"N907","","",null,null],[6,"U908","","",null,null],[6,"P908","","",null,null],[6,"N908","","",null,null],[6,"U909","","",null,null],[6,"P909","","",null,null],[6,"N909","","",null,null],[6,"U910","","",null,null],[6,"P910","","",null,null],[6,"N910","","",null,null],[6,"U911","","",null,null],[6,"P911","","",null,null],[6,"N911","","",null,null],[6,"U912","","",null,null],[6,"P912","","",null,null],[6,"N912","","",null,null],[6,"U913","","",null,null],[6,"P913","","",null,null],[6,"N913","","",null,null],[6,"U914","","",null,null],[6,"P914","","",null,null],[6,"N914","","",null,null],[6,"U915","","",null,null],[6,"P915","","",null,null],[6,"N915","","",null,null],[6,"U916","","",null,null],[6,"P916","","",null,null],[6,"N916","","",null,null],[6,"U917","","",null,null],[6,"P917","","",null,null],[6,"N917","","",null,null],[6,"U918","","",null,null],[6,"P918","","",null,null],[6,"N918","","",null,null],[6,"U919","","",null,null],[6,"P919","","",null,null],[6,"N919","","",null,null],[6,"U920","","",null,null],[6,"P920","","",null,null],[6,"N920","","",null,null],[6,"U921","","",null,null],[6,"P921","","",null,null],[6,"N921","","",null,null],[6,"U922","","",null,null],[6,"P922","","",null,null],[6,"N922","","",null,null],[6,"U923","","",null,null],[6,"P923","","",null,null],[6,"N923","","",null,null],[6,"U924","","",null,null],[6,"P924","","",null,null],[6,"N924","","",null,null],[6,"U925","","",null,null],[6,"P925","","",null,null],[6,"N925","","",null,null],[6,"U926","","",null,null],[6,"P926","","",null,null],[6,"N926","","",null,null],[6,"U927","","",null,null],[6,"P927","","",null,null],[6,"N927","","",null,null],[6,"U928","","",null,null],[6,"P928","","",null,null],[6,"N928","","",null,null],[6,"U929","","",null,null],[6,"P929","","",null,null],[6,"N929","","",null,null],[6,"U930","","",null,null],[6,"P930","","",null,null],[6,"N930","","",null,null],[6,"U931","","",null,null],[6,"P931","","",null,null],[6,"N931","","",null,null],[6,"U932","","",null,null],[6,"P932","","",null,null],[6,"N932","","",null,null],[6,"U933","","",null,null],[6,"P933","","",null,null],[6,"N933","","",null,null],[6,"U934","","",null,null],[6,"P934","","",null,null],[6,"N934","","",null,null],[6,"U935","","",null,null],[6,"P935","","",null,null],[6,"N935","","",null,null],[6,"U936","","",null,null],[6,"P936","","",null,null],[6,"N936","","",null,null],[6,"U937","","",null,null],[6,"P937","","",null,null],[6,"N937","","",null,null],[6,"U938","","",null,null],[6,"P938","","",null,null],[6,"N938","","",null,null],[6,"U939","","",null,null],[6,"P939","","",null,null],[6,"N939","","",null,null],[6,"U940","","",null,null],[6,"P940","","",null,null],[6,"N940","","",null,null],[6,"U941","","",null,null],[6,"P941","","",null,null],[6,"N941","","",null,null],[6,"U942","","",null,null],[6,"P942","","",null,null],[6,"N942","","",null,null],[6,"U943","","",null,null],[6,"P943","","",null,null],[6,"N943","","",null,null],[6,"U944","","",null,null],[6,"P944","","",null,null],[6,"N944","","",null,null],[6,"U945","","",null,null],[6,"P945","","",null,null],[6,"N945","","",null,null],[6,"U946","","",null,null],[6,"P946","","",null,null],[6,"N946","","",null,null],[6,"U947","","",null,null],[6,"P947","","",null,null],[6,"N947","","",null,null],[6,"U948","","",null,null],[6,"P948","","",null,null],[6,"N948","","",null,null],[6,"U949","","",null,null],[6,"P949","","",null,null],[6,"N949","","",null,null],[6,"U950","","",null,null],[6,"P950","","",null,null],[6,"N950","","",null,null],[6,"U951","","",null,null],[6,"P951","","",null,null],[6,"N951","","",null,null],[6,"U952","","",null,null],[6,"P952","","",null,null],[6,"N952","","",null,null],[6,"U953","","",null,null],[6,"P953","","",null,null],[6,"N953","","",null,null],[6,"U954","","",null,null],[6,"P954","","",null,null],[6,"N954","","",null,null],[6,"U955","","",null,null],[6,"P955","","",null,null],[6,"N955","","",null,null],[6,"U956","","",null,null],[6,"P956","","",null,null],[6,"N956","","",null,null],[6,"U957","","",null,null],[6,"P957","","",null,null],[6,"N957","","",null,null],[6,"U958","","",null,null],[6,"P958","","",null,null],[6,"N958","","",null,null],[6,"U959","","",null,null],[6,"P959","","",null,null],[6,"N959","","",null,null],[6,"U960","","",null,null],[6,"P960","","",null,null],[6,"N960","","",null,null],[6,"U961","","",null,null],[6,"P961","","",null,null],[6,"N961","","",null,null],[6,"U962","","",null,null],[6,"P962","","",null,null],[6,"N962","","",null,null],[6,"U963","","",null,null],[6,"P963","","",null,null],[6,"N963","","",null,null],[6,"U964","","",null,null],[6,"P964","","",null,null],[6,"N964","","",null,null],[6,"U965","","",null,null],[6,"P965","","",null,null],[6,"N965","","",null,null],[6,"U966","","",null,null],[6,"P966","","",null,null],[6,"N966","","",null,null],[6,"U967","","",null,null],[6,"P967","","",null,null],[6,"N967","","",null,null],[6,"U968","","",null,null],[6,"P968","","",null,null],[6,"N968","","",null,null],[6,"U969","","",null,null],[6,"P969","","",null,null],[6,"N969","","",null,null],[6,"U970","","",null,null],[6,"P970","","",null,null],[6,"N970","","",null,null],[6,"U971","","",null,null],[6,"P971","","",null,null],[6,"N971","","",null,null],[6,"U972","","",null,null],[6,"P972","","",null,null],[6,"N972","","",null,null],[6,"U973","","",null,null],[6,"P973","","",null,null],[6,"N973","","",null,null],[6,"U974","","",null,null],[6,"P974","","",null,null],[6,"N974","","",null,null],[6,"U975","","",null,null],[6,"P975","","",null,null],[6,"N975","","",null,null],[6,"U976","","",null,null],[6,"P976","","",null,null],[6,"N976","","",null,null],[6,"U977","","",null,null],[6,"P977","","",null,null],[6,"N977","","",null,null],[6,"U978","","",null,null],[6,"P978","","",null,null],[6,"N978","","",null,null],[6,"U979","","",null,null],[6,"P979","","",null,null],[6,"N979","","",null,null],[6,"U980","","",null,null],[6,"P980","","",null,null],[6,"N980","","",null,null],[6,"U981","","",null,null],[6,"P981","","",null,null],[6,"N981","","",null,null],[6,"U982","","",null,null],[6,"P982","","",null,null],[6,"N982","","",null,null],[6,"U983","","",null,null],[6,"P983","","",null,null],[6,"N983","","",null,null],[6,"U984","","",null,null],[6,"P984","","",null,null],[6,"N984","","",null,null],[6,"U985","","",null,null],[6,"P985","","",null,null],[6,"N985","","",null,null],[6,"U986","","",null,null],[6,"P986","","",null,null],[6,"N986","","",null,null],[6,"U987","","",null,null],[6,"P987","","",null,null],[6,"N987","","",null,null],[6,"U988","","",null,null],[6,"P988","","",null,null],[6,"N988","","",null,null],[6,"U989","","",null,null],[6,"P989","","",null,null],[6,"N989","","",null,null],[6,"U990","","",null,null],[6,"P990","","",null,null],[6,"N990","","",null,null],[6,"U991","","",null,null],[6,"P991","","",null,null],[6,"N991","","",null,null],[6,"U992","","",null,null],[6,"P992","","",null,null],[6,"N992","","",null,null],[6,"U993","","",null,null],[6,"P993","","",null,null],[6,"N993","","",null,null],[6,"U994","","",null,null],[6,"P994","","",null,null],[6,"N994","","",null,null],[6,"U995","","",null,null],[6,"P995","","",null,null],[6,"N995","","",null,null],[6,"U996","","",null,null],[6,"P996","","",null,null],[6,"N996","","",null,null],[6,"U997","","",null,null],[6,"P997","","",null,null],[6,"N997","","",null,null],[6,"U998","","",null,null],[6,"P998","","",null,null],[6,"N998","","",null,null],[6,"U999","","",null,null],[6,"P999","","",null,null],[6,"N999","","",null,null],[6,"U1000","","",null,null],[6,"P1000","","",null,null],[6,"N1000","","",null,null],[6,"U1001","","",null,null],[6,"P1001","","",null,null],[6,"N1001","","",null,null],[6,"U1002","","",null,null],[6,"P1002","","",null,null],[6,"N1002","","",null,null],[6,"U1003","","",null,null],[6,"P1003","","",null,null],[6,"N1003","","",null,null],[6,"U1004","","",null,null],[6,"P1004","","",null,null],[6,"N1004","","",null,null],[6,"U1005","","",null,null],[6,"P1005","","",null,null],[6,"N1005","","",null,null],[6,"U1006","","",null,null],[6,"P1006","","",null,null],[6,"N1006","","",null,null],[6,"U1007","","",null,null],[6,"P1007","","",null,null],[6,"N1007","","",null,null],[6,"U1008","","",null,null],[6,"P1008","","",null,null],[6,"N1008","","",null,null],[6,"U1009","","",null,null],[6,"P1009","","",null,null],[6,"N1009","","",null,null],[6,"U1010","","",null,null],[6,"P1010","","",null,null],[6,"N1010","","",null,null],[6,"U1011","","",null,null],[6,"P1011","","",null,null],[6,"N1011","","",null,null],[6,"U1012","","",null,null],[6,"P1012","","",null,null],[6,"N1012","","",null,null],[6,"U1013","","",null,null],[6,"P1013","","",null,null],[6,"N1013","","",null,null],[6,"U1014","","",null,null],[6,"P1014","","",null,null],[6,"N1014","","",null,null],[6,"U1015","","",null,null],[6,"P1015","","",null,null],[6,"N1015","","",null,null],[6,"U1016","","",null,null],[6,"P1016","","",null,null],[6,"N1016","","",null,null],[6,"U1017","","",null,null],[6,"P1017","","",null,null],[6,"N1017","","",null,null],[6,"U1018","","",null,null],[6,"P1018","","",null,null],[6,"N1018","","",null,null],[6,"U1019","","",null,null],[6,"P1019","","",null,null],[6,"N1019","","",null,null],[6,"U1020","","",null,null],[6,"P1020","","",null,null],[6,"N1020","","",null,null],[6,"U1021","","",null,null],[6,"P1021","","",null,null],[6,"N1021","","",null,null],[6,"U1022","","",null,null],[6,"P1022","","",null,null],[6,"N1022","","",null,null],[6,"U1023","","",null,null],[6,"P1023","","",null,null],[6,"N1023","","",null,null],[6,"U1024","","",null,null],[6,"P1024","","",null,null],[6,"N1024","","",null,null],[6,"U2048","","",null,null],[6,"P2048","","",null,null],[6,"N2048","","",null,null],[6,"U4096","","",null,null],[6,"P4096","","",null,null],[6,"N4096","","",null,null],[6,"U8192","","",null,null],[6,"P8192","","",null,null],[6,"N8192","","",null,null],[6,"U16384","","",null,null],[6,"P16384","","",null,null],[6,"N16384","","",null,null],[6,"U32768","","",null,null],[6,"P32768","","",null,null],[6,"N32768","","",null,null],[6,"U65536","","",null,null],[6,"P65536","","",null,null],[6,"N65536","","",null,null],[6,"U131072","","",null,null],[6,"P131072","","",null,null],[6,"N131072","","",null,null],[6,"U262144","","",null,null],[6,"P262144","","",null,null],[6,"N262144","","",null,null],[6,"U524288","","",null,null],[6,"P524288","","",null,null],[6,"N524288","","",null,null],[6,"U1048576","","",null,null],[6,"P1048576","","",null,null],[6,"N1048576","","",null,null],[6,"U2097152","","",null,null],[6,"P2097152","","",null,null],[6,"N2097152","","",null,null],[6,"U4194304","","",null,null],[6,"P4194304","","",null,null],[6,"N4194304","","",null,null],[6,"U8388608","","",null,null],[6,"P8388608","","",null,null],[6,"N8388608","","",null,null],[6,"U16777216","","",null,null],[6,"P16777216","","",null,null],[6,"N16777216","","",null,null],[6,"U33554432","","",null,null],[6,"P33554432","","",null,null],[6,"N33554432","","",null,null],[6,"U67108864","","",null,null],[6,"P67108864","","",null,null],[6,"N67108864","","",null,null],[6,"U134217728","","",null,null],[6,"P134217728","","",null,null],[6,"N134217728","","",null,null],[6,"U268435456","","",null,null],[6,"P268435456","","",null,null],[6,"N268435456","","",null,null],[6,"U536870912","","",null,null],[6,"P536870912","","",null,null],[6,"N536870912","","",null,null],[6,"U1073741824","","",null,null],[6,"P1073741824","","",null,null],[6,"N1073741824","","",null,null],[6,"U2147483648","","",null,null],[6,"P2147483648","","",null,null],[6,"N2147483648","","",null,null],[6,"U4294967296","","",null,null],[6,"P4294967296","","",null,null],[6,"N4294967296","","",null,null],[6,"U8589934592","","",null,null],[6,"P8589934592","","",null,null],[6,"N8589934592","","",null,null],[6,"U17179869184","","",null,null],[6,"P17179869184","","",null,null],[6,"N17179869184","","",null,null],[6,"U34359738368","","",null,null],[6,"P34359738368","","",null,null],[6,"N34359738368","","",null,null],[6,"U68719476736","","",null,null],[6,"P68719476736","","",null,null],[6,"N68719476736","","",null,null],[6,"U137438953472","","",null,null],[6,"P137438953472","","",null,null],[6,"N137438953472","","",null,null],[6,"U274877906944","","",null,null],[6,"P274877906944","","",null,null],[6,"N274877906944","","",null,null],[6,"U549755813888","","",null,null],[6,"P549755813888","","",null,null],[6,"N549755813888","","",null,null],[6,"U1099511627776","","",null,null],[6,"P1099511627776","","",null,null],[6,"N1099511627776","","",null,null],[6,"U2199023255552","","",null,null],[6,"P2199023255552","","",null,null],[6,"N2199023255552","","",null,null],[6,"U4398046511104","","",null,null],[6,"P4398046511104","","",null,null],[6,"N4398046511104","","",null,null],[6,"U8796093022208","","",null,null],[6,"P8796093022208","","",null,null],[6,"N8796093022208","","",null,null],[6,"U17592186044416","","",null,null],[6,"P17592186044416","","",null,null],[6,"N17592186044416","","",null,null],[6,"U35184372088832","","",null,null],[6,"P35184372088832","","",null,null],[6,"N35184372088832","","",null,null],[6,"U70368744177664","","",null,null],[6,"P70368744177664","","",null,null],[6,"N70368744177664","","",null,null],[6,"U140737488355328","","",null,null],[6,"P140737488355328","","",null,null],[6,"N140737488355328","","",null,null],[6,"U281474976710656","","",null,null],[6,"P281474976710656","","",null,null],[6,"N281474976710656","","",null,null],[6,"U562949953421312","","",null,null],[6,"P562949953421312","","",null,null],[6,"N562949953421312","","",null,null],[6,"U1125899906842624","","",null,null],[6,"P1125899906842624","","",null,null],[6,"N1125899906842624","","",null,null],[6,"U2251799813685248","","",null,null],[6,"P2251799813685248","","",null,null],[6,"N2251799813685248","","",null,null],[6,"U4503599627370496","","",null,null],[6,"P4503599627370496","","",null,null],[6,"N4503599627370496","","",null,null],[6,"U9007199254740992","","",null,null],[6,"P9007199254740992","","",null,null],[6,"N9007199254740992","","",null,null],[6,"U18014398509481984","","",null,null],[6,"P18014398509481984","","",null,null],[6,"N18014398509481984","","",null,null],[6,"U36028797018963968","","",null,null],[6,"P36028797018963968","","",null,null],[6,"N36028797018963968","","",null,null],[6,"U72057594037927936","","",null,null],[6,"P72057594037927936","","",null,null],[6,"N72057594037927936","","",null,null],[6,"U144115188075855872","","",null,null],[6,"P144115188075855872","","",null,null],[6,"N144115188075855872","","",null,null],[6,"U288230376151711744","","",null,null],[6,"P288230376151711744","","",null,null],[6,"N288230376151711744","","",null,null],[6,"U576460752303423488","","",null,null],[6,"P576460752303423488","","",null,null],[6,"N576460752303423488","","",null,null],[6,"U1152921504606846976","","",null,null],[6,"P1152921504606846976","","",null,null],[6,"N1152921504606846976","","",null,null],[6,"U2305843009213693952","","",null,null],[6,"P2305843009213693952","","",null,null],[6,"N2305843009213693952","","",null,null],[6,"U4611686018427387904","","",null,null],[6,"P4611686018427387904","","",null,null],[6,"N4611686018427387904","","",null,null],[6,"U9223372036854775808","","",null,null],[6,"U10000","","",null,null],[6,"P10000","","",null,null],[6,"N10000","","",null,null],[6,"U100000","","",null,null],[6,"P100000","","",null,null],[6,"N100000","","",null,null],[6,"U1000000","","",null,null],[6,"P1000000","","",null,null],[6,"N1000000","","",null,null],[6,"U10000000","","",null,null],[6,"P10000000","","",null,null],[6,"N10000000","","",null,null],[6,"U100000000","","",null,null],[6,"P100000000","","",null,null],[6,"N100000000","","",null,null],[6,"U1000000000","","",null,null],[6,"P1000000000","","",null,null],[6,"N1000000000","","",null,null],[6,"U10000000000","","",null,null],[6,"P10000000000","","",null,null],[6,"N10000000000","","",null,null],[6,"U100000000000","","",null,null],[6,"P100000000000","","",null,null],[6,"N100000000000","","",null,null],[6,"U1000000000000","","",null,null],[6,"P1000000000000","","",null,null],[6,"N1000000000000","","",null,null],[6,"U10000000000000","","",null,null],[6,"P10000000000000","","",null,null],[6,"N10000000000000","","",null,null],[6,"U100000000000000","","",null,null],[6,"P100000000000000","","",null,null],[6,"N100000000000000","","",null,null],[6,"U1000000000000000","","",null,null],[6,"P1000000000000000","","",null,null],[6,"N1000000000000000","","",null,null],[6,"U10000000000000000","","",null,null],[6,"P10000000000000000","","",null,null],[6,"N10000000000000000","","",null,null],[6,"U100000000000000000","","",null,null],[6,"P100000000000000000","","",null,null],[6,"N100000000000000000","","",null,null],[6,"U1000000000000000000","","",null,null],[6,"P1000000000000000000","","",null,null],[6,"N1000000000000000000","","",null,null],[6,"U10000000000000000000","","",null,null],[0,"bit","typenum","Type-level bits.",null,null],[3,"B0","typenum::bit","The type-level bit 0.",null,null],[3,"B1","","The type-level bit 1.",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"b0"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"b0"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"b0"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b0"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"b0"}}],[11,"new","","Instantiates a singleton representing this bit.",0,{"inputs":[],"output":{"name":"b0"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"b1"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"b1"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"b1"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"b1"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"b1"}}],[11,"new","","Instantiates a singleton representing this bit.",1,{"inputs":[],"output":{"name":"b1"}}],[11,"to_u8","","",0,{"inputs":[],"output":{"name":"u8"}}],[11,"to_bool","","",0,{"inputs":[],"output":{"name":"bool"}}],[11,"to_u8","","",1,{"inputs":[],"output":{"name":"u8"}}],[11,"to_bool","","",1,{"inputs":[],"output":{"name":"bool"}}],[11,"not","","",0,null],[11,"not","","",1,null],[11,"bitand","","",0,null],[11,"bitand","","",1,null],[11,"bitand","","",1,null],[11,"bitor","","",0,null],[11,"bitor","","",0,null],[11,"bitor","","",1,null],[11,"bitxor","","",0,null],[11,"bitxor","","",1,null],[11,"bitxor","","",0,null],[11,"bitxor","","",1,null],[11,"min","","",0,{"inputs":[{"name":"self"},{"name":"b0"}],"output":{"name":"b0"}}],[11,"min","","",0,{"inputs":[{"name":"self"},{"name":"b1"}],"output":{"name":"b0"}}],[11,"min","","",1,{"inputs":[{"name":"self"},{"name":"b0"}],"output":{"name":"b0"}}],[11,"min","","",1,{"inputs":[{"name":"self"},{"name":"b1"}],"output":{"name":"b1"}}],[11,"max","","",0,{"inputs":[{"name":"self"},{"name":"b0"}],"output":{"name":"b0"}}],[11,"max","","",0,{"inputs":[{"name":"self"},{"name":"b1"}],"output":{"name":"b1"}}],[11,"max","","",1,{"inputs":[{"name":"self"},{"name":"b0"}],"output":{"name":"b1"}}],[11,"max","","",1,{"inputs":[{"name":"self"},{"name":"b1"}],"output":{"name":"b1"}}],[0,"uint","typenum","Type-level unsigned integers.",null,null],[3,"UTerm","typenum::uint","The terminating type for `UInt`; it always comes after the most significant bit. `UTerm` by itself represents zero, which is aliased to `U0`.",null,null],[3,"UInt","","`UInt` is defined recursively, where `B` is the least significant bit and `U` is the rest of the number. Conceptually, `U` should be bound by the trait `Unsigned` and `B` should be bound by the trait `Bit`, but enforcing these bounds causes linear instead of logrithmic scaling in some places, so they are left off for now. They may be enforced in future.",null,null],[6,"GetBitOut","","",null,null],[6,"SetBitOut","","Alias for the result of calling `SetBit`: `SetBitOut<N, I, B> = <N as SetBit<I, B>>::Output`.",null,null],[8,"GetBit","","",null,null],[16,"Output","","",2,null],[8,"SetBit","","A type operator that, when implemented for unsigned integer `N`, sets the bit at position `I` to `B`.",null,null],[16,"Output","","",3,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"uterm"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"uterm"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"uterm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"uterm"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"uterm"}}],[11,"new","","Instantiates a singleton representing this unsigned integer.",4,{"inputs":[],"output":{"name":"uterm"}}],[11,"to_u8","","",4,{"inputs":[],"output":{"name":"u8"}}],[11,"to_u16","","",4,{"inputs":[],"output":{"name":"u16"}}],[11,"to_u32","","",4,{"inputs":[],"output":{"name":"u32"}}],[11,"to_u64","","",4,{"inputs":[],"output":{"name":"u64"}}],[11,"to_usize","","",4,{"inputs":[],"output":{"name":"usize"}}],[11,"to_i8","","",4,{"inputs":[],"output":{"name":"i8"}}],[11,"to_i16","","",4,{"inputs":[],"output":{"name":"i16"}}],[11,"to_i32","","",4,{"inputs":[],"output":{"name":"i32"}}],[11,"to_i64","","",4,{"inputs":[],"output":{"name":"i64"}}],[11,"to_isize","","",4,{"inputs":[],"output":{"name":"isize"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"uint"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"uint"}}],[11,"new","","Instantiates a singleton representing this unsigned integer.",5,{"inputs":[],"output":{"name":"uint"}}],[11,"to_u8","","",5,{"inputs":[],"output":{"name":"u8"}}],[11,"to_u16","","",5,{"inputs":[],"output":{"name":"u16"}}],[11,"to_u32","","",5,{"inputs":[],"output":{"name":"u32"}}],[11,"to_u64","","",5,{"inputs":[],"output":{"name":"u64"}}],[11,"to_usize","","",5,{"inputs":[],"output":{"name":"usize"}}],[11,"to_i8","","",5,{"inputs":[],"output":{"name":"i8"}}],[11,"to_i16","","",5,{"inputs":[],"output":{"name":"i16"}}],[11,"to_i32","","",5,{"inputs":[],"output":{"name":"i32"}}],[11,"to_i64","","",5,{"inputs":[],"output":{"name":"i64"}}],[11,"to_isize","","",5,{"inputs":[],"output":{"name":"isize"}}],[11,"len","","",4,null],[11,"len","","",5,null],[11,"add","","",4,null],[11,"add","","",5,null],[11,"add","","",4,null],[11,"add","","",5,null],[11,"add","","",5,null],[11,"add","","",4,null],[11,"add","","",5,null],[11,"add","","",5,null],[11,"add","","",5,null],[11,"add","","",5,null],[11,"add","","",5,null],[11,"sub","","",4,null],[11,"sub","","",5,null],[11,"sub","","",5,null],[11,"sub","","",5,null],[11,"sub","","",5,null],[11,"sub","","",4,null],[11,"sub","","",5,null],[11,"bitand","","",4,null],[11,"bitand","","",5,null],[11,"bitor","","",4,null],[11,"bitor","","",5,null],[11,"bitor","","",5,null],[11,"bitor","","",5,null],[11,"bitor","","",5,null],[11,"bitor","","",5,null],[11,"bitxor","","",4,null],[11,"bitxor","","",5,null],[11,"shl","","",4,null],[11,"shl","","",4,null],[11,"shl","","",5,null],[11,"shl","","",5,null],[11,"shl","","",5,null],[11,"shl","","",4,null],[11,"shl","","",5,null],[11,"shr","","",4,null],[11,"shr","","",5,null],[11,"shr","","",4,null],[11,"shr","","",4,null],[11,"shr","","",5,null],[11,"shr","","",5,null],[11,"shr","","",5,null],[11,"mul","","",5,null],[11,"mul","","",4,null],[11,"mul","","",4,null],[11,"mul","","",5,null],[11,"mul","","",5,null],[11,"mul","","",4,null],[11,"mul","","",5,null],[11,"mul","","",5,null],[11,"div","","",4,null],[11,"div","","",5,null],[11,"rem","","",4,null],[11,"rem","","",5,null],[11,"partial_div","","",4,null],[11,"partial_div","","",5,null],[11,"min","","",4,null],[11,"min","","",5,null],[11,"max","","",4,null],[11,"max","","",5,null],[0,"int","typenum","Type-level signed integers.",null,null],[3,"PInt","typenum::int","Type-level signed integers with positive sign.",null,null],[3,"NInt","","Type-level signed integers with negative sign.",null,null],[3,"Z0","","The type-level signed integer 0.",null,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"pint"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"pint"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"pint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"pint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"pint"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"pint"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"pint"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"pint"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"pint"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"pint"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"nint"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"nint"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"nint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"nint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"nint"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"nint"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"nint"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"nint"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"nint"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"nint"}}],[11,"new","","Instantiates a singleton representing this strictly positive integer.",6,{"inputs":[],"output":{"name":"pint"}}],[11,"new","","Instantiates a singleton representing this strictly negative integer.",7,{"inputs":[],"output":{"name":"nint"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"z0"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"z0"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"z0"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"z0"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"z0"}}],[11,"new","","Instantiates a singleton representing the integer 0.",8,{"inputs":[],"output":{"name":"z0"}}],[11,"to_i8","","",8,{"inputs":[],"output":{"name":"i8"}}],[11,"to_i16","","",8,{"inputs":[],"output":{"name":"i16"}}],[11,"to_i32","","",8,{"inputs":[],"output":{"name":"i32"}}],[11,"to_i64","","",8,{"inputs":[],"output":{"name":"i64"}}],[11,"to_isize","","",8,{"inputs":[],"output":{"name":"isize"}}],[11,"to_i8","","",6,{"inputs":[],"output":{"name":"i8"}}],[11,"to_i16","","",6,{"inputs":[],"output":{"name":"i16"}}],[11,"to_i32","","",6,{"inputs":[],"output":{"name":"i32"}}],[11,"to_i64","","",6,{"inputs":[],"output":{"name":"i64"}}],[11,"to_isize","","",6,{"inputs":[],"output":{"name":"isize"}}],[11,"to_i8","","",7,{"inputs":[],"output":{"name":"i8"}}],[11,"to_i16","","",7,{"inputs":[],"output":{"name":"i16"}}],[11,"to_i32","","",7,{"inputs":[],"output":{"name":"i32"}}],[11,"to_i64","","",7,{"inputs":[],"output":{"name":"i64"}}],[11,"to_isize","","",7,{"inputs":[],"output":{"name":"isize"}}],[11,"neg","","",8,null],[11,"neg","","",6,null],[11,"neg","","",7,null],[11,"add","","",8,null],[11,"add","","",6,null],[11,"add","","",7,null],[11,"add","","",6,null],[11,"add","","",7,null],[11,"add","","",6,null],[11,"add","","",7,null],[11,"sub","","",8,null],[11,"sub","","",8,null],[11,"sub","","",8,null],[11,"sub","","",6,null],[11,"sub","","",7,null],[11,"sub","","",6,null],[11,"sub","","",7,null],[11,"sub","","",6,null],[11,"sub","","",7,null],[11,"mul","","",8,null],[11,"mul","","",6,null],[11,"mul","","",7,null],[11,"mul","","",6,null],[11,"mul","","",7,null],[11,"mul","","",6,null],[11,"mul","","",7,null],[11,"div","","",8,null],[11,"div","","",6,null],[11,"div","","",6,null],[11,"div","","",7,null],[11,"div","","",7,null],[11,"rem","","",8,null],[11,"rem","","",6,null],[11,"rem","","",6,null],[11,"rem","","",7,null],[11,"rem","","",7,null],[11,"powi","","",8,null],[11,"powi","","",8,null],[11,"powi","","",8,null],[11,"powi","","",9,null],[11,"powi","","",10,null],[11,"powi","","",10,null],[11,"powi","","",6,null],[11,"powi","","",7,null],[11,"powi","","",6,null],[11,"powi","","",7,null],[11,"powi","","",7,null],[11,"min","","",8,null],[11,"min","","",8,null],[11,"min","","",8,null],[11,"min","","",6,null],[11,"min","","",7,null],[11,"min","","",6,null],[11,"min","","",7,null],[11,"min","","",6,null],[11,"min","","",7,null],[11,"max","","",8,null],[11,"max","","",8,null],[11,"max","","",8,null],[11,"max","","",6,null],[11,"max","","",7,null],[11,"max","","",6,null],[11,"max","","",7,null],[11,"max","","",6,null],[11,"max","","",7,null],[0,"marker_traits","typenum","All of the marker traits used in typenum.",null,null],[8,"NonZero","typenum::marker_traits","A marker trait to designate that a type is not zero. All number types in this crate implement `NonZero` except `B0`, `U0`, and `Z0`.",null,null],[8,"Ord","","A Marker trait for the types `Greater`, `Equal`, and `Less`.",null,null],[10,"to_ordering","","",11,{"inputs":[],"output":{"name":"ordering"}}],[8,"Bit","","The marker trait for compile time bits.",null,null],[10,"to_u8","","",12,{"inputs":[],"output":{"name":"u8"}}],[10,"to_bool","","",12,{"inputs":[],"output":{"name":"bool"}}],[8,"Unsigned","","The marker trait for compile time unsigned integers.",null,null],[10,"to_u8","","",13,{"inputs":[],"output":{"name":"u8"}}],[10,"to_u16","","",13,{"inputs":[],"output":{"name":"u16"}}],[10,"to_u32","","",13,{"inputs":[],"output":{"name":"u32"}}],[10,"to_u64","","",13,{"inputs":[],"output":{"name":"u64"}}],[10,"to_usize","","",13,{"inputs":[],"output":{"name":"usize"}}],[10,"to_i8","","",13,{"inputs":[],"output":{"name":"i8"}}],[10,"to_i16","","",13,{"inputs":[],"output":{"name":"i16"}}],[10,"to_i32","","",13,{"inputs":[],"output":{"name":"i32"}}],[10,"to_i64","","",13,{"inputs":[],"output":{"name":"i64"}}],[10,"to_isize","","",13,{"inputs":[],"output":{"name":"isize"}}],[8,"Integer","","The marker trait for compile time signed integers.",null,null],[10,"to_i8","","",14,{"inputs":[],"output":{"name":"i8"}}],[10,"to_i16","","",14,{"inputs":[],"output":{"name":"i16"}}],[10,"to_i32","","",14,{"inputs":[],"output":{"name":"i32"}}],[10,"to_i64","","",14,{"inputs":[],"output":{"name":"i64"}}],[10,"to_isize","","",14,{"inputs":[],"output":{"name":"isize"}}],[8,"TypeArray","","The marker trait for type-level arrays of type-level numbers.",null,null],[0,"type_operators","typenum","Useful type operators that are not defined in `core::ops`.",null,null],[8,"Same","typenum::type_operators","A type operator that ensures that `Rhs` is the same as `Self`, it is mainly useful for writing macros that can take arbitrary binary or unary operators.",null,null],[16,"Output","","Should always be `Self`",15,null],[8,"Abs","","A type operator that returns the absolute value.",null,null],[16,"Output","","The absolute value.",16,null],[8,"Pow","","A type operator that provides exponentiation by repeated squaring.",null,null],[16,"Output","","The result of the exponentiation.",17,null],[10,"powi","","This function isn't used in this crate, but may be useful for others. It is implemented for primitives.",17,null],[8,"Cmp","","A type operator for comparing `Self` and `Rhs`. It provides a similar functionality to the function `core::cmp::Ord::cmp` but for types.",null,null],[16,"Output","","The result of the comparison. It should only ever be one of `Greater`, `Less`, or `Equal`.",18,null],[8,"Len","","A type operator that gives the length of an `Array` or the number of bits in a `UInt`.",null,null],[16,"Output","","The length as a type-level unsigned integer.",19,null],[10,"len","","This function isn't used in this crate, but may be useful for others.",19,null],[8,"PartialDiv","","Division as a partial function. This type operator performs division just as `Div`, but is only defined when the result is an integer (i.e. there is no remainder).",null,null],[16,"Output","","The type of the result of the division",20,null],[10,"partial_div","","Method for performing the division",20,null],[8,"Min","","A type operator that returns the minimum of `Self` and `Rhs`.",null,null],[16,"Output","","The type of the minimum of `Self` and `Rhs`",21,null],[10,"min","","Method returning the minimum",21,null],[8,"Max","","A type operator that returns the maximum of `Self` and `Rhs`.",null,null],[16,"Output","","The type of the maximum of `Self` and `Rhs`",22,null],[10,"max","","Method returning the maximum",22,null],[8,"IsLess","","A type operator that returns `True` if `Self < Rhs`, otherwise returns `False`.",null,null],[16,"Output","","The type representing either `True` or `False`",23,null],[10,"is_less","","Method returning `True` or `False`.",23,null],[8,"IsEqual","","A type operator that returns `True` if `Self == Rhs`, otherwise returns `False`.",null,null],[16,"Output","","The type representing either `True` or `False`",24,null],[10,"is_equal","","Method returning `True` or `False`.",24,null],[8,"IsGreater","","A type operator that returns `True` if `Self > Rhs`, otherwise returns `False`.",null,null],[16,"Output","","The type representing either `True` or `False`",25,null],[10,"is_greater","","Method returning `True` or `False`.",25,null],[8,"IsLessOrEqual","","A type operator that returns `True` if `Self <= Rhs`, otherwise returns `False`.",null,null],[16,"Output","","The type representing either `True` or `False`",26,null],[10,"is_less_or_equal","","Method returning `True` or `False`.",26,null],[8,"IsNotEqual","","A type operator that returns `True` if `Self != Rhs`, otherwise returns `False`.",null,null],[16,"Output","","The type representing either `True` or `False`",27,null],[10,"is_not_equal","","Method returning `True` or `False`.",27,null],[8,"IsGreaterOrEqual","","A type operator that returns `True` if `Self >= Rhs`, otherwise returns `False`.",null,null],[16,"Output","","The type representing either `True` or `False`",28,null],[10,"is_greater_or_equal","","Method returning `True` or `False`.",28,null],[0,"operator_aliases","typenum","Aliases for the type operators used in this crate. Their purpose is to increase the ergonomics of performing operations on the types defined here. For even more ergonomics, consider using the `op!` macro instead.",null,null],[6,"And","typenum::operator_aliases","Alias for the associated type of `BitAnd`: `And<A, B> = <A as BitAnd<B>>::Output`",null,null],[6,"Or","","Alias for the associated type of `BitOr`: `Or<A, B> = <A as BitOr<B>>::Output`",null,null],[6,"Xor","","Alias for the associated type of `BitXor`: `Xor<A, B> = <A as BitXor<B>>::Output`",null,null],[6,"Shleft","","Alias for the associated type of `Shl`: `Shleft<A, B> = <A as Shl<B>>::Output`",null,null],[6,"Shright","","Alias for the associated type of `Shr`: `Shright<A, B> = <A as Shr<B>>::Output`",null,null],[6,"Sum","","Alias for the associated type of `Add`: `Sum<A, B> = <A as Add<B>>::Output`",null,null],[6,"Diff","","Alias for the associated type of `Sub`: `Diff<A, B> = <A as Sub<B>>::Output`",null,null],[6,"Prod","","Alias for the associated type of `Mul`: `Prod<A, B> = <A as Mul<B>>::Output`",null,null],[6,"Quot","","Alias for the associated type of `Div`: `Quot<A, B> = <A as Div<B>>::Output`",null,null],[6,"Mod","","Alias for the associated type of `Rem`: `Mod<A, B> = <A as Rem<B>>::Output`",null,null],[6,"PartialQuot","","Alias for the associated type of `PartialDiv`: `PartialQuot<A, B> = <A as PartialDiv<B>>::Output`",null,null],[6,"Negate","","Alias for the associated type of `Neg`: `Negate<A> = <A as Neg>::Output`",null,null],[6,"AbsVal","","Alias for the associated type of `Abs`: `AbsVal<A> = <A as Abs>::Output`",null,null],[6,"Exp","","Alias for the associated type of `Pow`: `Exp<A, B> = <A as Pow<B>>::Output`",null,null],[6,"Add1","","Alias to make it easy to add 1: `Add1<A> = <A as Add<B1>>::Output`",null,null],[6,"Sub1","","Alias to make it easy to subtract 1: `Sub1<A> = <A as Sub<B1>>::Output`",null,null],[6,"Square","","Alias to make it easy to square. `Square<A> = <A as Mul<A>>::Output`",null,null],[6,"Cube","","Alias to make it easy to square. `Cube<A> = <Square<A> as Mul<A>>::Output`",null,null],[6,"Compare","","Alias for the associated type of `Cmp`: `Compare<A, B> = <A as Cmp<B>>::Output`",null,null],[6,"Length","","Alias for the associated type of `Len`: `Length<A> = <A as Len>::Output`",null,null],[6,"Minimum","","Alias for the associated type of `Min`: `Minimum<A, B> = <A as Min<B>>::Output`",null,null],[6,"Maximum","","Alias for the associated type of `Max`: `Maximum<A, B> = <A as Max<B>>::Output`",null,null],[6,"Le","","Alias for the associated type of `IsLess`: `Le<A, B> = <A as IsLess<B>>::Output`",null,null],[6,"Eq","","Alias for the associated type of `IsEqual`: `Eq<A, B> = <A as IsEqual<B>>::Output`",null,null],[6,"Gr","","Alias for the associated type of `IsGreater`: `Gr<A, B> = <A as IsGreater<B>>::Output`",null,null],[6,"GrEq","","Alias for the associated type of `IsGreaterOrEqual`: `GrEq<A, B> = <A as IsGreaterOrEqual<B>>::Output`",null,null],[6,"LeEq","","Alias for the associated type of `IsLessOrEqual`: `LeEq<A, B> = <A as IsLessOrEqual<B>>::Output`",null,null],[6,"NotEq","","Alias for the associated type of `IsNotEqual`: `NotEq<A, B> = <A as IsNotEqual<B>>::Output`",null,null],[0,"array","typenum","A type-level array of type-level numbers.",null,null],[3,"ATerm","typenum::array","The terminating type for type arrays.",null,null],[3,"TArr","","`TArr` is a type that acts as an array of types. It is defined similarly to `UInt`, only its values can be more than bits, and it is designed to act as an array. So you can only add two if they have the same number of elements, for example.",null,null],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"aterm"}],"output":{"name":"bool"}}],[11,"cmp","","",29,{"inputs":[{"name":"self"},{"name":"aterm"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"self"},{"name":"aterm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"aterm"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"tarr"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"tarr"}],"output":{"name":"bool"}}],[11,"cmp","","",30,{"inputs":[{"name":"self"},{"name":"tarr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"self"},{"name":"tarr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"self"},{"name":"tarr"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"self"},{"name":"tarr"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"self"},{"name":"tarr"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"self"},{"name":"tarr"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"tarr"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",29,null],[11,"len","","",30,null],[11,"add","","",29,null],[11,"add","","",30,null],[11,"sub","","",29,null],[11,"sub","","",30,null],[11,"mul","","",29,null],[11,"mul","","",30,null],[11,"mul","typenum::int","",8,null],[11,"mul","","",6,null],[11,"mul","","",7,null],[11,"mul","","",8,null],[11,"mul","","",6,null],[11,"mul","","",7,null],[11,"div","typenum::array","",29,null],[11,"div","","",30,null],[11,"partial_div","","",29,null],[11,"partial_div","","",30,null],[11,"rem","","",29,null],[11,"rem","","",30,null],[11,"neg","","",29,null],[11,"neg","","",30,null],[11,"eq","typenum","",31,{"inputs":[{"name":"self"},{"name":"greater"}],"output":{"name":"bool"}}],[11,"cmp","","",31,{"inputs":[{"name":"self"},{"name":"greater"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"self"},{"name":"greater"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"greater"}}],[11,"hash","","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"greater"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"less"}],"output":{"name":"bool"}}],[11,"cmp","","",32,{"inputs":[{"name":"self"},{"name":"less"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"less"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"less"}}],[11,"hash","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"less"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"equal"}],"output":{"name":"bool"}}],[11,"cmp","","",33,{"inputs":[{"name":"self"},{"name":"equal"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"equal"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"equal"}}],[11,"hash","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"equal"}}],[11,"to_ordering","","",31,{"inputs":[],"output":{"name":"ordering"}}],[11,"to_ordering","","",32,{"inputs":[],"output":{"name":"ordering"}}],[11,"to_ordering","","",33,{"inputs":[],"output":{"name":"ordering"}}],[14,"op","","Convenient type operations.",null,null],[14,"cmp","","A convenience macro for comparing type numbers. Use `op!` instead.",null,null],[14,"tarr","","Create a new type-level arrray. Only usable on Rust 1.13.0 or newer.",null,null],[14,"assert_type_eq","","Asserts that two types are the same.",null,null],[14,"assert_type","","Asserts that a type is `True`, aka `B1`.",null,null]],"paths":[[3,"B0"],[3,"B1"],[8,"GetBit"],[8,"SetBit"],[3,"UTerm"],[3,"UInt"],[3,"PInt"],[3,"NInt"],[3,"Z0"],[6,"P1"],[6,"N1"],[8,"Ord"],[8,"Bit"],[8,"Unsigned"],[8,"Integer"],[8,"Same"],[8,"Abs"],[8,"Pow"],[8,"Cmp"],[8,"Len"],[8,"PartialDiv"],[8,"Min"],[8,"Max"],[8,"IsLess"],[8,"IsEqual"],[8,"IsGreater"],[8,"IsLessOrEqual"],[8,"IsNotEqual"],[8,"IsGreaterOrEqual"],[3,"ATerm"],[3,"TArr"],[3,"Greater"],[3,"Less"],[3,"Equal"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
initSearch(searchIndex);
